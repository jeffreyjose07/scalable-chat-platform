name: CI Pipeline

on:
  push:
    branches: [ main, develop, render-single-service-deployment ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
      
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      working-directory: ./backend
      run: chmod +x ./gradlew

    - name: Build backend
      working-directory: ./backend
      run: ./gradlew build -x test
      env:
        SPRING_PROFILES_ACTIVE: test
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        JWT_EXPIRATION: 86400000
        JWT_ISSUER: chat-platform-backend-test
        JWT_AUDIENCE: chat-platform-users-test
        ADMIN_USERNAME: testadmin
        ADMIN_EMAIL: test@example.com
        ADMIN_PASSWORD: TestPassword123!

    - name: Run backend tests
      working-directory: ./backend
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpass
        SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        JWT_EXPIRATION: 86400000
        JWT_ISSUER: chat-platform-backend-test
        JWT_AUDIENCE: chat-platform-users-test
        ADMIN_USERNAME: testadmin
        ADMIN_EMAIL: test@example.com
        ADMIN_PASSWORD: TestPassword123!

    - name: Generate test report
      working-directory: ./backend
      run: ./gradlew jacocoTestReport
      if: always()

  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: |
        if npm run lint; then
          echo "✅ ESLint passed"
        else
          echo "⚠️ ESLint found issues but continuing build"
        fi
      continue-on-error: true

    - name: Run TypeScript check
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      env:
        CI: false

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        CI: false

    - name: Upload Test Coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage
        path: frontend/coverage/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitGuardian scan
      uses: GitGuardian/ggshield-action@v1.25.0
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      continue-on-error: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: backend-build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
      
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      working-directory: ./backend
      run: chmod +x ./gradlew

    - name: Run tests and collect coverage
      working-directory: ./backend
      run: ./gradlew test jacocoTestReport
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpass
        SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        JWT_EXPIRATION: 86400000
        JWT_ISSUER: chat-platform-backend-test
        JWT_AUDIENCE: chat-platform-users-test
        ADMIN_USERNAME: testadmin
        ADMIN_EMAIL: test@example.com
        ADMIN_PASSWORD: TestPassword123!

    - name: Run SonarCloud analysis
      working-directory: ./backend
      run: ./gradlew sonar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpass
        SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        JWT_EXPIRATION: 86400000
        JWT_ISSUER: chat-platform-backend-test
        JWT_AUDIENCE: chat-platform-users-test
        ADMIN_USERNAME: testadmin
        ADMIN_EMAIL: test@example.com
        ADMIN_PASSWORD: TestPassword123!

  build-status:
    name: Build Status Check
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.backend-build.result }}" == "success" && "${{ needs.frontend-build.result }}" == "success" ]]; then
          echo "✅ All builds passed!"
          echo "Backend: ${{ needs.backend-build.result }}"
          echo "Frontend: ${{ needs.frontend-build.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          exit 0
        else
          echo "❌ Build failed!"
          echo "Backend: ${{ needs.backend-build.result }}"
          echo "Frontend: ${{ needs.frontend-build.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          exit 1
        fi