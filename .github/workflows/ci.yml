name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    # No external services needed for unit tests
    # Future integration tests will use Testcontainers

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Create Maven settings.xml (override corporate settings)
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                  http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <mirrors>
            <mirror>
              <id>central</id>
              <mirrorOf>*</mirrorOf>
              <url>https://repo1.maven.org/maven2</url>
            </mirror>
          </mirrors>
          <profiles>
            <profile>
              <id>default</id>
              <repositories>
                <repository>
                  <id>central</id>
                  <url>https://repo1.maven.org/maven2</url>
                  <releases><enabled>true</enabled></releases>
                  <snapshots><enabled>false</enabled></snapshots>
                </repository>
              </repositories>
            </profile>
          </profiles>
          <activeProfiles>
            <activeProfile>default</activeProfile>
          </activeProfiles>
        </settings>
        EOF

    - name: Build backend
      working-directory: ./backend
      run: mvn clean compile -B
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Run backend tests
      working-directory: ./backend
      run: mvn test -B
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Tests
        path: backend/target/surefire-reports/*.xml
        reporter: java-junit

  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
      continue-on-error: true

    - name: Run TypeScript check
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        CI: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        directory: ./frontend/coverage
        flags: frontend

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-status:
    name: Build Status Check
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.backend-build.result }}" == "success" && "${{ needs.frontend-build.result }}" == "success" ]]; then
          echo "✅ All builds passed!"
          exit 0
        else
          echo "❌ Build failed!"
          echo "Backend: ${{ needs.backend-build.result }}"
          echo "Frontend: ${{ needs.frontend-build.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          exit 1
        fi