<inspections profile="Project Default"><group name="Docker-compose" path=""><inspection shortName="ComposeUnknownKeys" defaultSeverity="ERROR" displayName="Unknown docker-compose YAML keys" enabled="true" language="yaml" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unrecognized keys in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeUnknownValues" defaultSeverity="ERROR" displayName="Unknown docker-compose YAML values" enabled="true" language="yaml" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unrecognized values in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeErroneousRelation" defaultSeverity="WARNING" displayName="Erroneous relation in docker-compose YAML" enabled="true" language="yaml" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports erroneous relations in Docker Compose files.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/reference/compose-file/services/#volumes"&gt;Compose file specification&lt;/a&gt;,
  certain fields may be invalid depending on the other key-value pairs and may cause errors.
&lt;/p&gt;
&lt;p&gt;
  For example, one such relation is volume &lt;code&gt;source&lt;/code&gt; field, which is invalid when the volume &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;tmpfs&lt;/code&gt;.
&lt;/p&gt;
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeUnquotedPorts" defaultSeverity="WEAK WARNING" displayName="Unquoted port mappings" enabled="true" language="yaml" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unquoted port mappings in Docker Compose files.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#short-syntax-1"&gt;Compose file specification&lt;/a&gt;,
  mapping ports in the &lt;code&gt;HOST:CONTAINER&lt;/code&gt; format may lead to erroneous results when using a container port lower than 60,
  because YAML parses numbers in the format &lt;code&gt;xx:yy&lt;/code&gt; as a base-60 value.
  For this reason, we recommend always explicitly specifying the port mappings as strings.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ports:
    - 3000
    - 3000-3005
    - 22:22
    - 8080:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ports:
    - "3000"
    - "3000-3005"
    - "22:22"
    - "8080:8080"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeMissingKeys" defaultSeverity="ERROR" displayName="Missing docker-compose YAML keys" enabled="true" language="yaml" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing required keys in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Modularization issues" path="Java"><inspection shortName="ModuleWithTooManyClasses" defaultSeverity="WARNING" displayName="Module with too many classes" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports modules that contain too many classes. Overly large modules may indicate a lack of design clarity.
Java, Kotlin and Groovy classes are counted.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Maximum number of classes&lt;/b&gt; field to specify the maximum number of classes a module may have.&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InconsistentLanguageLevel" defaultSeverity="WARNING" displayName="Inconsistent language level settings" enabled="false" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports modules which depend on other modules with a higher language level. 
&lt;p&gt;Such dependencies should be removed or the language level of the module be increased.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ClassIndependentOfModule" defaultSeverity="WARNING" displayName="Class independent of its module" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports classes that:
&lt;ul&gt;
  &lt;li&gt;do not depend on any other class in their module&lt;/li&gt;
  &lt;li&gt;are not a dependency for any other class in their module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such classes are an indication of ad-hoc or incoherent modularisation strategies,
  and may often profitably be moved.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassOnlyUsedInOneModule" defaultSeverity="WARNING" displayName="Class only used from one other module" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports classes that:
&lt;ul&gt;
  &lt;li&gt;do not depend on any other class in their module&lt;/li&gt;
  &lt;li&gt;depend on classes from a different module&lt;/li&gt;
  &lt;li&gt;are a dependency only for classes from this other module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such classes could be moved into the module on which they depend.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ModuleWithTooFewClasses" defaultSeverity="WARNING" displayName="Module with too few classes" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports modules that contain too few classes. Overly small modules may indicate a too fragmented design.
Java, Kotlin and Groovy classes are counted.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Minimum number of classes&lt;/b&gt; field to specify the minimum number of classes a module may have.&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Scaladoc" path="Scala"><inspection shortName="ScalaDocMissingParameterDescription" defaultSeverity="WARNING" displayName="Missing tag parameter description" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the missing parameter description.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * Parameter x is missing a description
   * @param x
   */
  def test(x: Int): Int = x
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaDocInlinedTag" defaultSeverity="WARNING" displayName="Inlined tag" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports inlined tags used in Scaladoc.&lt;/p&gt;

&lt;p&gt;Scaladoc treats inlined tags as a monospaced text.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * Text 1&lt;br&gt;
   * Text 2 {@code some text}&lt;br&gt;
   * Text 3 {@link java.lang.String}&lt;br&gt;
   * Text 4 {@qwewqe some text}&lt;br&gt;
   * @note text
   */
  class A
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaDocUnbalancedHeader" defaultSeverity="WARNING" displayName="Header tags unbalanced" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unbalanced wiki syntax headers and the ignored text after such headers in Scaladocs.&lt;/p&gt;
&lt;p&gt;In the following example, &lt;code&gt;====&lt;/code&gt; is marked:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * == I'm a wiki style header ====
   */
  def test(i: Int): Unit = {

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the following example, &lt;code&gt;Ignored text&lt;/code&gt; is marked:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * == I'm a wiki style header == Ignored text
   */
  def test(i: Int): Unit = {

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaDocUnknownTag" defaultSeverity="WARNING" displayName="Unknown tag" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unknown tags in Scaladoc documentation and offers to remove them.&lt;/p&gt;
&lt;p&gt;In the following example, &lt;code&gt;blubquam&lt;/code&gt; is marked:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   *
   * @blubquam This is an unknown tag
   */
  def test(i: Int): Unit = ()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaDocParserErrorInspection" defaultSeverity="WARNING" displayName="Wrong scaladoc element" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports wrong Scaladoc elements.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaDocUnclosedTagWithoutParser" defaultSeverity="WARNING" displayName="Tag unclosed" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unclosed tags in Scaladoc.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * ''
   *
   * [[
   *
   * `
   */
  class A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * &amp;#39;&amp;#39;
   *
   * &amp;#91;&amp;#91;
   *
   * &amp;#96;
   */
  class A
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaDocUnknownParameter" defaultSeverity="WARNING" displayName="Unknown parameter" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports Scaladoc documentation about parameters that do not exist.&lt;/p&gt;
&lt;p&gt;
 In the following example, &lt;code&gt;x&lt;/code&gt; is marked:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   *
   * @param x This parameter does not exist on function `test`
   */
  def test(i: Int): Unit = {

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Maven" path=""><inspection shortName="MavenModelInspection" defaultSeverity="ERROR" displayName="Maven Model Inspection" enabled="true" language="XML" pluginId="org.jetbrains.idea.maven" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports resolution problems in a Maven model&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MavenPropertyInParent" defaultSeverity="WARNING" displayName="Usage of properties in parent description" enabled="true" language="XML" pluginId="org.jetbrains.idea.maven" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports that the usage of properties in modules parent definition is prohibited&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MavenDuplicateDependenciesInspection" defaultSeverity="WARNING" displayName="Duplicate Dependencies" enabled="true" language="XML" pluginId="org.jetbrains.idea.maven" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports duplicate dependencies&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MavenDuplicatePluginInspection" defaultSeverity="WARNING" displayName="Duplicate plugin declaration" enabled="true" language="XML" pluginId="org.jetbrains.idea.maven" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the duplication of the plugin declaration in pom.xml&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MavenParentMissedVersionInspection" defaultSeverity="ERROR" displayName="Parent version missed" enabled="true" language="XML" pluginId="org.jetbrains.idea.maven" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the absence of the parent version element for versions that do not support consumer POM feature&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MavenRedundantGroupId" defaultSeverity="WARNING" displayName="Redundant groupId" enabled="true" language="XML" pluginId="org.jetbrains.idea.maven" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the unnecessary &amp;lt;groupId&amp;gt; definition since it is already defined in the parent pom.xml&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MavenParentMissedGroupIdArtifactIdInspection" defaultSeverity="ERROR" displayName="Parent groupId or artifactId is missing" enabled="true" language="XML" pluginId="org.jetbrains.idea.maven" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports the absence of &amp;lt;groupId&amp;gt; and &amp;lt;artifactId&amp;gt; elements in the &amp;lt;parent&amp;gt; tag.
  &lt;br&gt;(for Maven 4 and later, they are optional if a parent POM could be found by the relativePath).
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Inheritance issues" path="Java"><inspection shortName="RedundantMethodOverride" defaultSeverity="WARNING" displayName="Method is identical to its super method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that are identical to their super methods. Such methods have the same signature
as their super method and either have an identical body or only their body consists only of a call to the super method.
These methods are redundant and can be removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the first checkbox below to run the inspection for the methods that override library methods.
  Checking library methods may slow down the inspection.
&lt;p&gt;
  Use the second checkbox below to ignore methods that only delegate calls to their super methods.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticInheritance" defaultSeverity="WARNING" displayName="Static inheritance" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports interfaces that are implemented only to provide access to constants.
This kind of inheritance is often confusing and may hide important dependency information.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExtendsAnnotation" defaultSeverity="WARNING" displayName="Class extends annotation interface" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes declared as an implementation or extension of an annotation
interface.
&lt;p&gt;While it is legal to extend an annotation interface, it is often done by accident,
  and the result can't be used as an annotation.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Annotations&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbstractMethodOverridesConcreteMethod" defaultSeverity="WARNING" displayName="Abstract method overrides concrete method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;abstract&lt;/code&gt; methods that override concrete super methods.
&lt;p&gt;Methods overridden from &lt;code&gt;java.lang.Object&lt;/code&gt; are not reported by this inspection.&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExtendsUtilityClass" defaultSeverity="WARNING" displayName="Class extends utility class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that extend a utility class.
&lt;p&gt;
A utility class is a non-empty class in which all fields and methods are static.
  Extending a utility class also allows for inadvertent object instantiation of the
  utility class, because the constructor cannot be made private in order to allow extension.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore if overriding class is a utility class&lt;/b&gt; option to ignore any classes that override a utility class but are
    also utility classes themselves.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InterfaceNeverImplemented" defaultSeverity="WARNING" displayName="Interface which has no concrete subclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports interfaces that have no concrete subclasses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the list below to add annotations. Interfaces declared with
    one of these annotations will be ignored by the inspection.
  &lt;/li&gt;
  &lt;li&gt;
    Use the checkbox below to ignore interfaces that only declare constant fields.
    Such interfaces may still be usable even without implementations.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbstractMethodWithMissingImplementations" defaultSeverity="WARNING" displayName="Abstract method with missing implementations" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;abstract&lt;/code&gt; methods that are not implemented in every concrete subclass.
&lt;p&gt;
  This results in a compile-time error on the subclasses;
  the inspection reports the problem at the point of the abstract method, allowing faster detection of the problem.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbstractClassNeverImplemented" defaultSeverity="WARNING" displayName="Abstract class which has no concrete subclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;abstract&lt;/code&gt; classes that have no concrete subclasses. Deprecated abstract classes are not reported.
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantImplements" defaultSeverity="WARNING" displayName="Redundant interface declaration" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports interfaces in a class' &lt;code&gt;implements&lt;/code&gt; list or an interface's &lt;code&gt;extends&lt;/code&gt; list that
are already implemented by a superclass or extended by a superinterface.
Such declarations are unnecessary and may be safely removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X implements One, Two {
  }
  interface One {}
  interface Two extends One {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X implements Two {
  }
  interface One {}
  interface Two extends One {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the options to not report on &lt;code&gt;Serializable&lt;/code&gt; or &lt;code&gt;Externalizable&lt;/code&gt;
  in an &lt;code&gt;extends&lt;/code&gt; or &lt;code&gt;implements&lt;/code&gt; list.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FrequentlyUsedInheritorInspection" defaultSeverity="INFORMATION" displayName="Class may extend a commonly used base class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes or interfaces that can be replaced with an implementation or extension of a more specific commonly used class or interface.
&lt;p&gt;For this inspection to work, a superclass needs to be in project source files and the project needs to use the IntelliJ IDEA build system.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyInheritor implements A {} // B suggested on the A reference

  interface A {}

  abstract class B implements A {}

  abstract class C1 extends B {}
  abstract class C2 extends B {}
  abstract class C3 extends B {}
  abstract class C4 extends B {}
  abstract class C5 extends B {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;By default, this inspection doesn't highlight issues in the editor but only provides a quick-fix.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbstractMethodOverridesAbstractMethod" defaultSeverity="WARNING" displayName="Abstract method overrides abstract method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;abstract&lt;/code&gt; methods that override &lt;code&gt;abstract&lt;/code&gt; methods.
&lt;p&gt;Such methods don't make sense because any concrete child class will have to implement the abstract method anyway.&lt;/p&gt;
&lt;p&gt;
  Methods whose return types, exception declarations, annotations, or modifiers differ from the overridden method are not reported by this inspection.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore methods with different Javadoc than their super methods&lt;/b&gt; option to ignore any abstract methods whose JavaDoc comment differs from their super method.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RefusedBequest" defaultSeverity="WARNING" displayName="Method does not call super method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that override a super method without calling it.
This is also known as a &lt;i&gt;refused bequest&lt;/i&gt;.
Such methods may represent a failure of abstraction and cause hard-to-trace bugs.
&lt;p&gt;
  The inspection doesn't report methods overridden from &lt;code&gt;java.lang.Object&lt;/code&gt;, except for &lt;code&gt;clone()&lt;/code&gt;.
  The &lt;code&gt;clone()&lt;/code&gt; method should by convention call its super method,
  which will return an object of the correct type.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example 1:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A {
    @Override
    public Object clone() {
      // does not call 'super.clone()'
      return new A();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example 2:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  interface I {
    default void foo() {}
  }

  class A implements I {
    // warning on method when
    // 'Ignore 'default' super methods' is disabled
    @Override
    public void foo(){}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Only report when super method is annotated by&lt;/b&gt; option to ignore super methods marked with the annotations
    from the provided list. You can manually add annotations to the list.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore empty super methods&lt;/b&gt; option to ignore super methods that are either empty or only throw an exception.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore 'default' super methods&lt;/b&gt; option to ignore &lt;code&gt;default&lt;/code&gt; super methods from interfaces.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ImplicitSubclassInspection" defaultSeverity="ERROR" displayName="Final declaration can't be overridden at runtime" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when your code prevents a class from being subclassed by some framework
(for example, Spring or Hibernate) at runtime.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Typical examples of necessary but impossible subclassing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;final&lt;/code&gt; classes marked with framework-specific annotations (for example, Spring &lt;code&gt;@Configuration&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;final&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; methods
    marked with framework-specific annotations (for example, Spring &lt;code&gt;@Transactional&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;methods marked with framework-specific annotations inside &lt;code&gt;final&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list of reported cases depends on the frameworks used.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExtendsConcreteCollection" defaultSeverity="WARNING" displayName="Class explicitly extends a 'Collection' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that extend concrete subclasses of the &lt;code&gt;java.util.Collection&lt;/code&gt; or &lt;code&gt;java.util.Map&lt;/code&gt; classes.
&lt;p&gt;
  Subclassing concrete collection types is a common yet poor practice. It is considerably more brittle than delegating collection calls.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParameterTypePreventsOverriding" defaultSeverity="WARNING" displayName="Parameter type prevents overriding" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports parameter types of a subclass method that have the same name as
the parameter type of the corresponding super method but belong to a different package.
In these cases, the subclass method cannot override the super method.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;b&gt;public class&lt;/b&gt; A {
 &lt;b&gt;public void&lt;/b&gt; method(Object o) {}
}

&lt;b&gt;public class&lt;/b&gt; B &lt;b&gt;extends&lt;/b&gt; A {
 &lt;b&gt;public void&lt;/b&gt; method(Object o) {} // warning on parameter type
 &lt;b&gt;class&lt;/b&gt; Object {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;b&gt;public class&lt;/b&gt; A {
 &lt;b&gt;public void&lt;/b&gt; method(Object o) {}
}

&lt;b&gt;public class&lt;/b&gt; B &lt;b&gt;extends&lt;/b&gt; A {
 &lt;b&gt;public void&lt;/b&gt; method(java.lang.Object o) {} // new parameter type
 &lt;b&gt;class&lt;/b&gt; Object {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbstractClassWithoutAbstractMethods" defaultSeverity="WARNING" displayName="Abstract class without 'abstract' methods" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;abstract&lt;/code&gt; classes that have no &lt;code&gt;abstract&lt;/code&gt; methods.
In most cases it does not make sense to have an &lt;code&gt;abstract&lt;/code&gt; class without any &lt;code&gt;abstract&lt;/code&gt; methods,
and the &lt;code&gt;abstract&lt;/code&gt; modifier can be removed from the class.
If the class was declared &lt;code&gt;abstract&lt;/code&gt; to prevent instantiation,
it is often a better option to use a &lt;code&gt;private&lt;/code&gt; constructor to prevent instantiation instead.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class Example {
    public String getName() {
      return "IntelliJ IDEA";
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the option to ignore utility classes.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeParameterExtendsFinalClass" defaultSeverity="WARNING" displayName="Type parameter extends 'final' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type parameters declared to extend a &lt;code&gt;final&lt;/code&gt; class.
&lt;p&gt;Suggests replacing the type parameter with the type of the specified &lt;code&gt;final&lt;/code&gt; class since
  &lt;code&gt;final&lt;/code&gt; classes cannot be extended.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; foo() {
    List&amp;lt;? &lt;b&gt;extends&lt;/b&gt; Integer&amp;gt; list; // Warning: the Integer class is a final class
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; foo() {
    List&amp;lt;Integer&amp;gt; list;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Generics&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonProtectedConstructorInAbstractClass" defaultSeverity="WARNING" displayName="Public constructor in abstract class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;public&lt;/code&gt; constructors of &lt;code&gt;abstract&lt;/code&gt; classes.
&lt;p&gt;
  Constructors of &lt;code&gt;abstract&lt;/code&gt; classes can only be called from the constructors of
  their subclasses, declaring them &lt;code&gt;public&lt;/code&gt; may be confusing.
&lt;/p&gt;
&lt;p&gt;The quick-fix makes such constructors protected.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public abstract class&lt;/b&gt; Foo {
    &lt;b&gt;public&lt;/b&gt; Foo () { // warning: has 'public' modifier
        /* ... */
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public abstract class&lt;/b&gt; Foo {
    &lt;b&gt;protected&lt;/b&gt; Foo () {
        /* ... */
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore for non-public classes&lt;/b&gt; option below to ignore &lt;code&gt;public&lt;/code&gt; constructors in non-public classes.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProblematicVarargsMethodOverride" defaultSeverity="WARNING" displayName="Non-varargs method overrides varargs method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that override a variable arity (a.k.a. varargs) method but replace the variable arity parameter with an array parameter.
Though this code is valid, it may be confusing and should be avoided.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingOverrideAnnotation" defaultSeverity="INFORMATION" displayName="Missing '@Override' annotation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports methods overriding superclass methods but are not annotated with &lt;code&gt;@java.lang.Override&lt;/code&gt;.
  &lt;p&gt;
  Annotating methods with &lt;code&gt;@java.lang.Override&lt;/code&gt; improves code readability since it shows the intent.
  In addition, the compiler emits an error when a signature of the overridden method doesn't match the superclass method.
  &lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;
    class X {
      public String toString() {
        return "hello world";
      }
    }
  &lt;/code&gt;&lt;/pre&gt;
  &lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;
    class X {
      @Override
      public String toString() {
        return "hello world";
      }
    }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore 'equals()', 'hashCode()' and 'toString()'&lt;/b&gt; option to ignore these
    &lt;code&gt;java.lang.Object&lt;/code&gt; methods: &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt;, and
    &lt;code&gt;toString()&lt;/code&gt;. The risk that these methods will disappear and
    your code won't be compiling anymore due to the &lt;code&gt;@Override&lt;/code&gt;
    annotation is relatively small.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore methods in anonymous classes&lt;/b&gt; option to ignore methods
    in anonymous classes.
  &lt;/li&gt;
  &lt;li&gt;
    Disable the &lt;b&gt;Highlight method when its overriding methods do not all have the '@Override' annotation&lt;/b&gt; option to only
    warn on the methods missing an &lt;code&gt;@Override&lt;/code&gt; annotation, and not on overridden methods where one or more descendants are
    missing an &lt;code&gt;@Override&lt;/code&gt; annotation.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Annotations&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AbstractClassExtendsConcreteClass" defaultSeverity="WARNING" displayName="Abstract class extends concrete class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;abstract&lt;/code&gt; classes that extend concrete classes.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Worksheet" path="Scala"><inspection shortName="WorksheetPackageDeclaration" defaultSeverity="ERROR" displayName="Worksheet package declaration" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports package declarations used in a worksheet.&lt;/p&gt;
&lt;p&gt;In &lt;b&gt;REPL&lt;/b&gt; mode, package declarations are invalid statements. In &lt;b&gt;Plain&lt;/b&gt; mode, the needed package declaration is automatically added during compilation.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AmmoniteUnresolvedLibrary" defaultSeverity="WARNING" displayName="Ammonite unresolved import" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports and helps fixing unresolved imports in the &lt;b&gt;Ammonite&lt;/b&gt; script.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Redundant modifiers" path="Java/Lombok"><inspection shortName="RedundantModifiersValLombok" defaultSeverity="WARNING" displayName="Unnecessary final before 'val'" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unneeded &lt;code&gt;final&lt;/code&gt; modifiers before &lt;code&gt;val&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantModifiersValueLombok" defaultSeverity="WARNING" displayName="@Value modifiers" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unneeded modifiers for classes annotated with &lt;code&gt;@Value&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantModifiersUtilityClassLombok" defaultSeverity="WARNING" displayName="@UtilityClass modifiers" enabled="false" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unneeded modifiers for classes annotated with &lt;code&gt;@UtilityClass&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Control flow issues" path="Groovy"><inspection shortName="GroovyTrivialConditional" defaultSeverity="WARNING" displayName="Redundant conditional expression" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ternary conditional operators of the form &lt;code&gt;x ? true : false&lt;/code&gt;
or similar, which can be trivially simplified.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  foo() ? true : false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
foo()
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyFallthrough" defaultSeverity="WARNING" displayName="Fallthrough in 'switch' statement" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;i&gt;fallthrough&lt;/i&gt; in switch statements.  While occasionally useful, fallthrough is often unintended, and may lead to surprising bugs.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
switch(n) {
  case 1:
    print 1
  case 2: // "case 1" fallthrough to "case 2". Statements from "case 2" will be executed immediately after "case 1".
    print 2
    break
  default:
    print "Default"
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GroovyUnnecessaryContinue" defaultSeverity="WARNING" displayName="Unnecessary 'continue' statement" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;continue&lt;/code&gt; statements if they are last reachable statements in the loop.
These &lt;code&gt;continue&lt;/code&gt; statements are unnecessary and can be safely removed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for(int i in array) {
      println(i)
      &lt;b&gt;continue&lt;/b&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for(int i in array) {
      println(i)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;For more information, see the same inspection in Java.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyReturnFromClosureCanBeImplicit" defaultSeverity="WARNING" displayName="'return' statement can be implicit" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports return statements at the end of closures which can be made implicit.
&lt;p&gt;
  Groovy closures implicitly return the value of the last statement in them.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def foo = {
    return 1
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def foo = {
    1
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovySwitchStatementWithNoDefault" defaultSeverity="WARNING" displayName="Switch statement with no default case" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements that do not contain
&lt;code&gt;default&lt;/code&gt; labels.
&lt;p&gt;
  Some coding practices may insist on adding this label to all &lt;code&gt;switch&lt;/code&gt; statements.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyConditionalWithIdenticalBranches" defaultSeverity="WARNING" displayName="Ternary expression with identical branches" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ternary expressions with identical "then" and "else" branches. Such expressions are almost certainly a programmer error.
&lt;p&gt;The quick-fix replaces the expression with its "then" branch.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  condition ? a.foo() : a.foo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a.foo()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyIfStatementWithIdenticalBranches" defaultSeverity="WARNING" displayName="If statement with identical branches" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements with identical "then" and &lt;code&gt;else&lt;/code&gt; branches.
Such statements are almost certainly programmer error.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
if (condition) {
  print "foo"
} else {
  print "foo"
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
print "foo"
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyConditionalCanBeElvis" defaultSeverity="INFORMATION" displayName="Ternary expression can be replaced with elvis expression" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ternary expressions which can be replaced by an elvis expression.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def notNull(o, defaultValue) {
      o != null ? o : defaultValue
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def notNull(o, defaultValue) {
      o ?: defaultValue
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyTrivialIf" defaultSeverity="WARNING" displayName="Redundant 'if' statement" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements which can be simplified to single assignment
or
&lt;code&gt;return&lt;/code&gt; statements.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (foo())
    return true;
  else
    return false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return foo();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyBreak" defaultSeverity="WARNING" displayName="'break' statement" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;break&lt;/code&gt; statements outside of &lt;code&gt;switch&lt;/code&gt; statements.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyIfStatementWithTooManyBranches" defaultSeverity="WARNING" displayName="If statement with too many branches" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements with too many branches.
Such statements may be confusing, and are often the sign of inadequate levels of design
abstraction.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
if (a) {
  print "foo"
} else if (b) {
  print "bar"
} else if (c) {
  print "baz"
} else if (d) {
  print "Too many branches"
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the &lt;b&gt;Maximum number of branches&lt;/b&gt; field to specify the maximum number of branches expected.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrFinalVariableAccess" defaultSeverity="WARNING" displayName="Final variable access" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports uninitialized final fields, invalid assignments to final variables, and parameters and fields.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyConditionalCanBeConditionalCall" defaultSeverity="INFORMATION" displayName="Ternary expression can be replaced with safe call" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ternary expressions which can be replaced by a safe call.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def charArray(String s) {
      s == null ? null : s.toCharArray()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def charArray(String s) {
      s?.toCharArray()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyConstantConditional" defaultSeverity="WARNING" displayName="Constant conditional expression" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions with boolean constant as a condition.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  true ? result1 : result2
  false ? result1 : result2
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyUnnecessaryReturn" defaultSeverity="WARNING" displayName="Unnecessary 'return' statement" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;return&lt;/code&gt; statements at the end of constructors and methods returning
&lt;code&gt;void&lt;/code&gt;. These are unnecessary and may be safely removed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; foo (String s){
      print(s)
      &lt;b&gt;return&lt;/b&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; foo (String s){
      print(s)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;For more information, see the same inspection in Java.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyConstantIfStatement" defaultSeverity="WARNING" displayName="Constant if statement" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements with boolean constant as a condition.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (true) {
      // ...
  }
  if (false) {
      // ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyLoopStatementThatDoesntLoop" defaultSeverity="WARNING" displayName="Loop statement that doesn't loop" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; statements whose
bodies are guaranteed to execute at most once. While such statements could be written intentionally, they
are usually a symptom of error.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
  for (int i in 0..&amp;lt;10) {
    return
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyContinue" defaultSeverity="WARNING" displayName="'continue' statement" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;continue&lt;/code&gt; statements.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Size" path="Scala/Collections"><inspection shortName="EmptyCheck" defaultSeverity="WARNING" displayName="Simplifiable empty check" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports different ways of checking emptiness of collections and &lt;code&gt;Options&lt;/code&gt; and suggests replacing them with &lt;code&gt;.isEmpty&lt;/code&gt;,
  &lt;code&gt;.nonEmpty&lt;/code&gt;, or &lt;code&gt;.isDefined.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  !Seq(1).isEmpty
  Seq(1).size == 0
  Seq(1).size != 0
  !(Seq(1).length &gt; 0)
  Seq(1).exists(_ =&gt; true)
  import scala.Function.const
  Seq(1).exists(const(true))
  !Option(0).isEmpty
  Option(0) == None
  Option(0) != None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1).nonEmpty
  Seq(1).isEmpty
  Seq(1).nonEmpty
  Seq(1).isEmpty
  Seq(1).nonEmpty
  import scala.Function.const
  Seq(1).nonEmpty
  Option(0).isDefined
  Option(0).isEmpty
  Option(0).isDefined
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SizeToLength" defaultSeverity="WARNING" displayName="Size to length on arrays and strings" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;array.size&lt;/code&gt; and &lt;code&gt;string.size&lt;/code&gt; calls.&lt;/p&gt;
&lt;p&gt;While such calls are legitimate, they require an additional implicit conversion to &lt;code&gt;SeqLike&lt;/code&gt;.
    Calling &lt;code&gt;length&lt;/code&gt; on arrays and strings may provide significant advantages.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Array(1, 2, 3, 4).size
  "this is a string".size
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Array(1, 2, 3, 4).length
  "this is a string".length
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Javadoc" path="Java"><inspection shortName="MissingPackageInfo" defaultSeverity="WARNING" displayName="Missing 'package-info.java'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports packages that contain classes but do not contain the &lt;code&gt;package-info.java&lt;/code&gt;
or &lt;code&gt;package.html&lt;/code&gt; files and are, thus, missing the package documentation.
&lt;p&gt;The quick-fix creates an initial &lt;code&gt;package-info.java&lt;/code&gt; file.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingDeprecatedAnnotation" defaultSeverity="WARNING" displayName="Missing '@Deprecated' annotation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports module declarations, classes, fields, or methods that have the &lt;code&gt;@deprecated&lt;/code&gt;
Javadoc tag but do not have the &lt;code&gt;@java.lang.Deprecated&lt;/code&gt; annotation.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * @deprecated use {@code example()} instead
   */
  void sample(){ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * @deprecated use {@code example()} instead
   */
  @Deprecated
  void sample(){ }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to report members annotated with &lt;code&gt;@Deprecated&lt;/code&gt; without
  an explanation in a Javadoc &lt;code&gt;@deprecated&lt;/code&gt; tag.

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Annotations&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavadocLinkAsPlainText" defaultSeverity="WARNING" displayName="Link specified as plain text" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports plain text links in Javadoc comments.
&lt;p&gt;
  The quick-fix suggests to wrap the link in an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
   /**
    * https://en.wikipedia.org/
    */
    void foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
   /**
    * &amp;lt;a href="https://en.wikipedia.org/"&amp;gt;https://en.wikipedia.org/&amp;lt;/a&amp;gt;
    */
    void foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplaceWithJavadoc" defaultSeverity="INFORMATION" displayName="Comment replaceable with Javadoc" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a regular comment that belongs to a field, method, or class that can be replaced with a Javadoc comment.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Main {
    /*
    * Hello,
    */
    // World!
    void f() {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Main {
    /**
     * Hello,
     * World!
     */
    void f() {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DanglingJavadoc" defaultSeverity="WARNING" displayName="Dangling Javadoc comment" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Javadoc comments that don't belong to any class, method or field.
The Javadoc tool ignores dangling Javadoc comments and doesn't include them in the HTML documentation it generates.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A {
    /**
     * Dangling comment
     */
    /**
     * Method javadoc
     */
     public void m(){}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is available to delete such comments completely or convert them into a block comment. After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A {
    /*
      Dangling comment
    */
    /**
     * Method javadoc
     */
    public void m(){}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore file header comment in JavaDoc format&lt;/b&gt; option to ignore comments at the beginning of Java files.
These are usually copyright messages.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageDotHtmlMayBePackageInfo" defaultSeverity="WARNING" displayName="'package.html' may be converted to 'package-info.java'" enabled="false" language="HTML" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;code&gt;package.html&lt;/code&gt; files which are used for documenting packages.
&lt;p&gt;Since JDK 1.5, it is recommended that you use &lt;code&gt;package-info.java&lt;/code&gt; files instead, as such
files can also contain package annotations. This way, package-info.java becomes a
  sole repository for package level annotations and documentation.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;package.html&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    Documentation example.
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied: &lt;code&gt;package-info.java&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * Documentation example.
 */
package com.sample;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingJavadoc" defaultSeverity="WARNING" displayName="Missing Javadoc" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing Javadoc comments and tags.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * Missing "@param" is reported (if configured).
   */
  public void sample(int param){
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fixes add missing tag or missing Javadoc comment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * Missing "@param" is reported (if configured).
   * @param param
   */
  public void sample(int param){
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Inspection can be configured to ignore deprecated elements or simple accessor methods like &lt;code&gt;getField()&lt;/code&gt; or &lt;code&gt;setField()&lt;/code&gt;.
&lt;/p&gt;
You can also use options below to configure required tags and minimal required visibility for the specific code elements
like method, field, class, package, module.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryInheritDoc" defaultSeverity="WARNING" displayName="Unnecessary '{@inheritDoc}' Javadoc comment" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Javadoc comments that contain only an &lt;code&gt;{@inheritDoc}&lt;/code&gt;
tag. Since Javadoc copies the super class' comment if no comment is present, a
comment containing only &lt;code&gt;{@inheritDoc}&lt;/code&gt; adds nothing.
&lt;p&gt;Also, it reports the &lt;code&gt;{@inheritDoc}&lt;/code&gt; usages in invalid locations, for example, in fields.&lt;/p&gt;
&lt;p&gt;Suggests removing the unnecessary Javadoc comment.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example implements Comparable&amp;lt;Example&amp;gt; {
    /**
     * {@inheritDoc}
     */
    @Override
    public int compareTo(Example o) {
      return 0;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example implements Comparable&amp;lt;Example&amp;gt; {
    @Override
    public int compareTo(Example o) {
      return 0;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavadocBlankLines" defaultSeverity="WARNING" displayName="Blank line should be replaced with &lt;p&gt; to break lines" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports blank lines in Javadoc comments.
&lt;p&gt;
  Blank lines in Javadoc may signal an intention split the text to different paragraphs. However, the Javadoc tool and IntelliJ IDEA will
  ignore them when rendering documentation comments.
&lt;/p&gt;
&lt;p&gt;
  The quick-fix suggests to replace the blank line with a paragraph tag (&amp;lt;p&amp;gt;).
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    /**
     * Doesn't do anything.
     *
     * Does absolutely nothing
     */
    void foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    /**
     * Doesn't do anything.
     * &amp;lt;p&amp;gt;
     * Does absolutely nothing
     */
    void foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PackageInfoWithoutPackage" defaultSeverity="WARNING" displayName="'package-info.java' without 'package' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;package-info.java&lt;/code&gt; files without a &lt;code&gt;package&lt;/code&gt; statement.
&lt;p&gt;
The Javadoc tool considers such files documentation for the default package even when the file is located somewhere else.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavadocDeclaration" defaultSeverity="WARNING" displayName="Javadoc declaration problems" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Javadoc comments and tags with the following problems:
&lt;ul&gt;
  &lt;li&gt;invalid tag names&lt;/li&gt;
  &lt;li&gt;incomplete tag descriptions&lt;/li&gt;
  &lt;li&gt;duplicated tags&lt;/li&gt;
  &lt;li&gt;missing Javadoc descriptions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * Invalid tag name
   * @poram param description
   */
  public void sample(int param){
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * Pointing to itself {@link #sample(int)}
   */
  public void sample(int param){
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quick-fix adds the unknown Javadoc tag to the list of user defined additional tags.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MismatchedJavadocCode" defaultSeverity="WARNING" displayName="Mismatch between Javadoc and code" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports parts of method specification written in English that contradict with the method declaration. This includes:
&lt;ul&gt;
  &lt;li&gt;Method specified to return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; but its return type is not boolean.&lt;/li&gt;
  &lt;li&gt;Method specified to return &lt;code&gt;null&lt;/code&gt; but it's annotated as &lt;code&gt;@NotNull&lt;/code&gt; or its return type is primitive.&lt;/li&gt;
  &lt;li&gt;Method specified to return list but its return type is set or array.&lt;/li&gt;
  &lt;li&gt;And so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * @return true if user is found, false otherwise
   */
  User findUser(String name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Note that false-positives are possible, as this inspection tries to interpret a human language. However, if the inspection reports
  incorrectly, it's still possible that the description is confusing and should be rewritten.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2022.3&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavadocHtmlLint" defaultSeverity="ERROR" displayName="HTML problems in Javadoc (DocLint)" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the same HTML issues in the Javadoc comments that have been reported by DocLint since Java 8.
&lt;p&gt;The inspection detects the following issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Self-closed, unclosed, unknown, misplaced, or empty tag&lt;/li&gt;
  &lt;li&gt;Unknown or wrong attribute&lt;/li&gt;
  &lt;li&gt;Misplaced text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * Unknown tag: List&amp;lt;String&amp;gt;
 * Unclosed tag: error&amp;lt;/b&amp;gt;
 * Misplaced text or tag: &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;one&amp;lt;/li&amp;gt;, &amp;lt;li&amp;gt;two&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;
 * Wrong or empty attribute: &amp;lt;a href=""&amp;gt;&amp;lt;/a&amp;gt;
 * Self-closed tag: &amp;lt;br/&amp;gt;
 * ...
 */
void sample(){ }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavadocReference" defaultSeverity="ERROR" displayName="Declaration has problems in Javadoc references" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references inside Javadoc comments.
&lt;p&gt;In the following example, the &lt;code&gt;someParam&lt;/code&gt; parameter is missing, so it will be highlighted:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class A {
    /**
     * @param someParam description
     **/
    void foo() {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Disable the &lt;b&gt;Report inaccessible symbols&lt;/b&gt; option to ignore the tags that reference missing method parameters,
  classes, fields and methods.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="HtmlTagCanBeJavadocTag" defaultSeverity="WARNING" displayName="'&lt;code&gt;…&lt;/code&gt;' can be replaced with '{@code …}'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags in Javadoc comments.
Since Java 5, these tags can be replaced with &lt;code&gt;{@code ...}&lt;/code&gt; constructs.
This allows using angle brackets &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; inside the comment instead of HTML character entities.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * @return empty &amp;lt;code&amp;gt;ArrayList&amp;amp;lt;Integer&amp;amp;gt;&amp;lt;/code&amp;gt;
   */
  List&amp;lt;Integer&amp;gt; getList(){ ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * @return empty {@code ArrayList&amp;lt;Integer&amp;gt;}
   */
  List&amp;lt;Integer&amp;gt; getList(){ ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryJavaDocLink" defaultSeverity="WARNING" displayName="Unnecessary Javadoc link" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Javadoc &lt;code&gt;@see&lt;/code&gt;,
&lt;code&gt;{@link}&lt;/code&gt;, and &lt;code&gt;{@linkplain}&lt;/code&gt;
tags that refer to the method owning the comment, the super method of the
method owning the comment, or the class containing the comment.
&lt;p&gt;Such links are unnecessary and can be safely removed with this inspection's quick-fix. The
  quick-fix will remove the entire Javadoc comment if the tag is its only content.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example {
    /**
     * @see Example#method
     */
    public void method() { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Example {
  public void method() { }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to ignore inline links (&lt;code&gt;{@link}&lt;/code&gt; and &lt;code&gt;{@linkplain}&lt;/code&gt;)
to super methods. Although a link to all super methods is automatically added by the
Javadoc tool, an inline link to the super method may sometimes be needed in texts of the Javadoc comments.

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="EditorConfig" path=""><inspection shortName="EditorConfigNumerousWildcards" defaultSeverity="WEAK WARNING" displayName="Too many wildcards" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigShadowingOption" defaultSeverity="WARNING" displayName="Overriding property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that override the same properties defined earlier in the file.
&lt;p&gt;For example:
&lt;pre&gt;&lt;code&gt;
[*.java]
indent_size=4
[{*.java,*.js}]
indent_size=2
&lt;/code&gt;&lt;/pre&gt;
The second section includes the same files as &lt;code&gt;[*.java]&lt;/code&gt; but also sets indent_size to value 2.
Thus the first declaration &lt;code&gt;indent_size=4&lt;/code&gt;will be ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPatternEnumerationRedundancy" defaultSeverity="ERROR" displayName="Unnecessary braces" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports pattern lists that are either empty &lt;code&gt;{}&lt;/code&gt; or contain just one pattern, for example &lt;code&gt;{foo}&lt;/code&gt; in contrast to
a list containing multiple patterns, for example &lt;code&gt;{foo,bar}&lt;/code&gt;. In this case braces are handled as a part of the name. For example,
the pattern &lt;code&gt;*.{a}&lt;/code&gt; will match the file &lt;code&gt;my.{a}&lt;/code&gt; but not &lt;code&gt;my.a&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigShadowedOption" defaultSeverity="WARNING" displayName="Overridden property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are already defined in other sections.
&lt;p&gt;For example:
&lt;pre&gt;&lt;code&gt;
[*.java]
indent_size=4
[{*.java,*.js}]
indent_size=2
&lt;/code&gt;&lt;/pre&gt;
The second section includes all &lt;code&gt;*.java&lt;/code&gt; files too but it  also redefines indent_size.
As a result the value 2 will be used for files matching &lt;code&gt;*.java&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEmptySection" defaultSeverity="WARNING" displayName="Empty section" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that do not contain any EditorConfig properties.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigValueUniqueness" defaultSeverity="ERROR" displayName="Non-unique list value" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports duplicates in lists of values.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigHeaderUniqueness" defaultSeverity="WARNING" displayName="EditorConfig section is not unique" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that define the same file pattern as other sections.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigCharClassLetterRedundancy" defaultSeverity="WARNING" displayName="Duplicate character class letter" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example &lt;code&gt;[aa]&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPatternRedundancy" defaultSeverity="WARNING" displayName="Duplicate or redundant pattern" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one.
For example, in &lt;code&gt;[{*.java,*}]&lt;/code&gt; the first &lt;code&gt;*.java&lt;/code&gt; pattern defines a narrower scope compared to &lt;code&gt;*&lt;/code&gt;.
That is why it is redundant and can be removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigVerifyByCore" defaultSeverity="ERROR" displayName="Invalid .editorconfig file" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Verifies the whole file using the backing EditorConfig core library and reports any failures.
Any such failure would prevent EditorConfig properties from being correctly applied.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigKeyCorrectness" defaultSeverity="WARNING" displayName="Unknown property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigUnusedDeclaration" defaultSeverity="WARNING" displayName="Unused declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unused declarations. Such declarations can be removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigUnexpectedComma" defaultSeverity="ERROR" displayName="Unexpected comma" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPairAcceptability" defaultSeverity="ERROR" displayName="Unexpected key-value pair" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports key-value pairs that are not allowed in the current context.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigReferenceCorrectness" defaultSeverity="ERROR" displayName="Invalid reference" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports identifiers that are either unknown or have a wrong type.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPartialOverride" defaultSeverity="WEAK WARNING" displayName="Overlapping sections" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example:
&lt;code&gt;[{foo,bar}]&lt;/code&gt; and &lt;code&gt;[{foo,bas}]&lt;/code&gt; both contain “foo”.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigWildcardRedundancy" defaultSeverity="WARNING" displayName="Redundant wildcard" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcards that become redundant when the “**” wildcard is used in the same section.
&lt;p&gt;
The “**” wildcard defines a broader set of files than any other wildcard.
That is why, any other wildcard used in the same section has no affect and can be removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigCharClassRedundancy" defaultSeverity="WARNING" displayName="Unnecessary character class" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports character classes that consist of a single character.
Such classes can be simplified to a character, for example &lt;code&gt;[a]&lt;/code&gt;&amp;rarr;&lt;code&gt;a&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigRootDeclarationUniqueness" defaultSeverity="ERROR" displayName="Extra top-level declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file.
Using multiple top-level declarations is not allowed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigRootDeclarationCorrectness" defaultSeverity="ERROR" displayName="Unexpected top-level declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigListAcceptability" defaultSeverity="ERROR" displayName="Unexpected value list" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigNoMatchingFiles" defaultSeverity="WARNING" displayName="No matching files" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections with wildcard patterns that do not match any files under the directory in
which the &lt;code&gt;.editorconfig&lt;/code&gt; file is located.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigDeprecatedDescriptor" defaultSeverity="WARNING" displayName="Deprecated property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports EditorConfig properties that are no longer supported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigMissingRequiredDeclaration" defaultSeverity="ERROR" displayName="Required declarations are missing" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that miss the required declarations. Refer to the documentation for more information.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigOptionRedundancy" defaultSeverity="WARNING" displayName="Redundant property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are redundant when another applicable section already contains the same property and value.
&lt;p&gt;
For example:
&lt;pre&gt;&lt;code&gt;
[*]
indent_size=4
[*.java]
indent_size=4
&lt;/code&gt;&lt;/pre&gt;
are both applicable to &lt;code&gt;*.java&lt;/code&gt; files and define the same &lt;code&gt;indent_size&lt;/code&gt; value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigValueCorrectness" defaultSeverity="ERROR" displayName="Invalid property value" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”,
others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEncoding" defaultSeverity="WARNING" displayName="File encoding doesn't match EditorConfig charset" enabled="true" language="" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that current file encoding matches the encoding defined in "charset" property of .editorconfig file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigSpaceInHeader" defaultSeverity="WEAK WARNING" displayName="Space in file pattern" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports space characters in wildcard patterns that affect pattern matching.
If these characters are not intentional, they should be removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEmptyHeader" defaultSeverity="ERROR" displayName="Empty header" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by &lt;code&gt;gitignore&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Serialization issues" path="Java"><inspection shortName="MissingSerialAnnotation" defaultSeverity="WARNING" displayName="'@Serial' annotation can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods and fields in the &lt;code&gt;Serializable&lt;/code&gt; and &lt;code&gt;Externalizable&lt;/code&gt;
classes that are suitable to be annotated with the &lt;code&gt;java.io.Serial&lt;/code&gt; annotation. The quick-fix adds the annotation.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Main implements Serializable {
  private static final long serialVersionUID = 7874493593505141603L;

  private void writeObject(ObjectOutputStream out) throws IOException {
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main implements Serializable {
    @Serial
    private static final long serialVersionUID = 7874493593505141603L;

    @Serial
    private void writeObject(ObjectOutputStream out) throws IOException {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main implements Externalizable {
    protected Object readResolve() throws ObjectStreamException {
      return "SomeObject";
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main implements Externalizable {
    @Serial
    protected Object readResolve() throws ObjectStreamException {
        return "SomeObject";
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information about all possible cases, refer to the Javadoc of the &lt;code&gt;java.io.Serial&lt;/code&gt; class.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;@Serial annotation&amp;#39;, which is available since Java 14.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerializableHasSerializationMethods" defaultSeverity="WARNING" displayName="Serializable class without 'readObject()' and 'writeObject()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Serializable&lt;/code&gt; classes
that do not implement &lt;code&gt;readObject()&lt;/code&gt; and &lt;code&gt;writeObject()&lt;/code&gt; methods.
&lt;p&gt;
  If &lt;code&gt;readObject()&lt;/code&gt; and &lt;code&gt;writeObject()&lt;/code&gt; methods are not implemented,
  the default serialization algorithms are used,
  which may be sub-optimal for performance and compatibility in many environments.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
    &lt;code&gt;Serializable&lt;/code&gt; from a superclass but are not intended for serialization.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore &lt;code&gt;Serializable&lt;/code&gt; classes without non-static fields.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore &lt;code&gt;Serializable&lt;/code&gt; anonymous classes.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonSerializableObjectPassedToObjectStream" defaultSeverity="WARNING" displayName="Non-serializable object passed to 'ObjectOutputStream'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;Serializable&lt;/code&gt; objects used as arguments to
&lt;code&gt;java.io.ObjectOutputStream.write()&lt;/code&gt;. Such calls will result in runtime exceptions.
&lt;p&gt;
  This inspection assumes objects of the types &lt;code&gt;java.util.Collection&lt;/code&gt; and
  &lt;code&gt;java.util.Map&lt;/code&gt; to be &lt;code&gt;Serializable&lt;/code&gt;, unless the types
  they are declared in are non-&lt;code&gt;Serializable&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class IWantToSerializeThis {
    public static void main(String[] args) throws IOException {
      try(var stream = new ObjectOutputStream(Files.newOutputStream(Paths.get("output")))) {
        // Warning -- will fail with NotSerializableException
        stream.writeObject(new IWantToSerializeThis());
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerializableStoresNonSerializable" defaultSeverity="WARNING" displayName="'Serializable' object implicitly stores non-'Serializable' object" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any references to local non-&lt;code&gt;Serializable&lt;/code&gt; variables
outside &lt;code&gt;Serializable&lt;/code&gt; lambdas, local and anonymous classes.
&lt;p&gt;
  When a local variable is referenced from an anonymous class, its value
  is stored in an implicit field of that class. The same happens
  for local classes and lambdas. If the variable is of a
  non-&lt;code&gt;Serializable&lt;/code&gt; type, serialization will fail.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  interface A extends Serializable {
      abstract void foo();
  }
  class B {}
  class C {
      void foo() {
          B b = new B();
          A a = new A() {
              @Override
              public void foo() {
                  System.out.println(b); // warning
              }
          };
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerialVersionUIDNotStaticFinal" defaultSeverity="WARNING" displayName="'serialVersionUID' field not declared 'private static final long'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Serializable&lt;/code&gt; classes whose &lt;code&gt;serialVersionUID&lt;/code&gt; field
is not declared &lt;code&gt;private static final long&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class SampleClass implements Serializable {
    private long serialVersionUID = 1; // field of a Serializable class is not declared 'private static final long'

    public SampleClass() {
        System.out.println(serialVersionUID);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerializableWithUnconstructableAncestor" defaultSeverity="WARNING" displayName="Serializable class with unconstructable ancestor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Serializable&lt;/code&gt; classes whose closest non-serializable ancestor doesn't have
a no-argument constructor. Such classes cannot be deserialized and will fail with an &lt;code&gt;InvalidClassException&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Ancestor {
    private String name;
    Ancestor(String name) {
      this.name = name;
    }
  }

  // warning on this class because the superclass is not
  // serializable, and its constructor takes arguments
  class Descendant extends Ancestor implements Serializable {
    Descendant() {
      super("Bob");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExternalizableWithSerializationMethods" defaultSeverity="WARNING" displayName="Externalizable class with 'readObject()' or 'writeObject()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Externalizable&lt;/code&gt; classes that define &lt;code&gt;readObject()&lt;/code&gt;
or &lt;code&gt;writeObject()&lt;/code&gt; methods. These methods are not called for serialization of
&lt;code&gt;Externalizable&lt;/code&gt; objects.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class Crucial implements Externalizable {
    int value;
    private void readObject(ObjectInputStream in) {
      value = in.readInt();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReadObjectAndWriteObjectPrivate" defaultSeverity="WARNING" displayName="'readObject()' or 'writeObject()' not declared 'private'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Serializable&lt;/code&gt; classes where the &lt;code&gt;readObject&lt;/code&gt;
or &lt;code&gt;writeObject&lt;/code&gt; methods are not declared private.
There is no reason these methods should ever have a higher visibility than &lt;code&gt;private&lt;/code&gt;.
&lt;p&gt;
  A quick-fix is suggested to make the corresponding method &lt;code&gt;private&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Test implements Serializable {
    public void readObject(ObjectInputStream stream) {
      /* ... */
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Test implements Serializable {
    private void readObject(ObjectInputStream stream) {
      /* ... */
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerializableInnerClassHasSerialVersionUIDField" defaultSeverity="WARNING" displayName="Serializable non-static inner class without 'serialVersionUID'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-static inner classes that implement &lt;code&gt;java.io.Serializable&lt;/code&gt;, but do not define a &lt;code&gt;serialVersionUID&lt;/code&gt; field.
&lt;p&gt;
  Without a &lt;code&gt;serialVersionUID&lt;/code&gt; field, any change to the class will make previously
  serialized versions unreadable. It is strongly recommended that &lt;code&gt;Serializable&lt;/code&gt;
  non-static inner classes have a &lt;code&gt;serialVersionUID&lt;/code&gt; field, otherwise the default
  serialization algorithm may result in serialized versions being incompatible between
  compilers due to differences in synthetic accessor methods.
&lt;/p&gt;
&lt;p&gt;
  A quick-fix is suggested to add the missing &lt;code&gt;serialVersionUID&lt;/code&gt; field.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Outer {
      class Inner implements Serializable {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Outer {
      class Inner implements Serializable {
          private static final long serialVersionUID = -7004458730436243902L;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the following options to configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
    &lt;code&gt;Serializable&lt;/code&gt; from a superclass but are not intended for serialization.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore &lt;code&gt;Serializable&lt;/code&gt; anonymous classes.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonSerializableFieldInSerializableClass" defaultSeverity="WARNING" displayName="Non-serializable field in a 'Serializable' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-serializable fields in classes that implement &lt;code&gt;java.io.Serializable&lt;/code&gt;. Such fields will result
in runtime exceptions if the object is serialized.
&lt;p&gt;
  Fields declared
  &lt;code&gt;transient&lt;/code&gt; or &lt;code&gt;static&lt;/code&gt;
  are not reported, nor are fields of classes that have a &lt;code&gt;writeObject&lt;/code&gt; method defined.
&lt;/p&gt;
&lt;p&gt;
  This inspection assumes fields of the types
  &lt;code&gt;java.util.Collection&lt;/code&gt; and
  &lt;code&gt;java.util.Map&lt;/code&gt; to be
  &lt;code&gt;Serializable&lt;/code&gt;, unless the types
  they are declared in are non-&lt;code&gt;Serializable&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class NonSerializableClass {}

  public class SerializableClass implements Serializable {
      NonSerializableClass clazz; // warning: Non-serializable field 'clazz' in a Serializable class
      static NonSerializableClass staticClazz; // no warnings
  }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
    &lt;code&gt;Serializable&lt;/code&gt; from a superclass but are not intended for serialization.
  &lt;/li&gt;
  &lt;li&gt;
    List annotations that will make the inspection ignore the annotated fields.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore fields initialized with an anonymous class.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReadResolveAndWriteReplaceProtected" defaultSeverity="WARNING" displayName="'readResolve()' or 'writeReplace()' not declared 'protected'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that implement &lt;code&gt;java.io.Serializable&lt;/code&gt; where the &lt;code&gt;readResolve()&lt;/code&gt;
or &lt;code&gt;writeReplace()&lt;/code&gt; methods are not declared &lt;code&gt;protected&lt;/code&gt;.
&lt;p&gt;
  Declaring &lt;code&gt;readResolve()&lt;/code&gt; and &lt;code&gt;writeReplace()&lt;/code&gt; methods &lt;code&gt;private&lt;/code&gt;
  can force subclasses to silently ignore them, while declaring them
  &lt;code&gt;public&lt;/code&gt; allows them to be invoked by untrusted code.
&lt;/p&gt;
&lt;p&gt;
  If the containing class is declared &lt;code&gt;final&lt;/code&gt;, these methods can be declared &lt;code&gt;private&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class ClassWithSerialization implements Serializable {
    public Object writeReplace() { // warning: 'writeReplace()' not declared protected
        ...
    }
  }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExternalizableWithoutPublicNoArgConstructor" defaultSeverity="WARNING" displayName="'Externalizable' class without 'public' no-arg constructor" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Externalizable&lt;/code&gt; classes without a public no-argument constructor.
&lt;p&gt;When an &lt;code&gt;Externalizable&lt;/code&gt; object is reconstructed, an instance is created using the public
  no-arg constructor before the &lt;code&gt;readExternal&lt;/code&gt; method called. If a public
  no-arg constructor is not available, a &lt;code&gt;java.io.InvalidClassException&lt;/code&gt; will be
  thrown at runtime.
  &lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonSerializableObjectBoundToHttpSession" defaultSeverity="WARNING" displayName="Non-serializable object bound to 'HttpSession'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports objects of classes not implementing &lt;code&gt;java.io.Serializable&lt;/code&gt; used as arguments to
&lt;code&gt;javax.servlet.http.HttpSession.setAttribute()&lt;/code&gt; or
&lt;code&gt;javax.servlet.http.HttpSession.putValue()&lt;/code&gt;.
&lt;p&gt;
  Such objects will not be serialized if the &lt;code&gt;HttpSession&lt;/code&gt; is passivated or migrated,
  and may result in difficult-to-diagnose bugs.
&lt;/p&gt;
&lt;p&gt;
  This inspection assumes objects of the types &lt;code&gt;java.util.Collection&lt;/code&gt; and
  &lt;code&gt;java.util.Map&lt;/code&gt; to be &lt;code&gt;Serializable&lt;/code&gt;,
  unless type parameters are non-&lt;code&gt;Serializable&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(HttpSession session) {
      session.setAttribute("foo", new NonSerializable());
  }
  static class NonSerializable {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonSerializableWithSerialVersionUIDField" defaultSeverity="WARNING" displayName="Non-serializable class with 'serialVersionUID'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;Serializable&lt;/code&gt; classes that define a &lt;code&gt;serialVersionUID&lt;/code&gt;
field. A &lt;code&gt;serialVersionUID&lt;/code&gt; field in that context normally indicates an error
because the field will be ignored and the class will not be serialized.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class IWantToSerializeThis {
    private static final long serialVersionUID = 2669293150219020249L;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComparatorNotSerializable" defaultSeverity="WARNING" displayName="'Comparator' class not declared 'Serializable'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that implement &lt;code&gt;java.lang.Comparator&lt;/code&gt;,
but do not implement &lt;code&gt;java.io.Serializable&lt;/code&gt;.
&lt;p&gt;
  If a non-serializable comparator is used to construct an ordered collection such
  as a &lt;code&gt;java.util.TreeMap&lt;/code&gt; or &lt;code&gt;java.util.TreeSet&lt;/code&gt;, then the
  collection will also be non-serializable. This can result in unexpected and
  difficult-to-diagnose bugs.
&lt;/p&gt;
&lt;p&gt;
  Since subclasses of &lt;code&gt;java.lang.Comparator&lt;/code&gt; are often stateless,
  simply marking them serializable is a small cost to avoid such issues.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo implements Comparator { // warning
      @Override
      public int compare(Object o1, Object o2) {
          /* ... */
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo implements Comparator, Serializable { // no warning here
      @Override
      public int compare(Object o1, Object o2) {
          /* ... */
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerializableRecordContainsIgnoredMembers" defaultSeverity="WARNING" displayName="'record' contains ignored members" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports serialization methods or fields defined in a &lt;code&gt;record&lt;/code&gt; class.
Serialization methods include &lt;code&gt;writeObject()&lt;/code&gt;, &lt;code&gt;readObject()&lt;/code&gt;, &lt;code&gt;readObjectNoData()&lt;/code&gt;, &lt;code&gt;writeExternal()&lt;/code&gt;, and
  &lt;code&gt;readExternal()&lt;/code&gt; and the field &lt;code&gt;serialPersistentFields&lt;/code&gt;.
  These members are not used for the serialization or deserialization of records and therefore unnecessary.
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  record R1() implements Serializable {
    // The field is ignored during record serialization
    @Serial
    private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];

    // The method is ignored during record serialization
    @Serial
    private void writeObject(ObjectOutputStream out) throws IOException {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
  record R2() implements Externalizable {
    // The method is ignored during record serialization
    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
    }

    // The method is ignored during record serialization
    @Override
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Records&amp;#39;, which is available since Java 16.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReadObjectInitialization" defaultSeverity="WARNING" displayName="Instance field may not be initialized by 'readObject()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields that are not guaranteed to be initialized after the object is
deserialized by the &lt;code&gt;readObject()&lt;/code&gt; method.
&lt;p&gt;The inspection doesn't report transient fields.&lt;/p&gt;
&lt;p&gt;
  Note: This inspection uses a very conservative control flow algorithm, and may incorrectly report fields
  as uninitialized.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class DataObject implements Serializable {
  String s; // s is not initialized in readObject
  int i;

  private void readObject(ObjectInputStream stream) throws IOException {
    i = stream.readInt();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TransientFieldNotInitialized" defaultSeverity="WARNING" displayName="Transient field is not initialized on deserialization" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;transient&lt;/code&gt; fields that
are initialized during normal object construction, but whose class does not have a
&lt;code&gt;readObject&lt;/code&gt; method.
&lt;p&gt;
  As &lt;code&gt;transient&lt;/code&gt; fields are not serialized they need
  to be initialized separately in a &lt;code&gt;readObject()&lt;/code&gt; method
  during deserialization.
&lt;/p&gt;
&lt;p&gt;
  Any &lt;code&gt;transient&lt;/code&gt; fields that
  are not initialized during normal object construction are considered to use the default
  initialization and are not reported by this inspection.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Person implements Serializable {
    transient String name = "Default"; //warning, can actually be a null after deserialization
    transient String surname; //null is considered the default value and not reported
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TransientFieldInNonSerializableClass" defaultSeverity="WARNING" displayName="Transient field in non-serializable class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;transient&lt;/code&gt; fields in classes that do not implement &lt;code&gt;java.io.Serializable&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class NonSerializableClass {
    private transient String password;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class NonSerializableClass {
    private String password;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerializableInnerClassWithNonSerializableOuterClass" defaultSeverity="WARNING" displayName="Serializable non-'static' inner class with non-Serializable outer class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-static inner classes that implement &lt;code&gt;Serializable&lt;/code&gt;
and are declared inside a class that doesn't implement &lt;code&gt;Serializable&lt;/code&gt;.
&lt;p&gt;
  Such classes are unlikely to serialize correctly due to implicit references to the outer class.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A {
    class Main implements Serializable {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the following options to configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
    &lt;code&gt;Serializable&lt;/code&gt; from a superclass but are not intended for serialization.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore &lt;code&gt;Serializable&lt;/code&gt; anonymous classes.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonSerializableWithSerializationMethods" defaultSeverity="WARNING" displayName="Non-serializable class with 'readObject()' or 'writeObject()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;Serializable&lt;/code&gt; classes that define &lt;code&gt;readObject()&lt;/code&gt;
or &lt;code&gt;writeObject()&lt;/code&gt; methods. Such methods in that context normally indicate an error.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class SampleClass {
    private void readObject(ObjectInputStream str) {}
    private void writeObject(ObjectOutputStream str) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerialAnnotationUsedOnWrongMember" defaultSeverity="WARNING" displayName="'@Serial' annotation used on wrong member" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods and fields in the &lt;code&gt;Serializable&lt;/code&gt; and &lt;code&gt;Externalizable&lt;/code&gt;
classes that are not suitable to be annotated with the &lt;code&gt;java.io.Serial&lt;/code&gt; annotation.
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Test implements Serializable {
  @Serial // The annotated field is not a part of serialization mechanism because it's not final
  private static long serialVersionUID = 7874493593505141603L;

  @Serial // The annotated method is not a part of the serialization mechanism because it's not private
  void writeObject(ObjectOutputStream out) throws IOException {
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
class Test implements Externalizable {
  @Serial // The annotated method is not a part of the serialization mechanism as it's inside Externalizable class
  private void writeObject(ObjectOutputStream out) throws IOException {
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For information about all valid cases, refer to the Javadoc of the &lt;code&gt;java.io.Serial&lt;/code&gt; class.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;@Serial annotation&amp;#39;, which is available since Java 14.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerialPersistentFieldsWithWrongSignature" defaultSeverity="WARNING" displayName="'serialPersistentFields' field not declared 'private static final ObjectStreamField[]'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Serializable&lt;/code&gt; classes whose &lt;code&gt;serialPersistentFields&lt;/code&gt; field
is not declared as &lt;code&gt;private static final ObjectStreamField[]&lt;/code&gt;.
&lt;p&gt;
  If a &lt;code&gt;serialPersistentFields&lt;/code&gt; field is not declared with those modifiers,
  the serialization behavior will be as if the field was not declared at all.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class List implements Serializable {
    private List next;

    ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("next", List.class)};

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Pattern validation" path=""><inspection shortName="PatternOverriddenByNonAnnotatedMethod" defaultSeverity="WARNING" displayName="Non-annotated Method overrides @Pattern Method" enabled="true" language="JAVA" pluginId="org.intellij.intelliLang" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports when a method without any &lt;code&gt;@Pattern&lt;/code&gt; annotation overrides a &lt;code&gt;@Pattern&lt;/code&gt; annotated method.
This does not prevent error-highlighting inside the editor, however the overriding method will not be checked at runtime.
&lt;p&gt;
A quick fix is provided to add a &lt;code&gt;@Pattern&lt;/code&gt; annotation that matches the one from the superclass method. This ensures the
runtime-check instrumentation works correctly.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class Parent {
    abstract @Pattern("\\d\\d-\\d\\d\\d") String getId();
  }
  class Child extends Parent {
    @Override String getId() { // warning here
      return "12-345";
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PatternValidation" defaultSeverity="WARNING" displayName="Validate annotated patterns" enabled="true" language="JAVA" pluginId="org.intellij.intelliLang" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions passed as arguments for &lt;code&gt;@Pattern&lt;/code&gt; parameters and
returned from &lt;code&gt;@Pattern&lt;/code&gt;-annotated methods that do not match the specified pattern.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Pattern("\\d\\d-\\d\\d\\d") String getId() {
    &lt;b&gt;return&lt;/b&gt; "1";
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Use the &lt;b&gt;Flag non compile-time constant expressions&lt;/b&gt; option to let the inspection report expressions with
  an unknown value and offer to add a substitution (&lt;code&gt;@Subst&lt;/code&gt;) annotation.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PatternNotApplicable" defaultSeverity="ERROR" displayName="Pattern annotation is not applicable" enabled="true" language="JAVA" pluginId="org.intellij.intelliLang" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports when a &lt;code&gt;@Pattern&lt;/code&gt; annotation is applied to an element with a type other than &lt;code&gt;String&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Pattern("\\d\\d") &lt;b&gt;int&lt;/b&gt; i;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Code metrics" path=""><inspection shortName="JvmLinesOfCodeInspection" defaultSeverity="WARNING" displayName="Calculate Kotlin and Java code metrics" enabled="false" language="UAST" pluginId="org.intellij.qodana" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Counts the number of code lines.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Nullability problems" path="Java/Probable bugs"><inspection shortName="NotNullFieldNotInitialized" defaultSeverity="WARNING" displayName="@NotNull field is not initialized" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields annotated as not-null that are not initialized in the constructor.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class MyClass {
  private @NotNull String value;

  public void setValue(@NotNull String value) {
    this.value = value;
  }

  public @NotNull String getValue() {
    return value;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Such fields may violate the not-null constraint. In the example above, the &lt;code&gt;setValue&lt;/code&gt; parameter is annotated as not-null, but
  &lt;code&gt;getValue&lt;/code&gt; may return null if the setter was not called.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NullableProblems" defaultSeverity="WARNING" displayName="@NotNull/@Nullable problems" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports problems related to nullability annotations.
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Overriding methods are not annotated:
    &lt;pre&gt;&lt;code&gt;
abstract class A {
  @NotNull abstract String m();
}
class B extends A {
    String m() { return "empty string"; }
}
    &lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Annotated primitive types: &lt;code&gt;@NotNull int myFoo;&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt;Both &lt;code&gt;@Nullable&lt;/code&gt; and &lt;code&gt;@NotNull&lt;/code&gt; are present on the same member: &lt;code&gt;@Nullable @NotNull String myFooString;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Collection of nullable elements is assigned into a collection of non-null elements:
    &lt;pre&gt;&lt;code&gt;
void testList(List&amp;lt;@Nullable String&gt; nullableList) {
   List&amp;lt;@NotNull String&gt; list2 = nullableList;
}
    &lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Configure Annotations&lt;/b&gt; button to specify nullability annotations and the checkboxes to fine-tune where the inspection should provide warnings.&lt;/p&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher, 
  and nullability annotations are available on the classpath.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReturnNull" defaultSeverity="WARNING" displayName="Return of 'null'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;return&lt;/code&gt; statements with &lt;code&gt;null&lt;/code&gt; return values.
While occasionally useful, this construct may make the code more prone
to failing with a &lt;code&gt;NullPointerException&lt;/code&gt;.
&lt;p&gt;
  If a method is designed to return &lt;code&gt;null&lt;/code&gt;, it is suggested to mark it with the
  &lt;code&gt;@Nullable&lt;/code&gt; annotation - such methods will be ignored by this inspection.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Person {
    public String getName () {
      return null;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Person {
    public @Nullable String getName () {
      return null;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  If the return type is &lt;code&gt;java.util.Optional&lt;/code&gt;, an additional quick-fix to convert
  &lt;code&gt;null&lt;/code&gt; to &lt;code&gt;Optional.empty()&lt;/code&gt; is suggested.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Whether to ignore &lt;code&gt;private&lt;/code&gt; methods.
    This will also ignore return of &lt;code&gt;null&lt;/code&gt; from anonymous classes and lambdas.
  &lt;/li&gt;
  &lt;li&gt;
    Whether &lt;code&gt;null&lt;/code&gt; values on array returns, collection
    object returns, plain object returns, or a combination of the three should be reported.
    Return of &lt;code&gt;null&lt;/code&gt; in methods with return type &lt;code&gt;java.util.Optional&lt;/code&gt; are always reported.
  &lt;/li&gt;
  &lt;li&gt;
    Click &lt;b&gt;Configure annotations&lt;/b&gt; to specify which annotations should be considered 'nullable'.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Simplifications: forall and exists" path="Scala/Collections"><inspection shortName="ExistsForallReplace" defaultSeverity="WARNING" displayName="Double negation in forall and exists" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports double negation in &lt;code&gt;exists&lt;/code&gt; or &lt;code&gt;forall&lt;/code&gt; calls.&lt;/p&gt;

&lt;p&gt;The quick-fix removes the double negation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def condition(x: Int): Boolean = ???
  !Seq(1, 2).exists(x =&gt; !condition(x))
  !Seq(1, 2).forall(x =&gt; !condition(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def condition(x: Int): Boolean = ???
  Seq(1, 2).forall(x =&gt; condition(x))
  Seq(1, 2).exists(x =&gt; condition(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Internationalization" path="Java"><inspection shortName="HardCodedStringLiteral" defaultSeverity="WARNING" displayName="Hardcoded strings" enabled="false" language="UAST" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any instances of hardcoded &lt;code&gt;String&lt;/code&gt; literals.
&lt;p&gt;Hardcoded &lt;code&gt;String&lt;/code&gt; literals are probably errors in an
internationalized environment. This inspection won't report empty strings and strings consisting only of whitespaces. A quick-fix is available
to transform a string literal into a &lt;code&gt;java.util.ResourceBundle.getString()&lt;/code&gt; method call.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TimeToString" defaultSeverity="WARNING" displayName="Call to 'Time.toString()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;toString()&lt;/code&gt; calls on &lt;code&gt;java.sql.Time&lt;/code&gt; objects. Such calls are usually incorrect in an internationalized
environment.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimpleDateFormatWithoutLocale" defaultSeverity="WARNING" displayName="'SimpleDateFormat' without locale" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiations of &lt;code&gt;java.util.SimpleDateFormat&lt;/code&gt; or &lt;code&gt;java.time.format.DateTimeFormatter&lt;/code&gt;
that do not specify a &lt;code&gt;java.util.Locale&lt;/code&gt;.
These calls will use the platform default locale, which depends on the OS settings.
This can lead to surprising behaviour when the code is run on a different platform or the OS settings are changed.
&lt;p&gt;&lt;code&gt;Example:&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new SimpleDateFormat("yyyy");
  DateTimeFormatter.ofPattern("d/M/y");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateStringLiteralInspection" defaultSeverity="WARNING" displayName="Duplicate string literal" enabled="false" language="JAVA" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string literals that are replicated unchanged throughout the project.
Two quick-fixes are provided. One to introduce a constant for a duplicated string and use it throughout the project,
and one to show the location of all the duplicates of a particular string literal.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C1 { String CONST1 = "duplicate string"; }
  class C2 { String CONST2 = "duplicate string"; }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Min string length&lt;/b&gt; field to set the minimal string length required to detect duplicates.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore @PropertyKey expressions&lt;/b&gt; option to ignore strings passed as arguments to methods annotated with
    &lt;code&gt;org.jetbrains.annotations.PropertyKey&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConvertToBasicLatin" defaultSeverity="INFORMATION" displayName="Non-Basic Latin character" enabled="true" language="JAVA" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-Basic Latin characters in literals and suggests replacing them with unicode entities.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // © 2021
  char c = '©';
  String s = "Áî";
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // &amp;amp;copy; 2021
  char c = '\u00a9';
  String s = "\u00c1\u00ee";
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ImplicitDefaultCharsetUsage" defaultSeverity="WARNING" displayName="Implicit platform default charset" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method and constructor calls that implicitly use the platform default charset. Such calls can produce different results on
systems that use a different default charset and may result in unexpected behaviour.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void foo(byte[] bytes) {
  String s = new String(bytes);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can use a quick-fix that specifies the explicit UTF-8 charset if the corresponding overloaded method is available.
  After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void foo(byte[] bytes) {
  String s = new String(bytes, StandardCharsets.UTF_8);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CharacterComparison" defaultSeverity="WARNING" displayName="Character comparison" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ordinal comparisons of &lt;code&gt;char&lt;/code&gt; values. In an internationalized environment, such comparisons are rarely correct.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringConcatenation" defaultSeverity="WARNING" displayName="String concatenation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;String&lt;/code&gt; concatenations. Concatenation might be incorrect in an internationalized environment
and could be replaced by usages of &lt;code&gt;java.text.MessageFormat&lt;/code&gt; or similar classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String getMessage(String string, int number) {
    return string + number;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DialogTitleCapitalization" defaultSeverity="WARNING" displayName="Incorrect string capitalization" enabled="true" language="UAST" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;&lt;body&gt;
Reports strings in method parameters and return values annotated with &lt;code&gt;@Nls&lt;/code&gt; and having the capitalization parameter
to conform to capitalization rules existing in most platform UI guidelines.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  void setTitle(@NlsContexts.DialogTitle String title) {}
  setTitle("This is sentence capitalization but should be title"); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  setTitle("This Is Sentence Capitalization but Should Be Title"); 
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;</inspection><inspection shortName="NumericToString" defaultSeverity="WARNING" displayName="Call to 'Number.toString()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;toString()&lt;/code&gt; calls on objects of a class extending &lt;code&gt;Number&lt;/code&gt;.
Such calls are usually incorrect in an internationalized environment and some locale specific formatting should be used instead.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void print(Double d) {
    System.out.println(d.toString());
  }
&lt;/code&gt;&lt;/pre&gt;
A possible way to fix this problem could be:
&lt;pre&gt;&lt;code&gt;
  void print(Double d) {
    System.out.printf("%f%n", d);
  }
&lt;/code&gt;&lt;/pre&gt;
This formats the number using the default locale which is set during the startup of the JVM and is based on the host environment.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DateToString" defaultSeverity="WARNING" displayName="Call to 'Date.toString()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;toString()&lt;/code&gt; calls on &lt;code&gt;java.util.Date&lt;/code&gt; objects. Such calls are usually incorrect in an internationalized
environment.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringToUpperWithoutLocale" defaultSeverity="WARNING" displayName="Call to 'String.toUpperCase()' or 'toLowerCase()' without locale" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;toUpperCase()&lt;/code&gt; or &lt;code&gt;toLowerCase()&lt;/code&gt; calls on &lt;code&gt;String&lt;/code&gt; objects that do not specify a
&lt;code&gt;java.util.Locale&lt;/code&gt;. In these cases the default system locale is used, which can cause problems in an internationalized
environment.
&lt;p&gt;
  For example the code &lt;code&gt;"i".toUpperCase().equals("I")&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; in the Turkish and Azerbaijani locales, where
  the dotted and dotless 'i' are separate letters. Calling &lt;code&gt;toUpperCase()&lt;/code&gt; on an English string containing an 'i', when running
  in a Turkish locale, will return incorrect results. Alternatively, when dealing with strings that should be treated as locale-independent,
  like HTML tags, this can lead to errors.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringTokenizer" defaultSeverity="WARNING" displayName="Use of 'StringTokenizer'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of the &lt;code&gt;StringTokenizer&lt;/code&gt; class. Excessive use of &lt;code&gt;StringTokenizer&lt;/code&gt; is incorrect
in an internationalized environment.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbsoluteAlignmentInUserInterface" defaultSeverity="WARNING" displayName="Absolute alignment in AWT/Swing code" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of absolute alignment constants from AWT and Swing. Internationalized applications use relative alignment because it respects the locale component orientation settings.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  JPanel panel = new JPanel(new BorderLayout(2, 2));
  JLabel label = new JLabel("Hello World");
  panel.add(label, BorderLayout.NORTH);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  JPanel panel = new JPanel(new BorderLayout(2, 2));
  JLabel label = new JLabel("Hello World");
  panel.add(label, BorderLayout.PAGE_START);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MagicCharacter" defaultSeverity="WARNING" displayName="Magic character" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports character literals that are used without constant declaration. These characters might result in
bad code readability. Also, there might be errors if a character is changed only in one location
but not everywhere in code.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char c = 'c';&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallToSuspiciousStringMethod" defaultSeverity="WARNING" displayName="Call to suspicious 'String' method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls of:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;equalsIgnoreCase()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;compareTo()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;compareToIgnoreCase()&lt;/code&gt; and&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;trim()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  on &lt;code&gt;String&lt;/code&gt; objects.
  Comparison of internationalized strings should probably use a &lt;code&gt;java.text.Collator&lt;/code&gt; instead.
  &lt;code&gt;String.trim()&lt;/code&gt; only removes control characters between 0x00 and 0x20.
  The &lt;code&gt;String.strip()&lt;/code&gt; method introduced in Java 11 is more Unicode aware and can be used as a replacement.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryUnicodeEscape" defaultSeverity="WARNING" displayName="Unnecessary unicode escape sequence" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary unicode escape sequences. For example, when the file encoding can handle the character without escaping it.
Unicode control characters are not reported by this inspection (except for a line feed and a tab).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String s = "\u0062";&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="TOML" path=""><inspection shortName="TomlUnresolvedReference" defaultSeverity="WARNING" displayName="Unresolved reference" enabled="true" language="TOML" pluginId="org.toml.lang" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in TOML files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Version control" path=""><inspection shortName="IgnoreFileDuplicateEntry" defaultSeverity="WARNING" displayName="Ignore file duplicates" enabled="true" language="IgnoreLang" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore).
Duplicate entries in these files are redundant and can be removed.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    # Output directories
    /out/
    /target/
    /out/
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Validity issues" path="Gradle"><inspection shortName="IncorrectPluginDslStructure" defaultSeverity="ERROR" displayName="Plugin DSL structure" enabled="true" language="UAST" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Detects disallowed statements before 'plugins {}' block. &lt;/p&gt;
Due to the limitations of Gradle Plugin DSL, only a restricted set of Groovy statements is available before '&lt;code&gt;plugins {}&lt;/code&gt;' block. The only options are '&lt;code&gt;buildscript {}&lt;/code&gt;', '&lt;code&gt;pluginManagement {}&lt;/code&gt;' and other '&lt;code&gt;plugins {}&lt;/code&gt;'. &lt;br&gt;
  &lt;a href="https://docs.gradle.org/current/userguide/plugins.html#plugins_dsl_limitations"&gt;See Gradle documentation&lt;/a&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="groovy"&gt;
import foo.bar.Baz
plugins {} // reports 'plugins'
plugins {
  foo() // reports 'foo'
  id 'java'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedConfigurations" defaultSeverity="WARNING" displayName="Deprecated configurations" enabled="true" language="UAST" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Detects usage of configuration methods that were deprecated.&lt;/p&gt;

  Configuration methods may be deprecated because of two possible reasons:
  &lt;ul&gt;
  &lt;li&gt;The Gradle API has evolved, so old method choices should be avoided;&lt;/li&gt;
  &lt;li&gt;Some plugin provides a better version of the deprecated configuration method.&lt;/li&gt;
  &lt;/ul&gt;
  Most likely there will be an alternative for the deprecated method.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="groovy"&gt;
plugins {
  id 'java'
}

dependencies {
  archive 'org.gradle.api:gradle:1.0' // reports 'archive'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Directive" path="Scala"><inspection shortName="ScalaDirectiveDependencyVersionInspection" defaultSeverity="WEAK WARNING" displayName="Newer stable version for library dependency is available" enabled="true" language="ScalaDirective" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of outdated library dependency versions in Scala Directives and suggests replacing them with newer stable versions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  //&gt; using test.dep org.scalatest::scalatest:3.0.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  //&gt; using test.dep org.scalatest::scalatest:3.0.8
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="TestNG" path="Java"><inspection shortName="DataProviderReturnType" defaultSeverity="ERROR" displayName="Invalid data provider return type" enabled="true" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods marked with &lt;code&gt;@DataProvider&lt;/code&gt; annotation that doesn't return &lt;code&gt;Object[][]&lt;/code&gt; or &lt;code&gt;Iterator&amp;lt;Object&amp;gt;&lt;/code&gt;.
If another type is returned, TestNG throws an exception.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
public class TestNgTest {
  @DataProvider(name = "Languages")
  List&amp;lt;String&amp;gt; getData() {
    return List.of("Java", "Kotlin");
  }

  @Test(dataProvider = "Languages")
  public void testData(String language) {
    System.out.println(language);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicatedDataProviderNames" defaultSeverity="ERROR" displayName="Duplicated data provider names" enabled="true" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;TestNG&lt;/code&gt; data providers with equal names if &lt;code&gt;org.testng.TestNGException&lt;/code&gt; has occurred.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class DuplicatedDataProviders {
    @DataProvider
    public Object[][] intTestData() { // duplicate 1
      return new Integer[][]{
        new Integer[]{1, 1},
      };
    }

    @DataProvider(name = "intTestData")
    public Object[][] someTestData() { // duplicate 2
      return new Integer[][]{
        new Integer[]{1, 1},
      };
    }

    @Test(dataProvider = "intTestData")
    public void testIsOK(Integer key, Integer value) {
      assertEquals(key, value);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConvertOldAnnotations" defaultSeverity="WARNING" displayName="Old TestNG annotation @Configuration is used" enabled="false" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports TestNG &lt;code&gt;org.testng.annotations.Configuration&lt;/code&gt; annotations.
&lt;p&gt;It's better to configure a test suite with the modern &lt;code&gt;@BeforeXXX&lt;/code&gt;/&lt;code&gt;@AfterXXX&lt;/code&gt; annotations.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Test {
    @Configuration(beforeSuite = true, afterTest = true)
    public void afterBefore(){
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Test {
    @AfterTest()
    @BeforeSuite()
    public void afterBefore(){
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ConvertJavadoc" defaultSeverity="WARNING" displayName="TestNG Javadoc can be converted to annotations" enabled="false" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;&lt;body&gt;
Asserts your TestNG tests with Javadoc annotations and converts them to JDK annotations.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
    * @testng.before-test
  */
  public void sample() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @BeforeTest
  public void sample() {}
&lt;/code&gt;&lt;/pre&gt;
    &lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;&lt;/html&gt;</inspection><inspection shortName="groupsTestNG" defaultSeverity="WARNING" displayName="Undefined group name" enabled="true" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;&lt;body&gt;
Reports undefined group names passed to the &lt;code&gt;dependsOnGroups&lt;/code&gt; or &lt;code&gt;groups&lt;/code&gt; attributes in the &lt;code&gt;@Test&lt;/code&gt; annotation.
&lt;p&gt;The quick-fix adds an undefined name to a list of known groups.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Defined Groups&lt;/b&gt; field to define a comma-separated list of known groups.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</inspection><inspection shortName="UndeclaredTests" defaultSeverity="WARNING" displayName="Undeclared test" enabled="false" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports test classes that are not registered in &lt;code&gt;testing.xml&lt;/code&gt;. This is often a mistake because such tests won't be executed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="dependsOnMethodTestNG" defaultSeverity="WARNING" displayName="Illegal method name passed to 'dependsOnMethods'" enabled="true" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;&lt;body&gt;
Reports illegal method names passed to the &lt;code&gt;dependsOnMethods&lt;/code&gt; attribute in the &lt;code&gt;@Test&lt;/code&gt; annotation.
&lt;p&gt;A method name is considered illegal if it can't be resolved into a valid, accessible &lt;code&gt;@Test&lt;/code&gt; annotated method in the current class
  or any of its parent classes.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class SampleTest {
    @Test(dependsOnMethods = "testSpellignError")
    public void testSample() {}
    @Test
    public void testSpellingError(){}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="ExpectedExceptionNeverThrownTestNG" defaultSeverity="WARNING" displayName="Expected exception never thrown in test method body" enabled="false" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports checked exceptions expected by a TestNG test method that are never thrown inside the method body.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Test(expectedExceptions = Exception.class) // warning: Expected 'Exception' never thrown
  public void testEngineIsRunning() {
    assertTrue(engine.isRunning());
  }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MalformedDataProvider" defaultSeverity="WARNING" displayName="Data provider problems" enabled="true" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;&lt;body&gt;
Reports references to data provider methods that do not exist or are not accessible.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
public class InstanceDataProviderFromForeignClass {
  // method data() doesn't exist in class A
  @Test(dataProvider = "data", dataProviderClass = A.class)
  public void test() {
  }
}
class A { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
//the needed data() method is created in class A
class A {
  @DataProvider
  public Object[][] data() {
    return new Object[][]{};
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;&lt;/html&gt;</inspection><inspection shortName="JUnitTestNG" defaultSeverity="WARNING" displayName="JUnit Test can be converted to TestNG" enabled="false" language="JAVA" pluginId="TestNG-J" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any JUnit-based test class that can be converted into TestNG based unit test.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import org.junit.Test;
import static org.junit.Assert.*;

public class ExampleTest {
  @Test
  public void testExample(){
    assertEquals(2 + 2, 4);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import org.testng.Assert;
import org.testng.annotations.Test;

public class ExampleTest {
  @Test
  public void testExample(){
    Assert.assertEquals(4, 2 + 2);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Data flow" path="Groovy"><inspection shortName="GroovyVariableNotAssigned" defaultSeverity="WARNING" displayName="Variable not assigned" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports variables that might not have been initialized.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyUnusedAssignment" defaultSeverity="WARNING" displayName="Unused assignment" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the cases where a variable is redundant as its value is never used after its assignment.&lt;/p&gt;
&lt;p&gt;If the variable is unused, we recommend removing it to shorten the code and to avoid redundant allocations.&lt;/p&gt;
&lt;p&gt;The following cases are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the variable never gets read after assignment&lt;/li&gt;
  &lt;li&gt;the value is always overwritten with another assignment before the next variable read&lt;/li&gt;
  &lt;li&gt;the variable initializer is redundant (for one of the above two reasons)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt; For more info see the same inspection in Java.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyUnusedIncOrDec" defaultSeverity="WARNING" displayName="Unused incrementing or decrementing" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unused incrementing and decrementing expressions.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyMissingReturnStatement" defaultSeverity="WARNING" displayName="Missing return statement" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing &lt;code&gt;return&lt;/code&gt; statements at the end of methods with a non-&lt;b&gt;void&lt;/b&gt; return type.
The end of method should be reachable by the method's execution flow.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
String foo(int a) {
  if (a &gt; 0) {
    return "more than zero"
  }
} // foo(-1) will return 'null'

int bar(int a) {
  if (a &gt; 0) {
    return a
  }
} // bar(-1) will fall with runtime exception
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyVariableCanBeFinal" defaultSeverity="WARNING" displayName="Variable can be final" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports parameters or local variables that may have a final modifier added.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def list = [1,2,3]
  return list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:
&lt;pre&gt;&lt;code&gt;
  final def list = [1,2,3]
  return list
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;For more information, see the same inspection in Java.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Dependency issues" path="Java"><inspection shortName="ClassWithTooManyTransitiveDependents" defaultSeverity="WARNING" displayName="Class with too many transitive dependents" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports a class on which too many other classes are directly or indirectly dependent.
&lt;p&gt;Any modification to such a class may require changing many other classes, which may be expensive.&lt;/p&gt;
&lt;p&gt;Only top-level classes are reported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Maximum number of transitive dependents&lt;/b&gt; field to specify the maximum allowed number of direct or indirect dependents
  for a class.&lt;/p&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CyclicClassDependency" defaultSeverity="WARNING" displayName="Cyclic class dependency" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports classes that are mutually or cyclically dependent on other classes.
&lt;p&gt;Such cyclic dependencies make code fragile and hard to maintain.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassWithTooManyDependencies" defaultSeverity="WARNING" displayName="Class with too many dependencies" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports classes that are directly dependent on too many other classes in the project.
&lt;p&gt;Modifications to any dependency of such classes may require changing the class, thus making it prone to instability.&lt;/p&gt;
&lt;p&gt;Only top-level classes are reported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Maximum number of dependencies&lt;/b&gt; field to specify the maximum allowed number of dependencies for a class.&lt;/p&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassWithTooManyTransitiveDependencies" defaultSeverity="WARNING" displayName="Class with too many transitive dependencies" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports classes that are directly or indirectly dependent on too many other classes.
&lt;p&gt;Modifications to any dependency of such a class may require changing the class thus making it prone to instability.&lt;/p&gt;
&lt;p&gt;Only top-level classes are reported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Maximum number of transitive dependencies&lt;/b&gt; field to specify the maximum allowed number of direct or indirect dependencies
  for a class.&lt;/p&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassWithTooManyDependents" defaultSeverity="WARNING" displayName="Class with too many dependents" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports a class on which too many other classes are directly dependent.
&lt;p&gt;Any modification to such a class may require changing many other classes, which may be expensive.&lt;/p&gt;
&lt;p&gt;Only top-level classes are reported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the field below to specify the maximum allowed number of dependents for a class.&lt;/p&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CyclicPackageDependency" defaultSeverity="WARNING" displayName="Cyclic package dependency" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports packages that are mutually or cyclically dependent on other packages.
&lt;p&gt;Such cyclic dependencies make code fragile and hard to maintain.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Resource leaks" path="Scala"><inspection shortName="SourceNotClosed" defaultSeverity="WARNING" displayName="Source is not closed" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unclosed &lt;code&gt;scala.io.Source&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using a function like &lt;code&gt;.mkString&lt;/code&gt; or &lt;code&gt;.getLines&lt;/code&gt; directly on &lt;code&gt;Source&lt;/code&gt; opened by
    &lt;code&gt;fromFile&lt;/code&gt;, &lt;code&gt;fromURL&lt;/code&gt;, or &lt;code&gt;fromURI&lt;/code&gt; will leak the underlying file handle.&lt;/p&gt;

&lt;p&gt;Consider using &lt;code&gt;.close()&lt;/code&gt; with &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; to manage the resource's lifetime
    or use &lt;a href="https://scala-lang.org/files/archive/api/2.13.0/scala/util/Using$.html"&gt;Scala 2.13's &lt;code&gt;Using&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Source.fromFile("file.txt").getLines()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Threading issues" path="Groovy"><inspection shortName="GroovyNestedSynchronizedStatement" defaultSeverity="WARNING" displayName="Nested 'synchronized' statement" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;code&gt;synchronized&lt;/code&gt; statements.
&lt;p&gt;
  Nested &lt;code&gt;synchronized&lt;/code&gt; statements
  are either redundant (if the lock objects are identical) or prone to deadlock.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyEmptySyncBlock" defaultSeverity="WARNING" displayName="Empty 'synchronized' block" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;synchronized&lt;/code&gt; statements
with empty bodies. While theoretically this may be the semantics intended, this construction is
confusing, and often the result of a typo.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
synchronized(lock) {
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyDoubleCheckedLocking" defaultSeverity="WARNING" displayName="Double-checked locking" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;a href="https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html"&gt;double-checked locking&lt;/a&gt;.
&lt;p&gt;
  Double-checked locking tries to initialize a field on demand and in a thread-safe manner, while avoiding the cost of synchronization.
  Unfortunately it is not thread-safe when used on a field that is not declared &lt;code&gt;volatile&lt;/code&gt;.
  When using Java 1.4 or earlier, double-checked locking doesn't work even with a &lt;code&gt;volatile&lt;/code&gt; field.
  Read the article linked above for a detailed explanation of the problem.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
      private Helper helper = null

      Helper getHelper() {
          if (helper == null)
              synchronized(this) {
                  if (helper == null) {
                      helper = new Helper()
                  }
              }
          }
          return helper;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyWaitWhileNotSynchronized" defaultSeverity="WARNING" displayName="'wait()' while not synced" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports calls to &lt;code&gt;wait()&lt;/code&gt; not made inside a corresponding synchronized
  statement or synchronized method.&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;wait()&lt;/code&gt; on an object
without holding a lock on that object will result in an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; being thrown.
Such a construct is not necessarily an error, as the necessary lock may be acquired before
the containing method is called, but its worth looking at.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyWhileLoopSpinsOnField" defaultSeverity="WARNING" displayName="While loop spins on field" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;while&lt;/code&gt; loops, which spin on the
  value of a non-&lt;code&gt;volatile&lt;/code&gt; field, waiting for it to be changed by another thread.&lt;/p&gt;
&lt;p&gt;
In addition to being potentially extremely CPU intensive when little work is done inside the loop, such
loops likely have different semantics than intended. The Java Memory Model allows that loop to never complete even
if another thread changes the field's value.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class SpinsOnField {
      boolean ready = false;

      void run() {
          // the loop may never complete even after
          // markAsReady call from the other thread
          while (!ready) {
          }
          // do some work
      }

      void markAsReady() {
          ready = true;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Additionally since Java 9, calling &lt;code&gt;Thread.onSpinWait()&lt;/code&gt; inside spin loop
on a &lt;code&gt;volatile&lt;/code&gt; field is recommended, which may significantly improve performance on some hardware.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection report only empty &lt;code&gt;while&lt;/code&gt; loops.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyWaitCallNotInLoop" defaultSeverity="WARNING" displayName="'wait()' not in loop" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports calls to &lt;code&gt;wait()&lt;/code&gt; not made inside a loop.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wait()&lt;/code&gt; is normally used to suspend a thread until a condition is true, and that condition should be checked after the &lt;code&gt;wait()&lt;/code&gt;
  returns. A loop is the clearest way to achieve this.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyNotifyWhileNotSynchronized" defaultSeverity="WARNING" displayName="'notify()' or 'notifyAll()' while not synced" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;notify()&lt;/code&gt; and &lt;code&gt;notifyAll()&lt;/code&gt; not within a corresponding
synchronized statement or synchronized method.
&lt;p&gt;
  Calling these methods on an object
  without holding a lock on that object will result in an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; being thrown.
  Such a construct is not necessarily an error, as the necessary lock may be acquired before
  the containing method is called, but it's worth looking at.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovySynchronizationOnThis" defaultSeverity="WARNING" displayName="Synchronization on 'this'" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization which uses &lt;code&gt;this&lt;/code&gt; as its lock expression.
&lt;p&gt;
  Constructs reported include &lt;code&gt;synchronized&lt;/code&gt;
  blocks which lock &lt;code&gt;this&lt;/code&gt;, and calls to &lt;code&gt;wait()&lt;/code&gt;
  &lt;code&gt;notify()&lt;/code&gt; or &lt;code&gt;notifyAll()&lt;/code&gt; which target &lt;code&gt;wait()&lt;/code&gt;.
  Such constructs, like synchronized methods, make it hard to track just who is locking on a given
  object, and make possible "denial of service" attacks on objects. As an alternative, consider
  locking on a private instance variable, access to which can be completely controlled.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovySystemRunFinalizersOnExit" defaultSeverity="WARNING" displayName="Call to System.runFinalizersOnExit()" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;System.runFinalizersOnExit()&lt;/code&gt;.
&lt;p&gt;
  This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,
  may result in data corruption, deadlock, and may affect parts of the program far removed from its call point.
  It is deprecated, and its use is strongly discouraged.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyUnsynchronizedMethodOverridesSynchronizedMethod" defaultSeverity="WARNING" displayName="Unsynchronized method overrides synchronized method" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports non-&lt;b&gt;synchronized&lt;/b&gt; methods overriding &lt;b&gt;synchronized&lt;/b&gt; methods.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class Base {
      &lt;b&gt;synchronized&lt;/b&gt; void foo() {
          // ...
      }
  }
  class Derived extends Base {
      @Override
      &lt;b&gt;void foo()&lt;/b&gt; {
          super.foo()
            // ...
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the non-synchronized method &lt;code&gt;foo()&lt;/code&gt; in class &lt;code&gt;Bar&lt;/code&gt; overrides synchronized method.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyBusyWait" defaultSeverity="WARNING" displayName="Busy wait" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.Thread.sleep()&lt;/code&gt; that occur inside loops.
&lt;p&gt;
  Such calls are indicative of "busy-waiting". Busy-waiting is often inefficient, and may result in unexpected deadlocks
  as busy-waiting threads do not release locked resources.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyAccessToStaticFieldLockedOnInstance" defaultSeverity="WARNING" displayName="Access to static field locked on instance data" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports accesses to a non-constant static field which is
locked on either &lt;code&gt;this&lt;/code&gt; or an instance field of &lt;code&gt;this&lt;/code&gt;.
&lt;p&gt;
  Locking a static field on instance data does not prevent the field from being
  modified by other instances, and thus may result in surprising race conditions.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  static String s;
  def foo() {
      synchronized (this) {
          System.out.println(s); // warning
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovySynchronizationOnNonFinalField" defaultSeverity="WARNING" displayName="Synchronization on non-final field" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;synchronized&lt;/code&gt; statements where the lock expression
is a non-&lt;code&gt;final&lt;/code&gt; field.
&lt;p&gt;
  Such statements are unlikely to have useful semantics, as different
  threads may be locking on different objects even when operating on the same object.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyThreadStopSuspendResume" defaultSeverity="WARNING" displayName="Call to Thread.stop(), Thread.suspend(), or Thread.resume()" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Thread.stop()&lt;/code&gt;,&lt;code&gt;Thread.suspend()&lt;/code&gt;, or &lt;code&gt;Thread.resume()&lt;/code&gt;.
&lt;p&gt;
  These calls are inherently prone to data corruption and deadlock, and their use is strongly
  discouraged.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyUnconditionalWait" defaultSeverity="WARNING" displayName="Unconditional 'wait' call" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;b&gt;wait()&lt;/b&gt;
being called unconditionally within a synchronized context.
Normally, &lt;b&gt;wait()&lt;/b&gt; is
used to block a thread until some condition is true. If &lt;b&gt;wait()&lt;/b&gt;
is called unconditionally, that often indicates that the condition was checked before a lock was
acquired. In that case, a data race may occur, with the condition becoming true between the time
it was checked and the time the lock was acquired. While constructs found by this inspection
  are not necessarily incorrect, they are certainly worth examining.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyPublicFieldAccessedInSynchronizedContext" defaultSeverity="WARNING" displayName="Non-private field accessed in synchronized context" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;final&lt;/code&gt;, non-&lt;code&gt;private&lt;/code&gt; fields which are accessed in a synchronized context.
&lt;p&gt;
  A non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such "partially synchronized"
  access may result in unexpectedly inconsistent data structures. Accesses in constructors an initializers are ignored
  for purposes of this inspection.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovySynchronizationOnVariableInitializedWithLiteral" defaultSeverity="WARNING" displayName="Synchronization on variable initialized with literal" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports synchronized blocks which lock on an object which is initialized with a literal.
&lt;p&gt;
  String literals are interned and &lt;code&gt;Number&lt;/code&gt; literals can be allocated from a cache. Because of
  this, it is possible that some other part of the system which uses an object initialized with the same
  literal, is actually holding a reference to the exact same object. This can create unexpected dead-lock
  situations, if the string was thought to be private.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovySynchronizedMethod" defaultSeverity="WARNING" displayName="Synchronized method" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;synchronized&lt;/code&gt; modifier on methods.
&lt;p&gt;
  Some coding standards
  prohibit the use of the &lt;code&gt;synchronized&lt;/code&gt; modifier, in favor of &lt;code&gt;synchronized&lt;/code&gt; statements.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Embedded" path="Java/Performance"><inspection shortName="MultiplyOrDivideByPowerOfTwo" defaultSeverity="WARNING" displayName="Multiplication or division by power of two" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiplication of an integer value by a constant integer that can be represented as a power of two. Such
expressions can be replaced with right or left shift operations
for a possible performance improvement.
&lt;p&gt;
  Note that this inspection is not relevant for modern JVMs (e. g.,
  HotSpot or OpenJ9) because their JIT compilers will perform this optimization.
  It might only be useful in some embedded systems where no JIT compilation is performed.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int y = x * 4;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is suggested to replace the multiplication or division operation with the shift operation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int y = x &amp;lt;&amp;lt; 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to make the inspection also report division by a power of two.
  Note that replacing a power of two division with a shift does not work for negative numbers.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RecordStoreResource" defaultSeverity="WARNING" displayName="'RecordStore' opened but not safely closed" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Java ME &lt;code&gt;javax.microedition.rms.RecordStore&lt;/code&gt; resources that are not opened in front
of a &lt;code&gt;try&lt;/code&gt; block and closed in the corresponding &lt;code&gt;finally&lt;/code&gt; block.
&lt;p&gt;Such resources may be inadvertently leaked if an exception is thrown before the resource is closed.&lt;/p&gt;
&lt;p&gt;
  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo1() throws RecordStoreException {
      RecordStore rs = RecordStore.openRecordStore("bar", true); // warning
  }
  void foo2() throws RecordStoreException {
      RecordStore rs = RecordStore.openRecordStore("bar", true); // no warning
      try {
          /* ... */
      } finally {
          rs.closeRecordStore();
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodCallInLoopCondition" defaultSeverity="WARNING" displayName="Method call in loop condition" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method calls in the condition part of a
loop statement. In highly resource constrained environments, such calls may
have adverse performance implications.
&lt;p&gt;
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
  This inspection is intended for Java ME and other highly resource constrained environments.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = "example";
  for (int i = 0; i &amp;lt; s.length(); i++) {
    System.out.println(s.charAt(i));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = "example";
  int length = s.length();
  for (int i = 0; i &amp;lt; length; i++) {
    System.out.println(s.charAt(i));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to ignore calls to common Java iteration methods like &lt;code&gt;Iterator.hasNext()&lt;/code&gt;
  and known methods with side-effects like &lt;code&gt;Atomic*.compareAndSet&lt;/code&gt;.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SingleCharacterStartsWith" defaultSeverity="WARNING" displayName="Single character 'startsWith()' or 'endsWith()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;String.startsWith()&lt;/code&gt; and
&lt;code&gt;String.endsWith()&lt;/code&gt; where single character string literals are passed as an argument.
&lt;p&gt;
  A quick-fix is suggested to replace such calls with more efficiently implemented &lt;code&gt;String.charAt()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  However, the performance gain of such change is minimal and the code becomes less readable because of the extra non-zero length check,
  so it is recommended to apply the quick-fix only inside tight loops.
&lt;/p&gt;
&lt;p&gt;
  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean startsWithX(String s) {
    return s.startsWith("x");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean startsWithX(String s) {
    return !s.isEmpty() &amp;&amp; s.charAt(0) == 'x';
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PrivateMemberAccessBetweenOuterAndInnerClass" defaultSeverity="WARNING" displayName="Synthetic accessor call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports references from a nested class to non-constant &lt;code&gt;private&lt;/code&gt; members of an outer class.
For such references, javac will generate package-private synthetic accessor methods,
which may compromise the security because members appearing to be private will in fact be accessible from the entire package.
&lt;p&gt;
  A nested class and its outer class are compiled to separate
  class files. The Java virtual machine normally prohibits access from a class to private fields and methods of
  another class. To enable access from a nested class to private members of an outer class, javac creates a package-private
  synthetic accessor method.
&lt;/p&gt;
&lt;p&gt;
  By making the &lt;code&gt;private&lt;/code&gt; member package-private instead, the actual accessibility is made explicit.
  This also saves a little bit of memory, which may improve performance in resource constrained environments.
&lt;/p&gt;
&lt;p&gt;
  This inspection only reports if the language level of the project or module is 10 or lower.
  Under Java 11 and higher accessor methods are not generated anymore,
  because of nest-based access control (&lt;a href="https://openjdk.org/jeps/181"&gt;JEP 181&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Outer {
    private void x() {}

    class Inner {
      void y() {
        x();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Outer {
    void x() {}

    class Inner {
      void y() {
        x();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CheckForOutOfMemoryOnLargeArrayAllocation" defaultSeverity="WARNING" displayName="Large array allocation with no OutOfMemoryError check" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports large array allocations which do not check
for &lt;code&gt;java.lang.OutOfMemoryError&lt;/code&gt;. In memory
constrained environments, allocations of large data objects should probably
be checked for memory depletion.
&lt;p&gt;
  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to specify the maximum number of elements to allow in unchecked array allocations.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayLengthInLoopCondition" defaultSeverity="WARNING" displayName="Array.length in loop condition" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports accesses to the &lt;code&gt;.length&lt;/code&gt; property of an array in the condition part of a
loop statement. In highly resource constrained environments, such calls may
have adverse performance implications.
&lt;p&gt;
  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(Object[] x) {
    for (int i = 0; i &amp;lt; x.length; i++) { /**/ }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyLargePrimitiveArrayInitializer" defaultSeverity="WARNING" displayName="Overly large initializer for array of primitive type" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports array initializer expressions for primitive
arrays that contain too many elements. Such initializers may result in overly large
class files because code must be generated to initialize each array element. In memory
or bandwidth constrained environments, it may be more efficient to load large arrays
of primitives from resource files.
&lt;p&gt;
  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to specify the maximum number of elements to allow in primitive array initializers.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InterfaceWithOnlyOneDirectInheritor" defaultSeverity="WARNING" displayName="Interface with a single direct inheritor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports interfaces that have precisely one direct inheritor.
While such interfaces may offer admirable clarity of design,
in memory-constrained or bandwidth-limited environments,
they needlessly increase the total footprint of the application. Consider
merging the interface with its inheritor.
&lt;p&gt;
  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConnectionResource" defaultSeverity="WARNING" displayName="Connection opened but not safely closed" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Java ME &lt;code&gt;javax.microedition.io.Connection&lt;/code&gt; resources that are not opened in front of a &lt;code&gt;try&lt;/code&gt; block and
closed in the corresponding &lt;code&gt;finally&lt;/code&gt; block. Such resources may be inadvertently leaked if an exception is thrown before the
resource is closed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void example() throws IOException {
    Connection c = Connector.open("foo");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbstractClassWithOnlyOneDirectInheritor" defaultSeverity="WARNING" displayName="Abstract class with a single direct inheritor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports abstract classes that have precisely one
direct inheritor. While such classes may offer admirable clarity of design,
in memory-constrained or bandwidth-limited environments, they needlessly increase
the total footprint of the application. Consider merging the abstract class with its inheritor.
&lt;p&gt;
  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class Base {} // will be reported

  class Inheritor extends Base {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Style" path="Gradle"><inspection shortName="UnusedVersionCatalogEntry" defaultSeverity="WARNING" displayName="Unused version catalog entry" enabled="true" language="TOML" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Detects unused keys in TOML descriptors of version catalogs. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code lang="groovy"&gt;
// build.gradle
dependencies {
  implementation libs.foo.bar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code lang="toml"&gt;
# libs.versions.toml
[libraries]
foo-bar = "com.gradle:example:1.0.0"
bar-baz = "com.gradle:example:2.0.0" # highlights bar-baz
&lt;/code&gt;&lt;/pre&gt;


&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Shell script" path=""><inspection shortName="ShellCheck" defaultSeverity="ERROR" displayName="ShellCheck" enabled="true" language="Shell Script" pluginId="com.jetbrains.sh" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports shell script bugs detected by the integrated &lt;a href="https://github.com/koalaman/shellcheck"&gt;ShellCheck&lt;/a&gt; static analysis tool.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 9" path="Java/Java language level migration aids"><inspection shortName="Java9CollectionFactory" defaultSeverity="WEAK WARNING" displayName="Immutable collection creation can be replaced with collection factory call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;java.util.Collections&lt;/code&gt; unmodifiable collection calls
that can be converted to newer collection factory methods.
These can be replaced with e.g. &lt;code&gt;List.of()&lt;/code&gt; or &lt;code&gt;Set.of()&lt;/code&gt; introduced in Java 9
or &lt;code&gt;List.copyOf()&lt;/code&gt; introduced in Java 10.

&lt;p&gt;Note that in contrast to &lt;code&gt;java.util.Collections&lt;/code&gt; methods, Java 9 collection factory methods:
&lt;ul&gt;
  &lt;li&gt;Do not accept &lt;code&gt;null&lt;/code&gt; values.
  &lt;li&gt;Require unique set elements and map keys.
  &lt;li&gt;Do not accept &lt;code&gt;null&lt;/code&gt; arguments to query methods like &lt;code&gt;List.contains()&lt;/code&gt; or &lt;code&gt;Map.get()&lt;/code&gt; of the collections returned.
&lt;/ul&gt;
&lt;p&gt;When these cases are violated, exceptions are thrown.
  This can change the semantics of the code after the migration.&lt;/p&gt;
&lt;p&gt;Example:
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;Integer&gt; even = Collections.unmodifiableList(
    Arrays.asList(2, 4, 6, 8, 10, 2));
  List&amp;lt;Integer&gt; evenCopy = Collections.unmodifiableList(
    new ArrayList&amp;lt;&gt;(list1));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;Integer&gt; even = List.of(2, 4, 6, 8, 10, 2);
  List&amp;lt;Integer&gt; evenCopy = List.copyOf(list);
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Do not warn when content is non-constant&lt;/b&gt; option to report only in cases when the supplied arguments are compile-time constants.
This reduces the chances that the behavior changes,
because it's not always possible to statically check whether original elements are unique and not &lt;code&gt;null&lt;/code&gt;.
&lt;p&gt;
  Use the &lt;b&gt;Suggest 'Map.ofEntries'&lt;/b&gt; option to suggest replacing unmodifiable maps with more than 10 entries with  &lt;code&gt;Map.ofEntries()&lt;/code&gt;.
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Collection factory methods&amp;#39;, which is available since Java 9.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceNullCheck" defaultSeverity="WARNING" displayName="Null check can be replaced with method call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;null&lt;/code&gt; checks that can be replaced with a call to a static method from &lt;code&gt;Objects&lt;/code&gt; or &lt;code&gt;Stream&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (message == null) {
    application.messageStorage().save(new EmptyMessage());
  } else {
    application.messageStorage().save(message);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  application.messageStorage()
    .save(Objects.requireNonNullElseGet(message, () -&gt; new EmptyMessage()));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Don't warn if the replacement is longer than the original&lt;/b&gt; option to ignore the cases when the replacement is longer than the
  original code.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaRequiresAutoModule" defaultSeverity="WARNING" displayName="Dependencies on automatic modules" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of automatic modules in a &lt;code&gt;requires&lt;/code&gt; directive.
&lt;p&gt;An automatic
module is unreliable since it can depend on the types on the class path,
and its name and exported packages can change if it's
  converted into an explicit module.&lt;/p&gt;
&lt;p&gt;Corresponds to &lt;code&gt;-Xlint:requires-automatic&lt;/code&gt; and &lt;code&gt;-Xlint:requires-transitive-automatic&lt;/code&gt; Javac options.
The first option increases awareness of when automatic modules are used.
The second warns the authors of a module that they're putting the users of that module at risk by establishing implied readability to an automatic module.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  //module-info.java
  module org.printer {
    requires transitive drivers.corp.org; // reported in case 'drivers.corp.org' is an automatic module
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Highlight only transitive dependencies&lt;/b&gt; option to warn only about transitive dependencies.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Modules&amp;#39;, which is available since Java 9.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Method metrics" path="Groovy"><inspection shortName="GroovyMethodParameterCount" defaultSeverity="WARNING" displayName="Method with too many parameters" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods with too many parameters. Method with too many parameters
is a good sign that refactoring is necessary. Methods whose signatures are inherited from
library classes are ignored by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Maximum number of parameters:&lt;/b&gt; field to specify the maximum acceptable number of parameters a method might have.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyOverlyLongMethod" defaultSeverity="WARNING" displayName="Overly long method" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that are too long.
&lt;p&gt;
  Methods that are too long
  may be confusing, and are a good sign that refactoring is necessary.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Maximum statements per method&lt;/b&gt; field to specify the maximum acceptable number of non-comment source
  statements a method might have.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyMultipleReturnPointsPerMethod" defaultSeverity="WARNING" displayName="Method with multiple return points" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods with too many return points. Methods with too
many return points may be confusing, and hard to refactor.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
  int foo(int a) {
    if (a &gt; 0) {
      return a
    }
    if (a &amp;lt; 0) return -a
    return 0
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable number of return points a method
  might have.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyMethodWithMoreThanThreeNegations" defaultSeverity="WARNING" displayName="Method with more than three negations" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods with three or more negation operations (&lt;code&gt;!&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;).
Such methods may be unnecessarily confusing.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyOverlyComplexMethod" defaultSeverity="WARNING" displayName="Overly complex method" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that have too high a cyclomatic complexity.
&lt;p&gt;
  Cyclomatic
  complexity is basically a measurement of the number of branching points in a method. Methods with too high
  a cyclomatic complexity may be confusing and difficult to test.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the &lt;b&gt;Method complexity limit&lt;/b&gt; field to specify the maximum acceptable cyclomatic complexity a method might have.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyOverlyNestedMethod" defaultSeverity="WARNING" displayName="Overly nested method" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose bodies are too deeply nested.
&lt;p&gt;
  Methods with too much statement
  nesting may be confusing, and are a good sign that refactoring may be necessary.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the &lt;b&gt;Maximum nesting depth&lt;/b&gt; field to specify the maximum acceptable nesting depth a method might have.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Other" path="Groovy"><inspection shortName="TypeCustomizer" defaultSeverity="WARNING" displayName="Type customizer inspection" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports files which can be custom type checkers and are not added to compiler resources yet.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GrMethodMayBeStatic" defaultSeverity="WARNING" displayName="Method can be made 'static'" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods which may safely be made &lt;code&gt;static&lt;/code&gt;.
&lt;p&gt;
  A method may be &lt;code&gt;static&lt;/code&gt; if it is not &lt;code&gt;synchronized&lt;/code&gt;,
  it does not reference any of its class' instance methods and instance fields,
  and it is not overridden in a subclass.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Compiler issues" path="Java"><inspection shortName="SynchronizeOnValueBasedClass" defaultSeverity="WARNING" displayName="Value-based warnings" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attempts to synchronize on an instance of a value-based class that produce compile-time warnings and raise
run-time exceptions starting from Java 16.
&lt;p&gt;
  For example, &lt;code&gt;java.lang.Double&lt;/code&gt; is annotated with &lt;code&gt;jdk.internal.ValueBased&lt;/code&gt;, so the following code will
  produce a compile-time warning:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Double d = 20.0;
synchronized (d) { ... } // javac warning
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UNCHECKED_WARNING" defaultSeverity="WARNING" displayName="Unchecked warning" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code on which an unchecked warning will be issued by the javac compiler.
Every unchecked warning may potentially trigger &lt;code&gt;ClassCastException&lt;/code&gt; at runtime.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List items = Arrays.asList("string", "string");
  List&amp;lt;Integer&amp;gt; numbers = Collections.unmodifiableList(items); // unchecked assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PreviewFeature" defaultSeverity="WARNING" displayName="Preview Feature warning" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of Preview Feature APIs, i.e. of a module, package, class, interface, method, constructor, field, or enum constant
in the &lt;code&gt;java.*&lt;/code&gt; or &lt;code&gt;javax.*&lt;/code&gt; namespace annotated with &lt;code&gt;@PreviewFeature&lt;/code&gt;.
&lt;p&gt;
  A preview feature is a new feature of the Java language, Java Virtual Machine, or Java SE API that is fully specified, fully implemented,
  and is yet impermanent. The notion of a preview feature is defined in &lt;a href="https://openjdk.org/jeps/12"&gt;JEP 12&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  If some piece of code depends on a preview API, it may stop compiling in future JDK versions if the feature is changed or removed.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;The inspection only reports if the language level of the project or module is &lt;b&gt;Preview&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="JavacQuirks" defaultSeverity="WARNING" displayName="Javac quirks" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports known Javac issues, performance problems, and incompatibilities.
For example, type inference may be slow when it has to process many nested calls.
&lt;p&gt;The following code triggers a warning, as the vararg method call has 50+ poly arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Arrays.asList(
      Arrays.asList("a1", "b1"),
      Arrays.asList("a2", "b2"),
      ...
      Arrays.asList("a100", "b100"));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix adds explicit type arguments, which makes compilation and IDE processing much faster:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  //noinspection RedundantTypeArguments
  Arrays.&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;asList(
      Arrays.asList("a1", "b1"),
      Arrays.asList("a2", "b2"),
      ...
      Arrays.asList("a100", "b100"));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="YAML" path=""><inspection shortName="YAMLUnresolvedAlias" defaultSeverity="ERROR" displayName="Unresolved alias" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved aliases in YAML files.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: *unknown_alias
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLSchemaValidation" defaultSeverity="WARNING" displayName="Validation by JSON Schema" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.
&lt;p&gt;&lt;b&gt;Scheme example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    "properties": {
      "SomeNumberProperty": {
        "type": "number"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;The following is an example with the corresponding warning:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SomeNumberProperty: hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLUnusedAnchor" defaultSeverity="WARNING" displayName="Unused anchor" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused anchors.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: &amp;some_anchor
    key1: value1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLRecursiveAlias" defaultSeverity="ERROR" displayName="Recursive alias" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports recursion in YAML aliases.
&lt;p&gt;Alias can't be recursive and be used inside the data referenced by a corresponding anchor.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: &amp;some_anchor
    sub_key1: value1
    sub_key2: *some_anchor
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated YAML key" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated keys in YAML files.
&lt;p&gt;Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.&lt;/p&gt;
&lt;p&gt;Note that the deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard &lt;code&gt;deprecationMessage&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Scheme deprecation example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    "properties": {
      "SomeDeprecatedProperty": {
        "deprecationMessage": "Baz",
        "description": "Foo bar"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;The following is an example with the corresponding warning:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SomeDeprecatedProperty: some value
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLIncompatibleTypes" defaultSeverity="WARNING" displayName="Suspicious type mismatch" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
myElements:
  - value1
  - value2
  - false # &amp;lt;- reported, because it is a boolean value, while other values are strings
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLDuplicatedKeys" defaultSeverity="ERROR" displayName="Duplicated YAML keys" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated keys in YAML files.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  same_key: some value
  same_key: another value
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Internationalization" path=""><inspection shortName="NonAsciiCharacters" defaultSeverity="WARNING" displayName="Non-ASCII characters" enabled="true" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code elements that use non-ASCII symbols in an unusual context.

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-ASCII characters used in identifiers, strings, or comments.&lt;/li&gt;
  &lt;li&gt;Identifiers written in different languages, such as &lt;code&gt;my&lt;b&gt;С&lt;/b&gt;ollection&lt;/code&gt; with the
    letter &lt;code&gt;&lt;b&gt;C&lt;/b&gt;&lt;/code&gt; written in Cyrillic.&lt;/li&gt;
  &lt;li&gt;Comments or strings containing Unicode symbols, such as long dashes and arrows.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LossyEncoding" defaultSeverity="WARNING" displayName="Lossy encoding" enabled="true" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;

Reports characters that cannot be displayed because of the current document encoding.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you type international characters in a document with the &lt;b&gt;US-ASCII&lt;/b&gt; charset, some characters will be lost on save.&lt;/li&gt;
  &lt;li&gt;If you load a &lt;b&gt;UTF-8&lt;/b&gt;-encoded file using the &lt;b&gt;ISO-8859-1&lt;/b&gt; one-byte charset, some characters will be displayed incorrectly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can fix this by changing the file encoding
either by specifying the encoding directly in the file, e.g. by editing &lt;code&gt;encoding=&lt;/code&gt; attribute in the XML prolog of XML file,
  or by changing the corresponding options in &lt;b&gt;Settings | Editor | File Encodings&lt;/b&gt;.&lt;/p&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Naming conventions" path="Groovy"><inspection shortName="GroovyInstanceMethodNamingConvention" defaultSeverity="WARNING" displayName="Instance method naming convention" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instance methods whose names are too short, too long, or do not follow
the specified regular expression pattern. Instance methods that override library
methods are ignored by this inspection.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression expected for instance method names.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyConstantNamingConvention" defaultSeverity="WARNING" displayName="Constant naming convention" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constant with names which don't match the specified convention.
&lt;p&gt;Constants are fields of immutable type declared with &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt; modifiers.&lt;/p&gt;
Reports constants whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Pattern&lt;/b&gt; field to specify &lt;code&gt;java.util.regex.Pattern&lt;/code&gt; which a constant name is expected to match.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Min length&lt;/b&gt; field to specify the minimum length of a constant name.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Max length&lt;/b&gt; field to specify the maximum length of a constant name.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyStaticMethodNamingConvention" defaultSeverity="WARNING" displayName="Static method naming convention" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports static methods whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression expected for static method names.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyParameterNamingConvention" defaultSeverity="WARNING" displayName="Method parameter naming convention" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method parameters whose names are either too short, too
long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression
  expected for method parameter names.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="NewGroovyClassNamingConvention" defaultSeverity="WARNING" displayName="Class naming convention" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports classes whose names are too short, too long, or do not follow
  the specified regular expression pattern.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;For each class type, specify the minimum length, maximum length, and the regular expression expected for class names using the
  provided input fields.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyLocalVariableNamingConvention" defaultSeverity="WARNING" displayName="Local variable naming convention" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyStaticVariableNamingConvention" defaultSeverity="WARNING" displayName="Static variable naming convention" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;static&lt;/code&gt; variables whose names are too short, too long,
or do not follow
the specified regular expression pattern.
&lt;p&gt;
  Constants, i.e. variables of immutable type declared
  &lt;code&gt;static final&lt;/code&gt;, are not checked by this inspection
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for static variable names.
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyInstanceVariableNamingConvention" defaultSeverity="WARNING" displayName="Instance variable naming convention" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instance variables whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length and regular expression expected for
  instance variable names.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Declaration redundancy" path="Java"><inspection shortName="UnusedLabel" defaultSeverity="WARNING" displayName="Unused label" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports labels that are not targets of any &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statements.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  label: &lt;b&gt;for&lt;/b&gt; (int i = 0; i &amp;lt; 10; i++) {
    &lt;b&gt;if&lt;/b&gt; (i == 3) {
      &lt;b&gt;break&lt;/b&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the label is removed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;for&lt;/b&gt; (int i = 0; i &amp;lt; 10; i++) {
    &lt;b&gt;if&lt;/b&gt; (i == 3) {
      &lt;b&gt;break&lt;/b&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AccessStaticViaInstance" defaultSeverity="WARNING" displayName="Access static member via instance reference" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports references to &lt;code&gt;static&lt;/code&gt; methods and fields via a class instance rather than the class itself.
&lt;p&gt;Even though referring to static members via instance variables is allowed by The Java Language Specification,
  this makes the code confusing as the reader may think that the result of the method depends on the instance.&lt;/p&gt;
&lt;p&gt;The quick-fix replaces the instance variable with the class name.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s1 = s.valueOf(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = String.valueOf(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Java9RedundantRequiresStatement" defaultSeverity="WARNING" displayName="Redundant 'requires' directive in module-info" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;requires&lt;/code&gt; directives in Java Platform Module System &lt;code&gt;module-info.java&lt;/code&gt; files.
A &lt;code&gt;requires&lt;/code&gt; directive is redundant when a module &lt;code&gt;A&lt;/code&gt; requires a module &lt;code&gt;B&lt;/code&gt;,
but the code in module &lt;code&gt;A&lt;/code&gt; doesn't import any packages or classes from &lt;code&gt;B&lt;/code&gt;.
Furthermore, all modules have an implicitly declared dependence on the &lt;code&gt;java.base&lt;/code&gt; module,
therefore a &lt;code&gt;requires java.base;&lt;/code&gt; directive is always redundant.
&lt;p&gt;
  The quick-fix deletes the redundant &lt;code&gt;requires&lt;/code&gt; directive.
  If the deleted dependency re-exported modules that are actually used, the fix adds a &lt;code&gt;requires&lt;/code&gt; directives for these modules.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 9 or higher.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="unused" defaultSeverity="WARNING" displayName="Unused declaration" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports classes, methods, or fields that are not used or unreachable from the entry points.
&lt;p&gt; An entry point can be a main method, tests, classes from outside the specified scope, classes accessible from
  &lt;code&gt;module-info.java&lt;/code&gt;, and so on. It is possible to configure custom entry points by using name patterns or annotations.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Department {
    private Organization myOrganization;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;Department&lt;/code&gt; explicitly references &lt;code&gt;Organization&lt;/code&gt; but if &lt;code&gt;Department&lt;/code&gt; class itself is unused, then inspection will report both classes. &lt;/p&gt;
&lt;p&gt;
  The inspection also reports parameters that are not used by their methods and all method implementations and overriders, as well as local
  variables that are declared but not used.
&lt;/p&gt;
&lt;p&gt;
  &lt;b&gt;Note:&lt;/b&gt; Some unused members may not be reported during in-editor code highlighting. For performance reasons, a non-private member is
  checked only when its name rarely occurs in the project.
  To see all results, run the inspection by selecting &lt;b&gt;Code | Inspect Code&lt;/b&gt; or &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; from the main menu.
&lt;/p&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the visibility settings below to configure members to be reported. For example, configuring report &lt;code&gt;private&lt;/code&gt; methods only means
  that &lt;code&gt;public&lt;/code&gt; methods of &lt;code&gt;private&lt;/code&gt; inner class will be reported but &lt;code&gt;protected&lt;/code&gt; methods of top level class
  will be ignored.&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;entry points&lt;/b&gt; tab to configure entry points to be considered during the inspection run.&lt;/p&gt;
&lt;p&gt; You can add entry points manually when inspection results are ready.&lt;/p&gt;
&lt;p&gt; If your code uses unsupported frameworks, there are several options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If the framework relies on annotations, use the &lt;b&gt;Annotations...&lt;/b&gt; button to configure the framework's annotations.&lt;/li&gt;
  &lt;li&gt;If the framework doesn't rely on annotations, try to configure class name patterns that are expected by the framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way the annotated code accessible by the framework internals will be treated as used.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantLambdaParameterType" defaultSeverity="INFORMATION" displayName="Redundant lambda parameter types" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda formal parameter types that are redundant because they can be inferred from the context.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Map&amp;lt;String, Integer&amp;gt; map = ...
  map.forEach((String s, Integer i) -&gt; log.info(s + "=" + i));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes the parameter types from the lambda.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Map&amp;lt;String, Integer&amp;gt; map = ...
  map.forEach((s, i) -&gt; log.info(s + "=" + i));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialFunctionalExpressionUsage" defaultSeverity="WARNING" displayName="Trivial usage of functional expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports functional interface methods calls that are directly invoked on the definition of the lambda, method reference, or anonymous class.
Such method calls can be replaced with the body of the functional interface implementation.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean contains(List&amp;lt;String&amp;gt; names, String name) {
    return ((Predicate&amp;lt;String&amp;gt;)x -&gt; {
      return names.contains(x);
    }).test(name);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the method call changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean contains(List&amp;lt;String&amp;gt; names, String name) {
    return names.contains(name);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FinalMethodInFinalClass" defaultSeverity="WARNING" displayName="'final' method in 'final' class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;final&lt;/code&gt; methods in &lt;code&gt;final&lt;/code&gt; classes.
&lt;p&gt;Since &lt;code&gt;final&lt;/code&gt; classes cannot be inherited, marking a method as &lt;code&gt;final&lt;/code&gt;
  may be unnecessary and confusing.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;record Bar(int a, int b) {
  public final int sum() { 
     return a + b;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;record Bar(int a, int b) {
  public int sum() { 
     return a + b;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As shown in the example, a class can be marked as &lt;code&gt;final&lt;/code&gt; explicitly or implicitly.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedReturnValue" defaultSeverity="WARNING" displayName="Method can be made 'void'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports methods whose return values are never used when called.
The return type of such methods can be made &lt;code&gt;void&lt;/code&gt;.
&lt;p&gt;Methods annotated with Error Prone's or AssertJ's &lt;code&gt;@CanIgnoreReturnValue&lt;/code&gt; annotation will not be reported.
  The quick-fix updates the method signature and removes &lt;code&gt;return&lt;/code&gt; statements from inside the method.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // reported if visibility setting is Protected or Public
  protected String myToUpperCase(String s) {
    return s.toUpperCase();
  }

  // simple setter, reporting depends on setting
  public String setStr(String str) {
    myStr = str;
    return myStr;
  }

  void test() {
    setStr("value");          // return value is unused
    myToUpperCase("result");  // return value is unused
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied to both methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    protected void myToUpperCase(String s) {
      // 'return' removed completely
      // as 's.toUpperCase()' has no side effect
    }

    public void setStr(String str) {
      myStr = str;
      // 'return' removed
    }
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;b&gt;NOTE:&lt;/b&gt; Some methods might not be reported during in-editor highlighting due to performance reasons.
  To see all results, run the inspection using &lt;b&gt;Code | Inspect Code&lt;/b&gt; or &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt;&gt;
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore chainable methods&lt;/b&gt; option to ignore unused return values from chainable calls.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Maximal reported method visibility&lt;/b&gt; option to control the maximum visibility of methods to be reported.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EmptyInitializer" defaultSeverity="WARNING" displayName="Empty class initializer" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty class initializer blocks.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionalExpressionCanBeFolded" defaultSeverity="WARNING" displayName="Functional expression can be folded" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method references or lambda expressions that point to a method of their own functional interface type and hence can be
replaced with their qualifiers removing unnecessary object allocation.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SwingUtilities.invokeLater(r::run);
  SwingUtilities.invokeAndWait(() -&gt; r.run());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SwingUtilities.invokeLater(r);
  SwingUtilities.invokeAndWait(r);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection reports only if the language level of the project or module is 8 or higher.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SillyAssignment" defaultSeverity="WARNING" displayName="Variable is assigned to itself" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments of a variable to itself.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a = a;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes the assigment.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CanBeFinal" defaultSeverity="WARNING" displayName="Declaration can have 'final' modifier" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports fields, methods, or classes that may have the &lt;code&gt;final&lt;/code&gt; modifier added to their declarations.
&lt;p&gt;Final classes can't be extended, final methods can't be overridden, and final fields can't be reassigned.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Person {
    private String name;

    Person(String name) {
      this.name = name;
    }

    public String getName() {
      return name;
    }

    public String toString() {
      return getName();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public final class Person {
    private final String name;

    Person(String name) {
      this.name = name;
    }

    public final String getName() {
      return name;
    }

    public final String toString() {
      return getName();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Report classes&lt;/b&gt; and &lt;b&gt;Report methods&lt;/b&gt; options to define which declarations are to be reported.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DefaultAnnotationParam" defaultSeverity="WARNING" displayName="Default annotation parameter value" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports annotation parameters that are assigned to their &lt;code&gt;default&lt;/code&gt; value.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @interface Test {
      Class&amp;lt;?&gt; expected() default Throwable.class;
  }

  @Test(expected = Throwable.class)
  void testSmth() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Test()
  void testSmth() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SameReturnValue" defaultSeverity="WARNING" displayName="Method always returns the same value" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports methods and method hierarchies that always return the same constant.
&lt;p&gt;
The inspection works differently in batch-mode
  (from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt;)
  and on-the-fly in the editor:
&lt;ul&gt;
  &lt;li&gt;In batch-mode, the inspection reports methods and method hierarchies that always
    return the same constant.&lt;/li&gt;
  &lt;li&gt;In the editor, the inspection only reports methods that have more than one &lt;code&gt;return&lt;/code&gt;
    statement, do not have super methods, and cannot be overridden. If a method overrides or
    implements a method, a contract may require it to return a specific constant, but at the
    same time, we may want to have several exit points. If a method can be overridden, it is
    possible that a different value will be returned in subclasses.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
                // Warn only in batch-mode:
    int xxx() { // Method 'xxx()' and all its overriding methods always return '0'
      return 0;
    }
  }

  class Y extends X {
    @Override
    int xxx() {
        return 0;
    }

                // Warn only in batch-mode:
    int yyy() { // Method 'yyy()' always returns '0'
        return 0;
    }

                                  // Warn both in batch-mode and on-the-fly:
    final int zzz(boolean flag) { // Method 'zzz()' always returns '0'
        if (Math.random() &gt; 0.5) {
            return 0;
        }
        return 0;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantExplicitClose" defaultSeverity="WARNING" displayName="Redundant 'close()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary calls to &lt;code&gt;close()&lt;/code&gt; at the end of a try-with-resources block and suggests removing them.
&lt;p&gt;&lt;b&gt;Example&lt;/b&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try(MyAutoCloseable ac = new MyAutoCloseable()) {
    foo();
    ac.close();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try(MyAutoCloseable ac = new MyAutoCloseable()) {
    foo();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaModuleDefinition" defaultSeverity="WARNING" displayName="Java module definition problems" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports miscellaneous problems with the module-info.java file. For example, it reports a service which is provided but not exported or used.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
module myModule {
  // Service is provided but its containing package is not exported
  provides com.example.MyService with com.example.MyServiceImpl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantRecordConstructor" defaultSeverity="WARNING" displayName="Redundant record constructor" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant constructors declared inside Java records.
&lt;p&gt;&lt;b&gt;Example 1:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  record Point(int x, int y) {
    public Point {} // could be removed
  }
  
  record Point(int x, int y) {
    public Point(int x, int y) { // could be removed
      this.x = x;
      this.y = y;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes the redundant constructors.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example 2:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
   // could be converted to compact constructor
  record Range(int from, int to) {
    public Range(int from, int to) {
      if (from &gt; to) throw new IllegalArgumentException();
      this.from = from;
      this.to = to;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix converts this code into a compact constructor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Records&amp;#39;, which is available since Java 16.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryModuleDependencyInspection" defaultSeverity="WARNING" displayName="Unnecessary module dependency" enabled="true" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports dependencies on modules that are not used. The quick-fix safely removes such unused dependencies.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateThrows" defaultSeverity="WARNING" displayName="Duplicate throws" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate exceptions in a method &lt;code&gt;throws&lt;/code&gt; list.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f() throws Exception, Exception {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f() throws Exception {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore exceptions subclassing others &lt;/b&gt; option to ignore exceptions subclassing other exceptions.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnusedLibrary" defaultSeverity="WARNING" displayName="Unused library" enabled="false" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports libraries attached to the specified inspection scope that
are not used directly in code.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ProtectedMemberInFinalClass" defaultSeverity="WARNING" displayName="'protected' member in 'final' class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;protected&lt;/code&gt; members in &lt;code&gt;final&lt;/code&gt; classes with no &lt;code&gt;protected&lt;/code&gt; modifier.
&lt;p&gt;Since &lt;code&gt;final&lt;/code&gt; classes cannot be inherited, marking the method as &lt;code&gt;protected&lt;/code&gt;
  may be confusing. It is better to declare such members as &lt;code&gt;private&lt;/code&gt; or package-visible instead.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;record Bar(int a, int b) {
  protected int sum() { 
     return a + b;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;record Bar(int a, int b) {
  int sum() { 
     return a + b;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As shown in the example, a class can be marked as &lt;code&gt;final&lt;/code&gt; explicitly or implicitly.&lt;/p&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SafeVarargsOnNonReifiableType" defaultSeverity="WARNING" displayName="@SafeVarargs is not applicable to reifiable types" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reifiable type of variable arity method annotated with &lt;code&gt;@SafeVarargs&lt;/code&gt;.
In this case, the annotation is redundant.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    @SafeVarargs
    public final void processStrings(String... strings) {
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Annotations&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantThrows" defaultSeverity="WARNING" displayName="Redundant 'throws' clause" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports exceptions that are declared in a method's signature but never thrown by the method itself or its implementations and overriding methods.
&lt;p&gt;The inspection ignores methods related to serialization, for example the methods &lt;code&gt;readObject()&lt;/code&gt; and &lt;code&gt;writeObject()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void method() throws InterruptedException {
    System.out.println();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes unnecessary exceptions from the declaration and normalizes redundant &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; statements:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void method() {
    System.out.println();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;b&gt;Note:&lt;/b&gt; Some exceptions may not be reported during in-editor highlighting for performance reasons.
  To see all results, run the inspection by selecting  &lt;b&gt;Code | Inspect Code&lt;/b&gt; or &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; from the main menu.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore exceptions thrown by entry point methods&lt;/b&gt; option to not report exceptions thrown by
  for example &lt;code&gt;main()&lt;/code&gt; methods.
  Entry point methods can be configured in the settings of the
  &lt;a href="settings://Errors?Unused%20Declaration%20entry%20point"&gt;Java | Declaration redundancy | Unused declaration&lt;/a&gt; inspection.
  &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SameParameterValue" defaultSeverity="WARNING" displayName="Method parameter always has the same value" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports method parameters that always have the same constant value.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  static void printPoint(int x, int y) { // x is always 0
    System.out.println(x + ", " + y);
  }

  public static void main(String[] args) {
    printPoint(0, 1);
    printPoint(0, 2);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix inlines the constant value. This may simplify the method implementation.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore when a quick-fix can not be provided&lt;/b&gt; option to suppress the inspections when:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the parameter is modified inside the method&lt;/li&gt;
  &lt;li&gt;the parameter value that is being passed is a reference to an inaccessible field (Java ony)&lt;/li&gt;
  &lt;li&gt;the parameter is a vararg (Java only)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Use the &lt;b&gt;Maximal method visibility&lt;/b&gt; option to control the maximum visibility of methods to be reported.
&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Minimal method usage count to report parameter&lt;/b&gt; field to specify the minimal number of method usages with the same parameter value.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="WeakerAccess" defaultSeverity="WARNING" displayName="Declaration access can be weaker" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports fields, methods or classes that may have their access modifier narrowed down.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Sample {
    void foo() {
        bar("foo", "foo");
    }
    void bar(String x, String y) { } // can be private
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Sample {
    void foo() {
        bar("foo", "foo");
    }
    private void bar(String x, String y) { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the inspection's options to define the rules for the modifier change suggestions.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Finalization" path="Java"><inspection shortName="Finalize" defaultSeverity="WARNING" displayName="'finalize()' should not be overridden" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports overriding the &lt;code&gt;Object.finalize()&lt;/code&gt; method.
&lt;p&gt;According to the &lt;code&gt;Object.finalize()&lt;/code&gt; documentation:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
    The finalization mechanism is inherently problematic. Finalization can lead
    to performance issues, deadlocks, and hangs. Errors in finalizers can lead
    to resource leaks; there is no way to cancel finalization if it is no longer
    necessary; and no ordering is specified among calls to &lt;code&gt;finalize&lt;/code&gt;
    methods of different objects. Furthermore, there are no guarantees regarding
    the timing of finalization. The &lt;code&gt;finalize&lt;/code&gt; method might be called
    on a finalizable object only after an indefinite delay, if at all.
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore for trivial 'finalize()' implementations&lt;/b&gt; option to ignore
    &lt;code&gt;finalize()&lt;/code&gt; implementations with an empty method body or a body
    containing only &lt;code&gt;if&lt;/code&gt; statements that have a condition which evaluates
    to &lt;code&gt;false&lt;/code&gt; and is a compile-time constant. For performance reasons it
    can be beneficial to override a non-trivial &lt;code&gt;finalize()&lt;/code&gt; with an empty
    implementation in a subclass. An empty final &lt;code&gt;finalize()&lt;/code&gt; implementation
    can also be used to prevent subclasses from overriding.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FinalizeNotProtected" defaultSeverity="WARNING" displayName="'finalize()' should be protected, not public" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any implementations of the &lt;code&gt;Object.finalize()&lt;/code&gt; method that are
declared &lt;code&gt;public&lt;/code&gt;.
&lt;p&gt;
  According to the contract of the &lt;code&gt;Object.finalize()&lt;/code&gt;, only the garbage
  collector calls this method. Making this method public may be confusing, because it
  means that the method can be used from other code.
&lt;/p&gt;
&lt;p&gt;
  A quick-fix is provided to make the method &lt;code&gt;protected&lt;/code&gt;, to prevent it from being invoked
  from other classes.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;class&lt;/b&gt; X {
    &lt;b&gt;public void&lt;/b&gt; finalize() {
      /* ... */
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;class&lt;/b&gt; X {
    &lt;b&gt;protected void&lt;/b&gt; finalize() {
      /* ... */
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NoExplicitFinalizeCalls" defaultSeverity="WARNING" displayName="'finalize()' called explicitly" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Object.finalize()&lt;/code&gt;.
&lt;p&gt;Calling &lt;code&gt;Object.finalize()&lt;/code&gt; explicitly may result in objects being placed in an
inconsistent state.
  The garbage collector automatically calls this method on an object when it determines that there are no references to this object.&lt;/p&gt;
&lt;p&gt;The inspection doesn't report calls to &lt;code&gt;super.finalize()&lt;/code&gt; from within implementations of &lt;code&gt;finalize()&lt;/code&gt; as
  they're benign.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  MyObject m = new MyObject();
  m.finalize();
  System.gc()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 8" path="Java/Java language level migration aids"><inspection shortName="Java8MapApi" defaultSeverity="WARNING" displayName="Simplifiable 'Map' operations" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports common usage patterns of &lt;code&gt;java.util.Map&lt;/code&gt; and suggests replacing them with:
&lt;code&gt;getOrDefault()&lt;/code&gt;, &lt;code&gt;computeIfAbsent()&lt;/code&gt;, &lt;code&gt;putIfAbsent()&lt;/code&gt;, &lt;code&gt;merge()&lt;/code&gt;, or &lt;code&gt;replaceAll()&lt;/code&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  map.containsKey(key) ? map.get(key) : "default";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  map.getOrDefault(key, "default");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; list = map.get(key);
  if (list == null) {
    list = new ArrayList&amp;lt;&amp;gt;();
    map.put(key, list);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  map.computeIfAbsent(key, localKey -&gt; new ArrayList&amp;lt;&amp;gt;());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Integer val = map.get(key);
  if (val == null) map.put(key, 1);
  else map.put(key, val + 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  map.merge(key, 1, (localKey, localValue) -&gt; localValue + 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (Map.Entry&amp;lt;String, String&amp;gt; entry : map.entrySet()) {
    map.put(entry.getKey(), transform(entry.getValue()));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  map.replaceAll((localKey, localValue) -&gt; transform(localValue));
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;Note that the replacement with &lt;code&gt;computeIfAbsent()&lt;/code&gt; or &lt;code&gt;merge()&lt;/code&gt; might work incorrectly for some &lt;code&gt;Map&lt;/code&gt;
  implementations if the code extracted to the lambda expression modifies the same &lt;code&gt;Map&lt;/code&gt;. By default,
  the warning doesn't appear if this code might have side effects. If necessary, enable the
  &lt;b&gt;Suggest replacement even if lambda may have side effects&lt;/b&gt; option to always show the warning.&lt;/p&gt;
&lt;p&gt;Also, due to different handling of the &lt;code&gt;null&lt;/code&gt; value in old methods like &lt;code&gt;put()&lt;/code&gt; and newer methods like
  &lt;code&gt;computeIfAbsent()&lt;/code&gt; or &lt;code&gt;merge()&lt;/code&gt;, semantics might change if storing the &lt;code&gt;null&lt;/code&gt; value into given
  &lt;code&gt;Map&lt;/code&gt; is important. The inspection won't suggest the replacement when the value is statically known to be nullable,
  but for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning
  and adding an explanatory comment.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda methods in collections&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Java8ListSort" defaultSeverity="WARNING" displayName="'Collections.sort()' can be replaced with 'List.sort()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls of &lt;code&gt;Collections.sort(list, comparator)&lt;/code&gt; which can be replaced with &lt;code&gt;list.sort(comparator)&lt;/code&gt;.
&lt;p&gt;&lt;code&gt;Collections.sort&lt;/code&gt; is just a wrapper, so it is better to use an instance method directly.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda methods in collections&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Java8CollectionRemoveIf" defaultSeverity="WARNING" displayName="Loop can be replaced with 'Collection.removeIf()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports loops which can be collapsed into a single &lt;code&gt;Collection.removeIf()&lt;/code&gt; call.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (Iterator&amp;lt;String&amp;gt; it = collection.iterator(); it.hasNext(); ) {
    String aValue = it.next();
    if(shouldBeRemoved(aValue)) {
      it.remove();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  collection.removeIf(aValue -&gt; shouldBeRemoved(aValue));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda methods in collections&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Anonymous2MethodRef" defaultSeverity="WARNING" displayName="Anonymous type can be replaced with method reference" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous classes which can be replaced with method references.
&lt;p&gt;
  Note that if an anonymous class is converted into an unbound method reference, the same method reference object 
  can be reused by the Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,
  separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, 
  e.g. when anonymous class instances are used as &lt;code&gt;HashMap&lt;/code&gt; keys.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Runnable r = new Runnable() {
    @Override
    public void run() {
      System.out.println();
    }
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Runnable r = System.out::println;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Report when interface is not annotated with @FunctionalInterface&lt;/b&gt; option to enable this inspection for
  interfaces which are not annotated with &lt;code&gt;@FunctionalInterface&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Method references&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Convert2Lambda" defaultSeverity="WARNING" displayName="Anonymous type can be replaced with lambda" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous classes which can be replaced with lambda expressions.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new Thread(new Runnable() {
    @Override
    public void run() {
      // run thread
    }
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new Thread(() -&gt; {
    // run thread
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Note that if an anonymous class is converted into a stateless lambda, the same lambda object
can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,
separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases,
e.g. when anonymous class instances are used as &lt;code&gt;HashMap&lt;/code&gt; keys.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Report when interface is not annotated with @FunctionalInterface &lt;/b&gt; option to ignore the cases in which an anonymous
class implements an interface without &lt;code&gt;@FunctionalInterface&lt;/code&gt; annotation.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AnonymousHasLambdaAlternative" defaultSeverity="WARNING" displayName="Anonymous type has shorter lambda alternative" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous classes which could be transformed to a constructor or a factory method call with a lambda expression argument.
&lt;p&gt;The following classes are reported by this inspection:
&lt;ul&gt;
  &lt;li&gt;Anonymous classes extending &lt;code&gt;ThreadLocal&lt;/code&gt; which have an &lt;code&gt;initialValue()&lt;/code&gt; method (can be replaced with &lt;code&gt;ThreadLocal.withInitial&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Anonymous classes extending &lt;code&gt;Thread&lt;/code&gt; which have a &lt;code&gt;run()&lt;/code&gt; method (can be replaced with &lt;code&gt;new Thread(Runnable)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;new&lt;/b&gt; Thread() {
    @Override
    &lt;b&gt;public void&lt;/b&gt; run() {
      System.out.println("Hello from thread!");
    }
  }.start();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;new&lt;/b&gt; Thread(() -&gt; {
    System.out.println("Hello from thread!");
  }).start();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;ThreadLocal.withInitial()&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Guava" defaultSeverity="WARNING" displayName="Guava's functional primitives can be replaced with Java" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of Guava's functional primitives that can be migrated to standard Java API calls.
&lt;p&gt;For example, the inspection reports usages of classes and interfaces like &lt;code&gt;FluentIterable&lt;/code&gt;, &lt;code&gt;Optional&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;,
  &lt;code&gt;Predicate&lt;/code&gt;, or &lt;code&gt;Supplier&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ImmutableList&amp;lt;String&amp;gt; results = FluentIterable.from(List.of(1, 2, 3)).transform(Object::toString).toList();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; results = List.of(1, 2, 3).stream().map(Object::toString).collect(Collectors.toList());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The quick-fix may change the semantics. Some lazily evaluated Guava iterables can be transformed to eagerly evaluated.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComparatorCombinators" defaultSeverity="WARNING" displayName="'Comparator' combinator can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Comparator&lt;/code&gt; instances defined as lambda expressions that could be expressed using
 &lt;code&gt;Comparator.comparing()&lt;/code&gt; calls.
Chained comparisons which can be replaced by &lt;code&gt;Comparator.thenComparing()&lt;/code&gt; expression are also reported.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  myList.sort((person1, person2) -&gt; person1.getName().compareTo(person2.getName()));

  myList2.sort((person1, person2) -&gt; {
      int res = person1.first().compareTo(person2.first());
      if(res == 0) res = person1.second().compareTo(person2.second());
      if(res == 0) res = person1.third() - person2.third();
      return res;
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fixes are applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  myList.sort(Comparator.comparing(Person::getName));

  myList2.sort(Comparator.comparing(Person::first)
                         .thenComparing(Person::second)
                         .thenComparingInt(Person::third));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseHashCodeMethodInspection" defaultSeverity="WARNING" displayName="Standard 'hashCode()' method can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports bitwise operations that can be replaced with a call to the &lt;code&gt;Long.hashCode()&lt;/code&gt; or &lt;code&gt;Double.hashCode()&lt;/code&gt; methods.
It detects the construct &lt;code&gt;(int)(x ^ (x &gt;&gt;&gt; 32))&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is a variable of type &lt;code&gt;long&lt;/code&gt; or
the result of a previous &lt;code&gt;Double.doubleToLongBits()&lt;/code&gt; call. The replacement shortens the code, improving its readability.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int result = (int)(var ^ (var &gt;&gt;&gt; 32));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int result = Long.hashCode(var);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 8 or higher.
&lt;p&gt;&lt;small&gt;New in 2024.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticPseudoFunctionalStyleMethod" defaultSeverity="WARNING" displayName="Guava pseudo-functional call can be converted to Stream API call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of Guava pseudo-functional code when &lt;code&gt;Java Stream API&lt;/code&gt; is available.
&lt;p&gt;Though &lt;code&gt;Guava Iterable API&lt;/code&gt; provides functionality similar to &lt;code&gt;Java Streams API&lt;/code&gt;, it's slightly different and
  may miss some features.
  Especially, primitive-specialized stream variants like &lt;code&gt;IntStream&lt;/code&gt; are more performant than generic variants.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
List&amp;lt;String&amp;gt; transformedIterable = Iterables.transform(someList, someTransformFunction);//warning: Pseudo functional style code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; transformedIterable = someList.stream().map(someTransformFunction).collect(Collectors.toList());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  &lt;b&gt;Note:&lt;/b&gt; Code semantics can be changed; for example, Guava's &lt;code&gt;Iterable.transform&lt;/code&gt; produces a lazy-evaluated iterable,
  but the replacement is eager-evaluated.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CodeBlock2Expr" defaultSeverity="WARNING" displayName="Statement lambda can be replaced with expression lambda" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions with code block bodies when expression-style bodies can be used instead.
The result of the conversion is shorter and more clear.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Comparable&amp;lt;String&amp;gt; c = o -&gt; {return 0;};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Comparable&amp;lt;String&amp;gt; c = o -&gt; 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Java8ListReplaceAll" defaultSeverity="WARNING" displayName="Loop can be replaced with 'List.replaceAll()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports loops which can be collapsed into a single &lt;code&gt;List.replaceAll()&lt;/code&gt; call.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (int i = 0; i &amp;lt; strings.size(); i++) {
    String str = strings.get(i).toLowerCase();
    strings.set(i, str);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  strings.replaceAll(String::toLowerCase);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda methods in collections&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LambdaCanBeMethodCall" defaultSeverity="INFORMATION" displayName="Lambda can be replaced with method call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions which can be replaced with a call to a JDK method.
&lt;p&gt;For example, an expression &lt;code&gt;x -&amp;gt; x&lt;/code&gt; of type &lt;code&gt;Function&amp;lt;T, T&amp;gt;&lt;/code&gt;
  can be replaced with a &lt;code&gt;Function.identity()&lt;/code&gt; call.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifyForEach" defaultSeverity="INFORMATION" displayName="Simplifiable forEach() call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;forEach()&lt;/code&gt; calls that can be replaced with a more concise method or from which intermediate steps can be extracted.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; findNStrings(List&amp;lt;String&amp;gt; list, int n) {
    List&amp;lt;String&amp;gt; other = new ArrayList&amp;lt;&gt;();
    list.forEach(s -&gt; {
      if(s.length() &gt; n) other.add(s);
    });
    return other;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; findNStrings(List&amp;lt;String&amp;gt; list, int n) {
    List&amp;lt;String&amp;gt; other = list.stream()
      .filter(s -&gt; s.length() &gt; n)
      .collect(Collectors.toList());
    return other;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda methods in collections&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Convert2MethodRef" defaultSeverity="WARNING" displayName="Lambda can be replaced with method reference" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambdas that can be replaced with method references. While often it could be a matter of taste, method references are more clear
and readable compared to lambdas.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Runnable r = () -&gt; System.out.println();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Runnable r = System.out::println;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection may suggest method references even if a lambda doesn't call any method, like replacing &lt;code&gt;obj -&gt; obj != null&lt;/code&gt;
  with &lt;code&gt;Objects::nonNull&lt;/code&gt;. 
  Use the &lt;a href="settings://preferences.sourceCode.Java?Lambda%20Body"&gt;Settings | Editor | Code Style | Java | Code Generation&lt;/a&gt;
  settings to configure special method references.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the following Java features:&lt;ul&gt;&lt;li&gt;Lambda expressions&lt;/li&gt;&lt;li&gt;Method references&lt;/li&gt;&lt;/ul&gt;These features are available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="Convert2streamapi" defaultSeverity="INFORMATION" displayName="Loop can be collapsed with Stream API" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports loops which can be replaced with stream API calls using lambda expressions.
&lt;p&gt;Such a replacement changes the style from imperative to more functional and makes the code more compact.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;boolean&lt;/b&gt; check(List&amp;lt;String&gt; data) {
    &lt;b&gt;for&lt;/b&gt; (String e : data) {
      String trimmed = e.trim();
      &lt;b&gt;if&lt;/b&gt; (!trimmed.startsWith("xyz")) {
        &lt;b&gt;return&lt;/b&gt; false;
      }
    }
    return true;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;boolean&lt;/b&gt; check(List&amp;lt;String&gt; data) {
    &lt;b&gt;return&lt;/b&gt; data.stream().map(String::trim).allMatch(trimmed -&gt; trimmed.startsWith("xyz"));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Java8MapForEach" defaultSeverity="WARNING" displayName="Map.forEach() can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests replacing &lt;code&gt;for(Entry&amp;lt;?,?&amp;gt; entry : map.entrySet()) {...}&lt;/code&gt; or
&lt;code&gt;map.entrySet().forEach(entry -&amp;gt; ...)&lt;/code&gt; with &lt;code&gt;map.forEach((key, value) -&gt; ...)&lt;/code&gt;.
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void print(Map&amp;lt;String, Integer&amp;gt; map) {
    map.entrySet().forEach(entry -&gt; {
      String str = entry.getKey();
      System.out.println(str + ":" + entry.getValue());
    });
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void print(Map&amp;lt;String, Integer&amp;gt; map) {
    map.forEach((str, value) -&gt; System.out.println(str + ":" + value));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  When the &lt;b&gt;Do not report loops&lt;/b&gt; option is enabled, only &lt;code&gt;entrySet().forEach()&lt;/code&gt; cases will be reported.
  However, the quick-fix action will be available for &lt;code&gt;for&lt;/code&gt;-loops as well.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda methods in collections&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FoldExpressionIntoStream" defaultSeverity="INFORMATION" displayName="Expression can be folded into Stream chain" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions with a repeating pattern that could be replaced with &lt;i&gt;Stream API&lt;/i&gt; or a &lt;code&gt;String.join()&lt;/code&gt; call.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean allStartWith(String a, String b, String c, String d, String prefix) {
    return a.startsWith(prefix) &amp;&amp; b.startsWith(prefix) &amp;&amp; c.startsWith(prefix) &amp;&amp; d.startsWith(prefix);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean foo(String a, String b, String c, String d, String prefix) {
    return Stream.of(a, b, c, d).allMatch(s -&gt; s.startsWith(prefix));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String joinAll(String a, String b, String c, String d) {
    return a + "," + b + "," + c + "," + d;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String joinAll(String a, String b, String c, String d) {
    return String.join(",", a, b, c, d);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JavaFX" path=""><inspection shortName="JavaFxDefaultTag" defaultSeverity="WARNING" displayName="Unnecessary default tag" enabled="true" language="XML" pluginId="org.jetbrains.plugins.javaFX" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant tags in .fxml files. These tags correspond to a class property which
is declared in the @DefaultProperty class annotation, that is why they can be omitted.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaFxUnresolvedFxIdReference" defaultSeverity="WARNING" displayName="Unresolved fx:id attribute reference" enabled="true" language="XML" pluginId="org.jetbrains.plugins.javaFX" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved fx:id references. The quick-fix creates the corresponding fields.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="JavaFxResourcePropertyValue" defaultSeverity="WARNING" displayName="The value from properties file is incompatible with the attribute type" enabled="true" language="XML" pluginId="org.jetbrains.plugins.javaFX" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attribute values defined in a .properties file that do not match the type of the attribute.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="JavaFxRedundantPropertyValue" defaultSeverity="WARNING" displayName="JavaFX redundant property values" enabled="true" language="XML" pluginId="org.jetbrains.plugins.javaFX" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties in .fxml files (both attributes and tags) that have the default values and therefore are redundant.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaFxUnusedImports" defaultSeverity="WARNING" displayName="JavaFX unused imports" enabled="true" language="XML" pluginId="org.jetbrains.plugins.javaFX" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused imports in .fxml files.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaFxEventHandler" defaultSeverity="WARNING" displayName="Event handler method signature problems" enabled="true" language="XML" pluginId="org.jetbrains.plugins.javaFX" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports event handler issues, including incompatible argument types, ambiguous event handler methods, and incorrect return types.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="JavaFxColorRgb" defaultSeverity="WARNING" displayName="Color component is out of range" enabled="true" language="XML" pluginId="org.jetbrains.plugins.javaFX" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports RGB color components that are out of the valid range.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Assignment issues" path="Groovy"><inspection shortName="GroovyResultOfAssignmentUsed" defaultSeverity="WARNING" displayName="Result of assignment used" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment expressions nested inside other expressions to use the assigned value immediately.
&lt;p&gt;
  Such expressions may be confusing and violating the general design principle that a
  given construct should do precisely one thing.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyAssignmentToForLoopParameter" defaultSeverity="WARNING" displayName="Assignment to 'for' loop parameter" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments to &lt;b&gt;for&lt;/b&gt; loop parameters inside the &lt;b&gt;for&lt;/b&gt; loop body.
&lt;p&gt;While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (value in [1, 2, 3]) {
      value = 4 // warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyAssignmentToMethodParameter" defaultSeverity="WARNING" displayName="Assignment to method parameter" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment to method parameters.
&lt;p&gt;While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def m(a, b, c) {
      a = [] // warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyUncheckedAssignmentOfMemberOfRawType" defaultSeverity="WARNING" displayName="Unchecked assignment from members of raw type" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unchecked assignments from members of raw type.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List list = new ArrayList()
  List&amp;ltString&amp;gt a = &lt;b&gt;list.get(0)&lt;/b&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyAssignabilityCheck" defaultSeverity="WARNING" displayName="Incompatible type assignments" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments with incompatible types.
&lt;p&gt;Such assignments might result in various runtime exceptions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A {}
  class B {}

  // incompatible assignment
  A a = new B()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyAssignmentCanBeOperatorAssignment" defaultSeverity="INFORMATION" displayName="Assignment can be replaced with operator assignment" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments which can be replaced by an operator assignment.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a = a + b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a += b
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore conditional operators&lt;/b&gt; option to ignore &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore obscure operators&lt;/b&gt; option to ignore &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; operators.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyNestedAssignment" defaultSeverity="WARNING" displayName="Nested assignment" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment expressions nested inside other expressions.
While admirably terse, such expressions may be confusing, and violate the general design principle that a given construct
should do precisely one thing.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
a = b = 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovySillyAssignment" defaultSeverity="WARNING" displayName="Silly assignment" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments of a variable to itself.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Code migration" path="Kotlin"><inspection shortName="ContextParametersMigration" defaultSeverity="ERROR" displayName="Outdated context receivers used" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports context receivers which should be migrated to context parameters.
&lt;p&gt;
    Context receivers are superseded by context parameters starting from Kotlin 2.2.0.
    This inspection helps to migrate from context receivers to context parameters for projects
    that have enabled context receivers but have not yet migrated to context parameters syntax.
&lt;/p&gt;
&lt;p&gt;
    Example:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
context(MutableList&amp;lt;String&amp;gt;, C)
private fun foo() {
    add("new")
    bar()
    baz()
}

class C {
    fun bar() {}
}

fun C.baz() {}
&lt;/code&gt;&lt;/pre&gt;
After the migration:
&lt;pre&gt;&lt;code&gt;
context(strings: MutableList&amp;lt;String&amp;gt;, c: C)
private fun foo() {
    strings.add("new")
    c.bar()
    c.baz()
}

class C {
    fun bar() {}
}

fun C.baz() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CanConvertToMultiDollarString" defaultSeverity="WEAK WARNING" displayName="Multi-dollar interpolation can be used in string literals (available since 2.1)" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports that a string can benefit from a conversion to a version with a multi-dollar interpolation prefix.
&lt;p&gt;
An interpolation prefix may make a string easier to comprehend, since prefixed strings can use dollar literals without additional escaping.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
val jsonSchema: String = """
{
  "${'$'}id": "https://example.com/product.schema.json",
}"""
&lt;/code&gt;&lt;/pre&gt;
The quick fix converts all safely replaceable escaped dollar characters to regular dollar characters:
&lt;pre&gt;&lt;code&gt;
val jsonSchema: String = $$"""
{
  "$id": "https://example.com/product.schema.json",
}"""
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfixCallToOrdinary" defaultSeverity="INFORMATION" displayName="Infix call may be dot call" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports for infix function calls that can be replaced with dot-qualified function calls.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    1 xor 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
    1.xor(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="toString() issues" path="Java"><inspection shortName="FieldNotUsedInToString" defaultSeverity="WARNING" displayName="Field not used in 'toString()' method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields that are not used in the &lt;code&gt;toString()&lt;/code&gt; method of a class.
&lt;p&gt;Helps discover fields added after the &lt;code&gt;toString()&lt;/code&gt; method was last updated.
  The quick-fix regenerates the &lt;code&gt;toString()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;
In the &lt;b&gt;Generate | toString()&lt;/b&gt; dialog, it is possible to exclude fields from this check.
This inspection will also check for problems with getter methods if the &lt;em&gt;Enable getters in code generation&lt;/em&gt; option is enabled there.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Relevant {
    &lt;b&gt;private&lt;/b&gt; String name; // not used in toString()
    &lt;b&gt;private int&lt;/b&gt; index;
    &lt;b&gt;private int&lt;/b&gt; length;

    @Override
    &lt;b&gt;public&lt;/b&gt; String toString() {
        &lt;b&gt;return&lt;/b&gt; "Relevant{" + "index=" + index +
          ", length=" + length + '}';
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Relevant {
    &lt;b&gt;private&lt;/b&gt; String name;
    &lt;b&gt;private int&lt;/b&gt; index;
    &lt;b&gt;private int&lt;/b&gt; length;

    @Override
    &lt;b&gt;public&lt;/b&gt; String toString() {
        &lt;b&gt;return&lt;/b&gt; "Relevant{" + "name='" + name + '\'' +
          ", index=" + index + ", length=" + length + '}';
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassHasNoToStringMethod" defaultSeverity="WARNING" displayName="Class does not override 'toString()' method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes without a &lt;code&gt;toString()&lt;/code&gt; method.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 10" path="Java/Java language level migration aids"><inspection shortName="VariableTypeCanBeExplicit" defaultSeverity="INFORMATION" displayName="Variable type can be explicit" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables of the &lt;code&gt;var&lt;/code&gt; type that can be replaced with an explicit type.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var str = "Hello";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String str = "Hello";
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Local variable type inference&amp;#39;, which is available since Java 10.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantExplicitVariableType" defaultSeverity="INFORMATION" displayName="Local variable type can be omitted" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant local variable types.
&lt;p&gt;These types can be inferred from the context and thus replaced with &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(InputStream s) {
    try (InputStream in = s) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(InputStream s) {
    try (var in = s) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Local variable type inference&amp;#39;, which is available since Java 10.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Numeric issues" path="Kotlin"><inspection shortName="KotlinBigDecimalEquals" defaultSeverity="WARNING" displayName="'equals()' called on 'BigDecimal'" enabled="false" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;equals()&lt;/code&gt; calls that compare two &lt;code&gt;java.math.BigDecimal&lt;/code&gt; numbers.
This is normally a mistake, as two &lt;code&gt;java.math.BigDecimal&lt;/code&gt; numbers are only equal if
they are equal in both value and scale.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // condition is false
  val condition = BigDecimal("2.0") ==
      BigDecimal("2.00")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // condition is true
  val condition = BigDecimal("2.0").compareTo(
      BigDecimal("2.00")) == 0
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Style" path="Groovy"><inspection shortName="GrUnnecessaryPublicModifier" defaultSeverity="WARNING" displayName="Unnecessary 'public'" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary &lt;code&gt;public&lt;/code&gt; modifiers as Groovy classes and methods are &lt;code&gt;public&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Foo{
      public void bar(){
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo{
      void bar(){
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ChangeToMethod" defaultSeverity="INFORMATION" displayName="Operator invocation can be replaced with method call" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports operator invocations that can be replaced with method calls.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a + b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a.plus(b)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrUnnecessaryNonSealedModifier" defaultSeverity="WARNING" displayName="Unnecessary 'non-sealed' modifier" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary &lt;code&gt;non-sealed&lt;/code&gt; modifiers which used on methods, fields, or variables.&lt;/p&gt;
&lt;p&gt;This modifier has effect only on classes, interfaces and traits.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;non-sealed&lt;/b&gt; boolean foo() {} // modifier is unnecessary
  &lt;b&gt;non-sealed&lt;/b&gt; Object bar // modifier is unnecessary

  // modifier is required and therefore not highlighted
  &lt;b&gt;non-sealed&lt;/b&gt; class A {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrUnnecessarySealedModifier" defaultSeverity="WARNING" displayName="Unnecessary 'sealed' modifier" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary &lt;code&gt;sealed&lt;/code&gt; modifiers which used on methods, fields, or variables.&lt;/p&gt;
&lt;p&gt;This modifier has effect only on classes, interfaces and traits.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;sealed&lt;/b&gt; boolean foo() {} // modifier is unnecessary
  &lt;b&gt;sealed&lt;/b&gt; Object bar // modifier is unnecessary

  // modifier is required and therefore not highlighted
  &lt;b&gt;sealed&lt;/b&gt; class A {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrUnnecessaryDefModifier" defaultSeverity="WARNING" displayName="Unnecessary 'def'" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary &lt;code&gt;def&lt;/code&gt; modifiers when used with explicit type declaration.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;def&lt;/b&gt; boolean foo() {} // modifier is unnecessary
  &lt;b&gt;def&lt;/b&gt; Object bar // modifier is unnecessary

  // modifier is required and therefore not highlighted
  &lt;b&gt;def&lt;/b&gt; (int a, String b) = []
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrUnnecessarySemicolon" defaultSeverity="WARNING" displayName="Unnecessary semicolon" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary semicolons.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  print 2; print 3 // semicolon is required
  print 2; // semicolon is unnecessary
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyConditional" defaultSeverity="WARNING" displayName="Ternary expression" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ternary expressions.
&lt;p&gt;Some coding standards prohibit the use of the condition operator in favor of &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrUnnecessaryFinalModifier" defaultSeverity="WARNING" displayName="Unnecessary 'final'" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary &lt;code&gt;final&lt;/code&gt; modifiers when used with the record definition.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;final&lt;/b&gt; record R(int a) {} // modifier is unnecessary
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrUnnecessaryAlias" defaultSeverity="WEAK WARNING" displayName="Unnecessary import alias" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary import aliases.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import com.foo.Bar as Bar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import com.foo.Bar
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrStringStyleViolation" defaultSeverity="WEAK WARNING" displayName="String style violation" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports strings with quotation that doesn't match code style.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def hw = "Hello, world!"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def hw = 'Hello, world!'
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the fields provided below to specify code style for different kinds of strings.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="JavaStylePropertiesInvocation" defaultSeverity="INFORMATION" displayName="Java-style property access" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports properties accessed via method calls.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
      int foo
  }

  def bar = new Foo()
  print(&lt;b&gt;bar.getFoo()&lt;/b&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
      int foo
  }

  def bar = new Foo()
  print(&lt;b&gt;bar.foo&lt;/b&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ChangeToOperator" defaultSeverity="WEAK WARNING" displayName="Method call can be replaced with operator invocation" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method calls that can be replaced with operator invocations.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a.plus(b)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a + b
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Collections" path="Scala"><inspection shortName="RedundantCollectionConversion" defaultSeverity="WARNING" displayName="Redundant collection conversion" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant collection conversions.&lt;/p&gt;

&lt;p&gt;The quick-fix will remove the redundant conversions.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List(1, 2).toList
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List(1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SideEffectsInMonadicTransformation" defaultSeverity="WARNING" displayName="Side effects in a monadic transformation" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports expressions with side effects in monadic transformations
  (&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, and &lt;code&gt;filter&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Consider moving the monadic transformations to a separate &lt;code&gt;foreach&lt;/code&gt; pass.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var a = 0
  Seq(1, 2).map(a += _)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Manifest" path=""><inspection shortName="MisspelledHeader" defaultSeverity="WEAK WARNING" displayName="Unknown or misspelled header name" enabled="true" language="Manifest" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports any unknown and probably misspelled header names and provides possible variants.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingFinalNewline" defaultSeverity="ERROR" displayName="Missing final new line" enabled="true" language="Manifest" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if manifest files do not end with a final newline as required by the JAR file specification.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JUnit" path="Java"><inspection shortName="MetaAnnotationWithoutRuntimeRetention" defaultSeverity="WARNING" displayName="Test annotation without '@Retention(RUNTIME)' annotation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports annotations with a &lt;code&gt;SOURCE&lt;/code&gt; or &lt;code&gt;CLASS&lt;/code&gt; retention policy that are supposed to be used by JUnit 5.
Such annotations are not available at runtime and most probably their retention policy should be fixed to be accessible through reflection.
&lt;p&gt;Note that if the retention policy is not specified, then the default retention policy &lt;code&gt;CLASS&lt;/code&gt; is used.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Testable
  public @interface UnitTest {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Retention(RetentionPolicy.RUNTIME)
  @Testable
  public @interface UnitTest {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;!--&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;--&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java interop issues" path="Kotlin"><inspection shortName="HasPlatformType" defaultSeverity="WEAK WARNING" displayName="Function or property has platform type" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports functions and properties that have a platform type.
&lt;p&gt;To prevent unexpected errors, the type should be declared explicitly.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() = java.lang.String.valueOf(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix allows you to specify the return type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(): String = java.lang.String.valueOf(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="JavaDefaultMethodsNotOverriddenByDelegation" defaultSeverity="WARNING" displayName="Java default methods are not overridden by delegation" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
    Reports delegation when the delegate object is an instance of a class that overrides (in the case of
    &lt;code&gt;final&lt;/code&gt; and &lt;code&gt;sealed&lt;/code&gt; classes) or may override (in the case of &lt;code&gt;open&lt;/code&gt;
    and &lt;code&gt;abstract&lt;/code&gt; classes) Java default methods.
&lt;/p&gt;
&lt;p&gt;
    By design, Kotlin delegation does not override Java default methods, which can lead to subtle bugs,
    especially in cases of deep inheritance hierarchies.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
// Base.java:
public interface Base {
  default void print() {
    System.out.println("Base");
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
// BaseImpl.kt:
class BaseImpl : Base {
  override fun print() {
    println("BaseImpl")
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
// Main.kt:
fun main() {
  val inherited = BaseImpl()
  val delegated = object : Base by inherited {}
  inherited.print() // Outputs: BaseImpl
  delegated.print() // Outputs: Base
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
    Developers typically expect that all methods, including default methods overridden in the delegate, are
    forwarded. Instead, Java default methods are called, which can lead to unexpected results.
&lt;/p&gt;
&lt;p&gt;
    One quick-fix overrides Java default methods by delegating their implementation to the delegate object:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
// Main.kt:
fun main() {
  val inherited = BaseImpl()
  val delegated = object : Base by inherited {
    override fun print() {
      inherited.print()
    }
  }
  inherited.print() // Outputs: BaseImpl
  delegated.print() // Outputs: BaseImpl
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
    Another quick-fix overrides Java default methods by explicitly delegating their implementation to the
    superclass:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
// Main.kt:
fun main() {
  val inherited = BaseImpl()
  val delegated = object : Base by inherited {
    override fun print() {
      super.print()
    }
  }
  inherited.print() // Outputs: BaseImpl
  delegated.print() // Outputs: Base
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2025.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageDirectoryMismatch" defaultSeverity="WEAK WARNING" displayName="Package name does not match containing directory" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;package&lt;/code&gt; directives that do not match the location of the file.
&lt;p&gt;
    When applying fixes, "Move refactoring" defaults are used to update usages of changed declarations, namely:
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;"Search in comments and strings"&lt;/li&gt;
    &lt;li&gt;"Search for text occurrences"&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Probable bugs" path="Gradle"><inspection shortName="DependencyNotationArgument" defaultSeverity="WARNING" displayName="Unrecognized dependency notation" enabled="true" language="UAST" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Detects incorrect dependency notations. &lt;/p&gt;
  The following types/formats are supported by Gradle:
  &lt;ul&gt;
  &lt;li&gt; Instances of &lt;code&gt;Dependency&lt;/code&gt;; &lt;/li&gt;
  &lt;li&gt; &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;CharSequence&lt;/code&gt; values, for example &lt;code&gt;'org.gradle:gradle-core:1.0'&lt;/code&gt;; &lt;/li&gt;
  &lt;li&gt; Maps, for example &lt;code&gt;[group: 'org.gradle', name: 'gradle-core', version: '1.0']&lt;/code&gt;; &lt;/li&gt;
  &lt;li&gt; FileCollections, for example &lt;code&gt;files('some.jar', 'someOther.jar')&lt;/code&gt;; &lt;/li&gt;
  &lt;li&gt; Projects, for example &lt;code&gt;project(':some:project:path')&lt;/code&gt;; &lt;/li&gt;
  &lt;li&gt; &lt;code&gt;ClassPathNotation&lt;/code&gt;, for example &lt;code&gt;gradleApi()&lt;/code&gt;; &lt;/li&gt;
  &lt;li&gt; Lists of dependency notations, for example &lt;code&gt;['org.gradle:gradle-core:1.0']&lt;/code&gt;; &lt;/li&gt;
  &lt;li&gt; (Gradle 7.0+) &lt;a href="https://docs.gradle.org/current/userguide/platforms.html"&gt;Version catalog accessors&lt;/a&gt;, for example &lt;code&gt;libs.groovy.core&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
  &lt;a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html#sec:dependency-types"&gt;See Gradle documentation&lt;/a&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
dependencies {
  implementation(1) // reports '1'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultipleRepositoryUrls" defaultSeverity="WARNING" displayName="Multiple repository urls" enabled="true" language="Groovy" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usage of multiple URLs per repository (maven or ivy) block.
The problem is that only one URL can be picked up for the repository, the other URLs will be ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JCenterRepository" defaultSeverity="WARNING" displayName="Builds will no longer be able to resolve artifacts from JCenter after February 1st, 2022" enabled="true" language="Groovy" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects usages of the JCenter repository to resolve dependencies.
Builds will no longer be able to resolve artifacts from JCenter after February 1st, 2022.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForeignDelegate" defaultSeverity="WEAK WARNING" displayName="Possibly misplaced call to Gradle method" enabled="true" language="UAST" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Detects possibly misplaced calls to Gradle methods.&lt;/p&gt;
  Gradle buildscripts comprise a lot of nested closures, making the code structure similar to a markup language.
  Due to the behavior of DSL languages, the methods that you can write in the outer closures are also available in the inner ones.
  Such methods may have no meaning when written outside their scope. &lt;br&gt;
  Sometimes it may be hard to detect this situation.
  This inspection aims to detect such methods.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
repositories {
  // the delegate of 'repositories' has method 'exclusiveContent', which can be written here
  maven {
    // the delegate of 'maven' has method 'content', which can be written here
    // but 'exclusiveContent' is also available
    exclusiveContent {} // reports 'exclusiveContent'
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BintrayPublishingPlugin" defaultSeverity="WARNING" displayName="Bintray publishing plugin may stop working on May 1st, 2021" enabled="true" language="Groovy" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Detects usages of Gradle plugin &lt;code&gt;com.jfrog.bintray&lt;/code&gt;.
  The plugin is used for publishing build results to Bintray.
  Publishing to
  &lt;a href="https://www.jfrog.com/confluence/display/BT/Welcome+to+JFrog+Bintray"&gt;Bintray&lt;/a&gt; service is disabled.
  &lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Concurrency annotation issues" path="Java"><inspection shortName="InstanceGuardedByStatic" defaultSeverity="WARNING" displayName="Instance member guarded by static field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;@GuardedBy&lt;/code&gt; annotations on instance fields or methods
in which the guard is a &lt;code&gt;static&lt;/code&gt; field. Guarding a non-static by a static may result in excessive lock contention,
as access to each locked field in any object instance will prevent simultaneous access to that field in every object instance.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    private static ReadWriteLock lock = new ReentrantReadWriteLock(); //static guarding field
    private Object state;

    @GuardedBy("lock")
    public void bar() {
        state = new Object();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Supported &lt;code&gt;@GuardedBy&lt;/code&gt; annotations are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;net.jcip.annotations.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.annotation.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.apache.http.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.android.annotations.concurrency.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;androidx.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.google.errorprone.annotations.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonFinalGuard" defaultSeverity="WARNING" displayName="Non-final '@GuardedBy' field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;@GuardedBy&lt;/code&gt; annotations in which the guarding field
is not &lt;code&gt;final&lt;/code&gt;.
&lt;p&gt;Guarding on a non-final field may result in unexpected race conditions, as locks will
  be held on the value of the field (which may change), rather than the field itself.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    private ReadWriteLock lock = new ReentrantReadWriteLock(); //not final guarding field
    private Object state;

    @GuardedBy("lock")
    public void bar() {
        state = new Object();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Supported &lt;code&gt;@GuardedBy&lt;/code&gt; annotations are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;net.jcip.annotations.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.annotation.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.apache.http.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.android.annotations.concurrency.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;androidx.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.google.errorprone.annotations.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonFinalFieldInImmutable" defaultSeverity="WARNING" displayName="Non-final field in '@Immutable' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any non-final field in a class with the &lt;code&gt;@Immutable&lt;/code&gt; annotation.
This violates the contract of the &lt;code&gt;@Immutable&lt;/code&gt; annotation.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import javax.annotation.concurrent.Immutable;
  @Immutable
  class Foo {
    String bar = "foo";
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Supported &lt;code&gt;@GuardedBy&lt;/code&gt; annotations are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;net.jcip.annotations.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.annotation.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.apache.http.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.android.annotations.concurrency.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;androidx.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.google.errorprone.annotations.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnknownGuard" defaultSeverity="WARNING" displayName="Unknown '@GuardedBy' field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;@GuardedBy&lt;/code&gt; annotations in which the specified guarding field is unknown.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    private Object state;

    @GuardedBy("lock") //unknown guard reference
    public void bar() {
        state = new Object();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Supported &lt;code&gt;@GuardedBy&lt;/code&gt; annotations are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;net.jcip.annotations.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.annotation.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.apache.http.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.android.annotations.concurrency.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;androidx.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.google.errorprone.annotations.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticGuardedByInstance" defaultSeverity="WARNING" displayName="Static member guarded by instance field or this" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;@GuardedBy&lt;/code&gt; annotations on &lt;code&gt;static&lt;/code&gt; fields or methods in which the guard is either a non-static field or
&lt;code&gt;this&lt;/code&gt;.
&lt;p&gt;Guarding a static element with a non-static element may result in
  excessive concurrency, multiple threads may be able to access the guarded field simultaneously by locking in different object contexts.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    private ReadWriteLock lock = new ReentrantReadWriteLock();

    @GuardedBy("lock")
    public static void bar() {
        // ...
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Supported &lt;code&gt;@GuardedBy&lt;/code&gt; annotations are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;net.jcip.annotations.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.annotation.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.apache.http.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.android.annotations.concurrency.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;androidx.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.google.errorprone.annotations.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldAccessNotGuarded" defaultSeverity="WARNING" displayName="Unguarded field access or method call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports accesses of fields declared as &lt;code&gt;@GuardedBy&lt;/code&gt; that are not guarded by an appropriate synchronization structure.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    @GuardedBy("this")
    void x() {
        notify();
    }
    void y() {
        x(); // unguarded method call
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Supported &lt;code&gt;@GuardedBy&lt;/code&gt; annotations are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;net.jcip.annotations.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.annotation.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.apache.http.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.android.annotations.concurrency.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;androidx.annotation.GuardedBy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.google.errorprone.annotations.concurrent.GuardedBy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Packaging issues" path="Java"><inspection shortName="ClassUnconnectedToPackage" defaultSeverity="WARNING" displayName="Class independent of its package" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports classes that don't depend on any other class in their package and are not a dependency for any other class in their package.
Such classes indicate ad-hoc or incoherent packaging strategies and often may be profitably moved.
Classes that are the only class in their package are not reported.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageWithTooFewClasses" defaultSeverity="WARNING" displayName="Package with too few classes" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports packages that contain fewer classes than the specified minimum.
&lt;p&gt;Packages which contain subpackages are not reported. Overly small packages may indicate a fragmented design.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Minimum number of classes&lt;/b&gt; field to specify the minimum allowed number of classes in a package.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassOnlyUsedInOnePackage" defaultSeverity="WARNING" displayName="Class only used from one other package" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports classes that don't depend on any other class in their package, depend on classes from another package, and are themselves a dependency
only for classes from this other package.
Consider moving such classes to the package on which they depend.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DisjointPackage" defaultSeverity="WARNING" displayName="Package with disjoint dependency graph" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports packages whose classes can be separated into mutually independent subsets.
&lt;p&gt;Such disjoint packages indicate ad-hoc packaging or a lack of conceptual cohesion.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExceptionPackage" defaultSeverity="WARNING" displayName="Exception package" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports packages that only contain classes that extend &lt;code&gt;java.lang.Throwable&lt;/code&gt;, either directly or indirectly.
  &lt;p&gt;Although exceptions usually don't depend on other classes for their implementation, they are normally not used separately.
    It is often a better design to locate exceptions in the same package as the classes that use them.&lt;/p&gt;
  &lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageInMultipleModules" defaultSeverity="WARNING" displayName="Package with classes in multiple modules" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports non-empty packages that are present in several modules.
When packages are contained in several modules, it is very easy to create a class with the same name in two modules.
A module which depends on these modules will see a conflict if it tries to use such a class.
The Java Platform Module System disallows packages contained in more than one module (also called &lt;em&gt;split packages&lt;/em&gt;)
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageWithTooManyClasses" defaultSeverity="WARNING" displayName="Package with too many classes" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports packages that contain too many classes.
&lt;p&gt;Overly large packages may indicate a lack of design clarity.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Maximum number of classes&lt;/b&gt; field to specify the maximum allowed number of classes in a package.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Qodana" path=""><inspection shortName="CyclomaticComplexityInspection" defaultSeverity="WARNING" displayName="Code metrics" enabled="false" language="" pluginId="org.intellij.qodana" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Calculates cyclomatic complexity.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Imports" path="Java"><inspection shortName="SingleClassImport" defaultSeverity="WARNING" displayName="Single class import" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;import&lt;/code&gt; statements that import single classes (as opposed to entire packages).
&lt;p&gt;Some coding standards prohibit such &lt;code&gt;import&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;
  You can configure IntelliJ IDEA to detect and fix such statements with its &lt;b&gt;Optimize Imports&lt;/b&gt; command. Go to
  &lt;a href="settings://preferences.sourceCode.Java?Use%20single%20class%20import"&gt;Settings | Editor | Code Style | Java | Imports&lt;/a&gt;
  and clear the &lt;b&gt;Use single class import&lt;/b&gt; checkbox. Thus this inspection is mostly useful for
  offline reporting on code bases that you don't intend to change.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OnDemandImport" defaultSeverity="WARNING" displayName="'*' import" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;code&gt;import&lt;/code&gt; statements that cover entire packages ('* imports').
&lt;p&gt;Some coding standards prohibit such &lt;code&gt;import&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;
  You can configure IntelliJ IDEA to detect and fix such statements with its &lt;b&gt;Optimize Imports&lt;/b&gt;
  command. Go to &lt;a href="settings://preferences.sourceCode.Java?Use%20single%20class%20import"&gt;Settings | Editor | Code Style | Java | Imports&lt;/a&gt;,
  make sure that the &lt;b&gt;Use single class import&lt;/b&gt; option is enabled, and specify values in the
  &lt;b&gt;Class count to use import with '*'&lt;/b&gt; and &lt;b&gt;Names count to use static import with '*'&lt;/b&gt; fields.
  Thus this inspection is mostly useful for offline reporting on code bases that you don't
  intend to change.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UNUSED_IMPORT" defaultSeverity="WARNING" displayName="Unused import" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;import&lt;/code&gt; statements.
&lt;p&gt;Regular &lt;code&gt;import&lt;/code&gt; statements are unnecessary when not using imported classes and packages in the source file.
The same applies to imported &lt;code&gt;static&lt;/code&gt; fields and methods that aren't used in the source file.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util.ArrayList;
  public class Example {
    public static void main(String[] args) {
      System.out.println("Hello World!");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:
&lt;pre&gt;&lt;code&gt;
  public class Example {
    public static void main(String[] args) {
      System.out.println("Hello World!");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SamePackageImport" defaultSeverity="WARNING" displayName="Unnecessary import from the same package" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;import&lt;/code&gt; statements that refer to the same package as the
containing file.
&lt;p&gt;
  Same-package files are always implicitly imported, so such &lt;code&gt;import&lt;/code&gt;
  statements are redundant and confusing.
&lt;/p&gt;
&lt;p&gt;
  Since IntelliJ IDEA can automatically detect and fix such statements with its &lt;b&gt;Optimize Imports&lt;/b&gt;
  command, this inspection is mostly useful for offline reporting on code bases that you
  don't intend to change.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticImportCanBeUsed" defaultSeverity="WARNING" displayName="Static import can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports qualifiers, which can be replaced with &lt;code&gt;on-demand import static&lt;/code&gt; statements.
The list of classes that will be checked can be configured in
&lt;a href="settings://editor.preferences.import"&gt;Settings | Editor | General | Auto Import | Java | Include auto-import of static members in
  completion&lt;/a&gt;
&lt;/body&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2025.1&lt;/small&gt;&lt;/p&gt;
&lt;/html&gt;</inspection><inspection shortName="MISSORTED_IMPORTS" defaultSeverity="INFORMATION" displayName="Missorted imports" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;import&lt;/code&gt; statements which are not arranged according to the current code style (see Settings|Editor|Code Style).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util.List;
  import java.util.ArrayList;

  public class Example {
    List list = new ArrayList();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the "Optimize Imports" quick fix is applied:
&lt;pre&gt;&lt;code&gt;
  import java.util.ArrayList;
  import java.util.List;

  public class Example {
    List list = new ArrayList();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticImport" defaultSeverity="WARNING" displayName="Static import" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;import static&lt;/code&gt; statements.
&lt;p&gt;Such &lt;code&gt;import&lt;/code&gt; statements are not supported under Java 1.4 or earlier JVMs.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the table below to specify the classes that will be ignored by the inspection when used in an &lt;code&gt;import static&lt;/code&gt;
    statement.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore single field static imports&lt;/b&gt; checkbox to ignore single-field &lt;code&gt;import static&lt;/code&gt; statements.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore single method static imports&lt;/b&gt; checkbox to ignore single-method &lt;code&gt;import static&lt;/code&gt; statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaLangImport" defaultSeverity="WARNING" displayName="Unnecessary import from the 'java.lang' package" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;import&lt;/code&gt; statements that refer to the &lt;code&gt;java.lang&lt;/code&gt; package.
&lt;p&gt;
  &lt;code&gt;java.lang&lt;/code&gt; classes are always implicitly imported, so such import statements are
  redundant and confusing.
&lt;/p&gt;
&lt;p&gt;
  Since IntelliJ IDEA can automatically detect and fix such statements with its &lt;b&gt;Optimize Imports&lt;/b&gt; command, this inspection is mostly useful for offline reporting on code bases that you don't intend to change.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Markdown" path=""><inspection shortName="MarkdownUnresolvedFileReference" defaultSeverity="WARNING" displayName="Unresolved file references" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownUnresolvedLinkLabel" defaultSeverity="WARNING" displayName="Unresolved link label" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved link labels in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownIncorrectTableFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect table formatting" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table is correctly formatted.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownIncorrectlyNumberedListItem" defaultSeverity="WARNING" displayName="Incorrectly numbered list item" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Ordered list items are expected to have straight numeration starting from 1.&lt;/p&gt;
&lt;p&gt;The motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; element for such list, that will number items continuously from 1.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownNoTableBorders" defaultSeverity="WARNING" displayName="Table doesn't have side borders" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table has correct side borders.
For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownLinkDestinationWithSpaces" defaultSeverity="WARNING" displayName="Links should not contain spaces" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
To ensure consistency between different tools, file links should not contain spaces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix replaces spaces with their url-encoded equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some%20file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownUnresolvedHeaderReference" defaultSeverity="WARNING" displayName="Unresolved header reference" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved header references in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownOutdatedTableOfContents" defaultSeverity="WARNING" displayName="Outdated table of contents section" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if a particular table of contents section corresponds to the actual structure of the document.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="DotEnv" path=""><inspection shortName="DotEnvSpaceInsideNonQuotedInspection" defaultSeverity="WARNING" displayName="Space inside non-quoted value" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports spaces inside non-quoted values. Some .env libraries ignore everything after first space.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UndefinedNestedVariableInspection" defaultSeverity="WARNING" displayName="Reference to nested variable ''{0}'' is undefined" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects instances where nested variables in `.env` files are accessed without being defined or
initialized elsewhere within the project's scope. It ensures proper handling of undefined nested
variables to prevent misconfigurations or runtime errors.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvSpaceAroundSeparatorInspection" defaultSeverity="WARNING" displayName="Extra spaces surrounding '='" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports spaces surrounding separator.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyNestedVariableInspection" defaultSeverity="WARNING" displayName="Reference to variable is empty" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights instances where a nested variable in a `.env` file is defined but left empty
or blank, helping developers identify potentially problematic or incomplete configurations.
&lt;p&gt;
    This inspection is particularly useful for ensuring the correctness and completeness of environment variable files. Detecting empty
    nested variables helps avoid runtime issues caused by misconfigurations.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvLeadingCharacterInspection" defaultSeverity="WARNING" displayName="Invalid leading character" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports keys with invalid leading character in .env files. Only A-Z and '_' are allowed as first char of a key.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvTrailingWhitespaceInspection" defaultSeverity="WARNING" displayName="Value has trailing whitespace" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports trailing whitespaces.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedVariableOutsideDoubleQuotesInspection" defaultSeverity="WARNING" displayName="Nested variables must not appear outside double quotes" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects instances where nested variables are used outside of double quotes in `.env` files
and might not be parsed correctly. This inspection ensures that nested variables are properly
enclosed to avoid configuration issues.
&lt;p&gt;
    This inspection helps maintain correct syntax in `.env` files by enforcing the use of double
    quotes for nested variables, preventing unexpected behavior during variable evaluation.
&lt;/p&gt;
&lt;p&gt;Quick Fix: The inspection provides a quick fix to automatically enclose the nested variable
    within double quotes. Click the provided quick fix to resolve the issue automatically.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvExtraBlankLineInspection" defaultSeverity="WARNING" displayName="Extra blank line" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports extra blank lines in .env files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvDuplicateKeyInspection" defaultSeverity="WARNING" displayName="Duplicate keys" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate keys in .env files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvIncorrectDelimiterInspection" defaultSeverity="WARNING" displayName="Incorrect delimiter" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect delimiter in .env files ('-' instead of'_').
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvLowercaseKeyInspection" defaultSeverity="WARNING" displayName="Key uses lowercase characters" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="251.23774.318" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports keys, which use lowercase chars. Keys should be written in uppercase.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Initialization" path="Java"><inspection shortName="OverriddenMethodCallDuringObjectConstruction" defaultSeverity="WARNING" displayName="Overridden method called during object construction" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to overridden methods of the current class during object construction.
This happens if an object construction is inside:
&lt;ul&gt;
  &lt;li&gt;A constructor&lt;/li&gt;
  &lt;li&gt;A non-static instance initializer&lt;/li&gt;
  &lt;li&gt;A non-static field initializer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;clone()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;readObject()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;readObjectNoData()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such calls may result in subtle bugs, as the object is not guaranteed to be initialized before the method call occurs.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class Parent {
    void someMethod() { }
  }

  class Child extends Parent {
    Child() {
      someMethod();
    }

    @Override
    void someMethod() { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection shares its functionality with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;b&gt;Abstract method called during object construction&lt;/b&gt; inspection&lt;/li&gt;
  &lt;li&gt;The &lt;b&gt;Overridable method called during object construction&lt;/b&gt; inspection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only one inspection should be enabled at the same time to prevent duplicate warnings.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverridableMethodCallDuringObjectConstruction" defaultSeverity="WARNING" displayName="Overridable method called during object construction" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to overridable methods of the current class during object construction.
&lt;p&gt;A method is called during object construction if it is inside a:
&lt;ul&gt;
  &lt;li&gt;Constructor&lt;/li&gt;
  &lt;li&gt;Non-static instance initializer&lt;/li&gt;
  &lt;li&gt;Non-static field initializer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;clone()&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;readObject()&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;readObjectNoData()&lt;/code&gt; method&lt;/li&gt;
&lt;p&gt;Methods are overridable if they are not declared as &lt;code&gt;final&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt;.
  Package-local methods are considered safe, even though they are overridable. Such calls may result in subtle bugs,
  as object initialization may happen before the method call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {
    void someMethod() { }
  }

  class Child extends Parent {
    Child() {
      someMethod();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
  &lt;p&gt;This inspection shares the functionality with the following inspections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Abstract method called during object construction&lt;/li&gt;
  &lt;li&gt;Overridden method called during object construction&lt;/li&gt;
&lt;/ul&gt;
  &lt;p&gt;Only one inspection should be enabled at once to prevent warning duplication.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticVariableInitialization" defaultSeverity="WARNING" displayName="Static field may not be initialized" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;static&lt;/code&gt; variables that may be uninitialized upon class initialization.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    public static int bar;

    static { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report &lt;code&gt;static&lt;/code&gt; variables as uninitialized. Variables
  reported as initialized will always be initialized.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore primitive fields&lt;/b&gt; option to ignore uninitialized primitive fields.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstanceVariableUninitializedUse" defaultSeverity="WARNING" displayName="Instance field used before initialization" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instance variables that are read before initialization.
&lt;p&gt;The inspection ignores equality checks with &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    int bar;

    Foo() {
      System.out.println(bar);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables
  reported as initialized will always be initialized.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore if annotated by&lt;/b&gt; option to specify special annotations. The inspection will ignore fields
  annotated with one of these annotations.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore primitive fields&lt;/b&gt; option to ignore uninitialized primitive fields.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="NonThreadSafeLazyInitialization" defaultSeverity="WARNING" displayName="Unsafe lazy initialization of 'static' field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;static&lt;/code&gt; variables that are lazily initialized in a non-thread-safe manner.
&lt;p&gt;Lazy initialization of &lt;code&gt;static&lt;/code&gt; variables should be done with an appropriate synchronization construct
  to prevent different threads from performing conflicting initialization.&lt;/p&gt;
&lt;p&gt;When applicable, a quick-fix, which introduces the
&lt;a href="https://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom"&gt;lazy initialization holder class idiom&lt;/a&gt;, is suggested.
  This idiom makes use of the fact that the JVM guarantees that a class will not be initialized until it is used.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
    private static List&amp;lt;String&amp;gt; list;

    public List&amp;lt;String&amp;gt; getList() {
      if (list == null) {
        list = List.of("one", "two", "tree");
      }
      return list;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
    private static final class ListHolder {
      static final List&amp;lt;String&amp;gt; list = List.of("one", "two", "tree");
    }

    public List&amp;lt;String&amp;gt; getList() {
      return ListHolder.list;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbstractMethodCallInConstructor" defaultSeverity="WARNING" displayName="Abstract method called during object construction" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;abstract&lt;/code&gt; methods of the current class during object construction.
&lt;p&gt;A method is called during object construction if it is inside a:
&lt;ul&gt;
  &lt;li&gt;Constructor&lt;/li&gt;
  &lt;li&gt;Non-static instance initializer&lt;/li&gt;
  &lt;li&gt;Non-static field initializer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;clone()&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;readObject()&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;readObjectNoData()&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such calls may result in subtle bugs, as object initialization may happen before the method call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class Parent {
    abstract void abstractMethod();
  }

  class Child extends Parent {
    Child() {
      abstractMethod();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection shares the functionality with the following inspections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Overridable method called during object construction&lt;/li&gt;
  &lt;li&gt;Overridden method called during object construction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only one inspection should be enabled at once to prevent warning duplication.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstanceVariableInitialization" defaultSeverity="WARNING" displayName="Instance field may not be initialized" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instance variables that may be uninitialized upon object initialization.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    public int bar;

    static { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables
  reported as initialized will always be initialized.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore primitive fields&lt;/b&gt; option to ignore uninitialized primitive fields.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DoubleBraceInitialization" defaultSeverity="INFORMATION" displayName="Double brace initialization" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;a href="https://www.c2.com/cgi/wiki?DoubleBraceInitialization"&gt;Double Brace Initialization&lt;/a&gt;.
&lt;p&gt;Compared to regular initialization, double brace initialization provides worse performance since it requires loading an
  additional class.&lt;/p&gt;
&lt;p&gt;It may also cause failure of &lt;code&gt;equals()&lt;/code&gt; comparisons if the &lt;code&gt;equals()&lt;/code&gt; method doesn't accept subclasses as
  parameters.&lt;/p&gt;
&lt;p&gt;Double brace initialization may cause memory leaks when used in a non-static context. This is because it defines an anonymous class
  that will reference the surrounding object, when compiled with javac from before Java 18.&lt;/p&gt;
&lt;p&gt;In addition, before Java 9, double brace initialization couldn't be combined with the diamond operator since it was incompatible
  with anonymous classes.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;() {{
    add(1);
    add(2);
  }};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
  list.add(1);
  list.add(2);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonFinalStaticVariableUsedInClassInitialization" defaultSeverity="WARNING" displayName="Non-final static field is used during class initialization" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the use of non-&lt;code&gt;final&lt;/code&gt; &lt;code&gt;static&lt;/code&gt; variables during class initialization.
&lt;p&gt;In such cases, the code semantics may become dependent on the class creation order. Additionally, such cases may lead to the use of
  variables before their initialization, and generally cause difficult and confusing bugs.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    public static int bar = 0;

    static {
      System.out.println(bar);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticVariableUninitializedUse" defaultSeverity="WARNING" displayName="Static field used before initialization" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;static&lt;/code&gt; variables that are read before initialization.
&lt;p&gt;The inspection ignores equality checks with &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    public static int bar;

    public static void main(String[] args) {
      System.out.println(bar);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report &lt;code&gt;static&lt;/code&gt; variables as uninitialized. Variables
  reported as initialized will always be initialized.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore primitive fields&lt;/b&gt; option to ignore uninitialized primitive fields.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ThisEscapedInConstructor" defaultSeverity="WARNING" displayName="'this' reference escaped in object construction" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible escapes of &lt;code&gt;this&lt;/code&gt; during the object initialization. The escapes occur when &lt;code&gt;this&lt;/code&gt; is used as a method argument
or an object of assignment in a constructor or initializer. Such escapes may result in subtle bugs, as the object is now available in the
context where it is not guaranteed to be initialized.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    {
      System.out.println(this);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Redundant definitions" path="Java/Lombok"><inspection shortName="RedundantSlf4jDefinition" defaultSeverity="WARNING" displayName="@Slf4j" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports explicitly defined &lt;em&gt;Slf4j&lt;/em&gt; Loggers. The &lt;code&gt;@Slf4j&lt;/code&gt; annotation can be used instead.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Gradle" path="Kotlin/Migration"><inspection shortName="KotlinOptionsToCompilerOptions" defaultSeverity="WARNING" displayName="Use of deprecated 'kotlinOptions' DSL" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of the deprecated &lt;code&gt;kotlinOptions&lt;/code&gt; DSL in Gradle &lt;code&gt;.kts&lt;/code&gt; build scripts.
&lt;p&gt;
    The &lt;code&gt;kotlinOptions&lt;/code&gt; DSL was deprecated in Kotlin 2.0.
    The inspection helps migrate from &lt;code&gt;kotlinOptions&lt;/code&gt; to &lt;code&gt;compilerOptions&lt;/code&gt;.
    It also changes the types of several
    &lt;a href="https://kotl.in/types-for-kgp-compiler-options"&gt;options that use the new types&lt;/a&gt; instead of the &lt;code&gt;String&lt;/code&gt; type.
&lt;/p&gt;
&lt;p&gt;
    Example for the &lt;code&gt;KotlinCompile&lt;/code&gt; task:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
val compileKotlin: KotlinCompile by tasks
compileKotlin.kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs = listOf("-module-name", "my_module_name")
    apiVersion = "1.9"
}

//OR

tasks.withType&lt;KotlinCompile&gt; {
    kotlinOptions {
        freeCompilerArgs += listOf("-module-name", "my_module_name")
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The inspection also adds imports for options with changed types:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.dsl.KotlinVersion

...

val compileKotlin: KotlinCompile by tasks
compileKotlin.compilerOptions {
    jvmTarget.set(JvmTarget.JVM_1_8)
    freeCompilerArgs.set(listOf("-module-name", "my_module_name"))
    apiVersion.set(KotlinVersion.KOTLIN_1_9)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
    Example for the &lt;code&gt;Kotlin2JsCompile&lt;/code&gt; task:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
val compileKotlin: Kotlin2JsCompile by tasks
compileKotlin.kotlinOptions {
    moduleKind = "commonjs"
    sourceMapEmbedSources = "inlining"
    sourceMapNamesPolicy = "fully-qualified-names"
    main = "noCall"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the inspection is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import org.jetbrains.kotlin.gradle.dsl.JsMainFunctionExecutionMode
import org.jetbrains.kotlin.gradle.dsl.JsModuleKind
import org.jetbrains.kotlin.gradle.dsl.JsSourceMapEmbedMode
import org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy

...

val compileKotlin: Kotlin2JsCompile by tasks
compileKotlin.compilerOptions {
    moduleKind.set(JsModuleKind.MODULE_COMMONJS)
    sourceMapEmbedSources.set(JsSourceMapEmbedMode.SOURCE_MAP_SOURCE_CONTENT_INLINING)
    sourceMapNamesPolicy.set(JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES)
    main.set(JsMainFunctionExecutionMode.NO_CALL)
}
&lt;/code&gt;&lt;/pre&gt;&lt;!-- tooltip end --&gt;</inspection><inspection shortName="GradleKotlinxCoroutinesDeprecation" defaultSeverity="ERROR" displayName="Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Gradle" enabled="false" language="Groovy" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;kotlinx.coroutines&lt;/code&gt; library dependencies in Gradle that should be updated to be compatible with Kotlin 1.3+.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  dependencies {
      implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.0.1'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix changes the &lt;code&gt;kotlinx.coroutines&lt;/code&gt; library version to a compatible with Kotlin 1.3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  dependencies {
      implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.27.0-eap13'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Syntactic simplification" path="Scala"><inspection shortName="RedundantNewCaseClass" defaultSeverity="WARNING" displayName="Redundant new on case class" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html xmlns="http://www.w3.org/1999/html"&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;new&lt;/code&gt; used to instantiate case classes and suggests removing it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;apply&lt;/code&gt; method is automatically provided for case classes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  case class Book(isbn: String)
  val guide = new Book("978-0345391803")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  case class Book(isbn: String)
  val guide = Book("978-0345391803")
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaUnnecessarySemicolon" defaultSeverity="WARNING" displayName="Scala unnecessary semicolon inspection" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports and removes unnecessary semicolons.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  val x = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionTupleSyntacticSugar" defaultSeverity="WEAK WARNING" displayName="Syntactic sugar" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;&lt;p&gt;Reports explicit references to FunctionN and TupleN that could be replaced with
  syntactic sugar.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val func: Function1[Int, Int] =
    a =&gt; a + 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val func: (Int) =&gt; Int =
    a =&gt; a + 4
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RemoveRedundantReturn" defaultSeverity="WARNING" displayName="Redundant return" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last statement in a method is automatically returned, the use of the &lt;code&gt;return&lt;/code&gt; keyword is redundant in this case.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test: Int = {
    return 3
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test: Int = {
    3
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantDefaultArgument" defaultSeverity="WARNING" displayName="Argument duplicates corresponding parameter default value" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports arguments that have the same value as the default ones.&lt;/p&gt;

&lt;p&gt;The quick-fix will remove the redundant conversions.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def f(x: Int, y: Int = 0, z: Int) {}
  f(1, y = 0, z = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def f(x: Int, y: Int = 0, z: Int) {}
  f(1, z = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostfixUnaryOperation" defaultSeverity="WARNING" displayName="Postfix unary operation" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports non-prefix calls to &lt;code&gt;unary_!&lt;/code&gt;, &lt;code&gt;unary_~&lt;/code&gt;, and so on. Suggests replacing them with the prefix
  operator.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x = true.unary_!;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x = !true
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ConvertibleToMethodValue" defaultSeverity="WARNING" displayName="Anonymous function convertible to a method value" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports anonymous functions that can be eta expanded and also reports placeholders
  that can be removed from eta-expansions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def f(x: Any, y: Int): Unit = ()
  val x = f(_, _)
  val y: (Int, Int) =&gt; Unit = f _
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def f(x: Any, y: Int): Unit = ()
  val x = f _
  val y: (Int, Int) =&gt; Unit = f
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AppliedTypeLambdaCanBeSimplified" defaultSeverity="WARNING" displayName="Applied Type Lambda can be simplified" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;&lt;p&gt;Reports types that could be simplified.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test: ({type l[a] = Either[String, a]})#l[Int] = ???
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test: Either[String, Int] = ???
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java language level issues" path="Java"><inspection shortName="EnumClass" defaultSeverity="WARNING" displayName="Enumerated class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;enum&lt;/b&gt; classes.
Such statements are not supported in Java 1.4 and earlier JVM.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForwardCompatibility" defaultSeverity="WARNING" displayName="Forward compatibility" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Java code constructs that may fail to compile in future Java versions.
&lt;p&gt;The following problems are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Uses of &lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; as an identifier&lt;/li&gt;
  &lt;li&gt;Uses of the &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt;, or &lt;code&gt;record&lt;/code&gt; restricted identifier as a type name&lt;/li&gt;
  &lt;li&gt;Unqualified calls to methods named &lt;code&gt;yield&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Modifiers on the &lt;code&gt;requires java.base&lt;/code&gt; statement inside of &lt;code&gt;module-info.java&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Redundant semicolons between import statements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // This previously legal class does not compile with Java 14,
  // as 'yield' became a restricted identifier.
  public class yield {} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fixing these issues timely may simplify migration to future Java versions.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AnnotationClass" defaultSeverity="WARNING" displayName="Annotation interface" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports annotation interfaces.
Such interfaces are not supported under Java 1.4 and earlier.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Annotation" defaultSeverity="WARNING" displayName="Annotation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports annotations.
Annotations are not supported in Java 1.4 and earlier JVM.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForeachStatement" defaultSeverity="WARNING" displayName="Enhanced 'for' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports enhanced &lt;code&gt;for&lt;/code&gt; statements.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (int x: Arrays.asList(1, 2, 3)) {
    System.out.println(x);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (Iterator&amp;lt;Integer&amp;gt; iterator = Arrays.asList(1, 2, 3).iterator(); iterator.hasNext(); ) {
    final int x = iterator.next();
    System.out.println(x);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;i&gt;Enhanced&lt;/i&gt; &lt;code&gt;for&lt;/code&gt; &lt;i&gt;statement&lt;/i&gt; appeared in Java 5.
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VarargParameter" defaultSeverity="INFORMATION" displayName="Varargs method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that accept an arbitrary number of parameters (also known as varargs methods).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum EnumConstants {
  A(null), B, C;

  EnumConstants(String... ss) {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is available to replace a variable argument
  parameter with an equivalent array parameter. Relevant arguments in method calls are wrapped in an array initializer expression.
  After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum EnumConstants {
  A(null), B(new String[]{}), C(new String[]{});

  EnumConstants(String[] ss) {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;i&gt;Varargs method&lt;/i&gt; appeared in Java 5.
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssertStatement" defaultSeverity="WARNING" displayName="'assert' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;assert&lt;/code&gt; statements. By default, &lt;code&gt;assert&lt;/code&gt; statements are disabled during execution in the production
environment. Consider using logger or exceptions instead.
&lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; statements are not supported in Java 1.3 and earlier JVM.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Assertions&amp;#39;, which is available since Java 1.4.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Specs2" path="Scala"><inspection shortName="Specs2Matchers" defaultSeverity="WARNING" displayName="Specs2 matchers" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports that built-in matchers in &lt;b&gt;specs2&lt;/b&gt; could be used.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class TestSpec extends Specification { def is = s2"""
    This is a spec
    opt
      should contain 1                                  $e1
                                                        """
    def e1 = {

      val opt = Some(1)

      opt must equalTo (Some(1))
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class TestSpec extends Specification { def is = s2"""
    This is a spec
    opt
      should contain 1                                  $e1
                                                        """
    def e1 = {

      val opt = Some(1)

      opt must beSome(1)
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Properties files" path=""><inspection shortName="UnusedMessageFormatParameter" defaultSeverity="WARNING" displayName="Missing message format parameter" enabled="true" language="Properties" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties values
that look like &lt;code&gt;java.text.MessageFormat&lt;/code&gt; format strings
but do not use some the parameters of the &lt;code&gt;{xx}&lt;/code&gt; kind.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# parameter {0} is not used
&lt;b&gt;error.message&lt;/b&gt;=Something happened in line &lt;b&gt;{1}&lt;/b&gt;
  &lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="WrongPropertyKeyValueDelimiter" defaultSeverity="WEAK WARNING" displayName="Property key/value delimiter doesn't match code style settings" enabled="true" language="Properties" pluginId="com.intellij.properties" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties in which key or value delimiters do not match code style settings.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrailingSpacesInProperty" defaultSeverity="WARNING" displayName="Trailing spaces in property" enabled="true" language="Properties" pluginId="com.intellij.properties" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties whose keys or values end with a whitespace.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnusedProperty" defaultSeverity="WARNING" displayName="Unused property" enabled="true" language="Properties" pluginId="com.intellij.properties" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties that are not referenced outside of the .properties file they are contained in.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UseEllipsisInPropertyInspection" defaultSeverity="WARNING" displayName="Three dot characters instead of the ellipsis" enabled="false" language="Properties" pluginId="com.intellij.properties" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports three "dot" characters which are used instead of the ellipsis character for UTF-8 properties files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AlphaUnsortedPropertiesFile" defaultSeverity="WEAK WARNING" displayName="Properties file or resource bundle is alphabetically unsorted" enabled="false" language="Properties" pluginId="com.intellij.properties" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports alphabetically unsorted resource bundles or .properties files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InconsistentResourceBundle" defaultSeverity="ERROR" displayName="Inconsistent resource bundle" enabled="true" language="Properties" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports problems in the properties files contained in the resource bundle.
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Report missing translations&lt;/b&gt; &lt;br&gt;&lt;br&gt;
  Use this option to report properties contained in the parent properties file that are missing in inherited ones (unless it's a language dialect).

  &lt;br&gt;&lt;br&gt; &lt;p&gt;Example:&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;
    # messages.properties
    abc=xxx

    # messages_fr.properties
    # Empty file
  &lt;/code&gt;&lt;/pre&gt;

  Property &lt;code&gt;abc&lt;/code&gt; will be reported as untranslated.
  &lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Report inconsistent properties&lt;/b&gt; &lt;br&gt;&lt;br&gt;
  Use this option to report properties contained in inherited properties file that are missing in the parent one (or in siblings if there is no parent).

  &lt;br&gt;&lt;br&gt; &lt;p&gt;Example:&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;
    # messages.properties
    # Empty file

    # messages_fr.properties
    abc=xxx
  &lt;/code&gt;&lt;/pre&gt;

  Property &lt;code&gt;abc&lt;/code&gt; translation is not available here for any language except French,
  and, thus, will be reported as missing in the (default) properties file &lt;code&gt;messages.properties&lt;/code&gt;.
  &lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Report properties overridden with the same value&lt;/b&gt; &lt;br&gt;&lt;br&gt;
  Use this option to report properties copy-pasted into several properties files verbatim. &lt;br&gt;

  &lt;br&gt;&lt;br&gt; &lt;p&gt;Example:&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;
    # messages.properties
    abc=xxx

    # messages_fr.properties
    abc=xxx
  &lt;/code&gt;&lt;/pre&gt;
  Property &lt;code&gt;abc&lt;/code&gt; will be reported as unnecessarily inherited in the file &lt;code&gt;messages_fr.properties&lt;/code&gt; .
  &lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Report properties overridden with different placeholders&lt;/b&gt; &lt;br&gt;&lt;br&gt;
  Use this option to check for placeholder consistency in overridden properties.

  &lt;br&gt;&lt;br&gt; &lt;p&gt;Example:&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;
    # messages.properties
    qwe={0}xxx{1}
    abc={0}yyy{1}

    # messages_fr.properties
    qwe={0}xxx{0}xxx{1}
    abc={0}yyy
  &lt;/code&gt;&lt;/pre&gt;

  Property &lt;code&gt;abc&lt;/code&gt; will be reported as a property containing message format placeholders
  not corresponding to &lt;code&gt;messages.properties&lt;/code&gt;.
  &lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Report properties overridden with different values endings&lt;/b&gt; &lt;br&gt;&lt;br&gt;
  Use this option to check for ending consistency in overridden properties.
  &lt;br&gt;&lt;br&gt; &lt;p&gt;Example:&lt;/p&gt;

  &lt;pre&gt;&lt;code&gt;
    # messages.properties
    abc=xxxzzz

    # messages_fr.properties
    abc=xxx;
  &lt;/code&gt;&lt;/pre&gt;

  Property &lt;code&gt;abc&lt;/code&gt; will be reported as ending with special signs
  (&lt;code&gt;!&lt;/code&gt; / &lt;code&gt;?&lt;/code&gt; / &lt;code&gt;.&lt;/code&gt; / &lt;code&gt;:&lt;/code&gt; / &lt;code&gt;;&lt;/code&gt;) whereas
  the parent value in &lt;code&gt;messages.properties&lt;/code&gt; doesn't.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DuplicatePropertyInspection" defaultSeverity="WARNING" displayName="Duplicate property" enabled="false" language="Properties" pluginId="com.intellij.properties" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports duplicate property keys with different values, duplicate keys, or duplicate property values.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
property1=&lt;b&gt;&lt;font color="#000080"&gt;value&lt;/font&gt;&lt;/b&gt;;
property2=&lt;b&gt;&lt;font color="#000080"&gt;value&lt;/font&gt;&lt;/b&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;b&gt;Options&lt;/b&gt; list allows selecting the area in which the inspection should search for duplicates.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SuspiciousLocalesLanguages" defaultSeverity="WARNING" displayName="Suspicious resource bundle locale languages" enabled="false" language="Properties" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports locales with language codes that are not supported by Java.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Class" path="Java/Naming conventions"><inspection shortName="ClassNameSameAsAncestorName" defaultSeverity="WARNING" displayName="Class name same as ancestor name" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different.
Such class names may be very confusing.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;
  package util;
  abstract class Iterable&amp;lt;T&amp;gt; implements java.lang.Iterable&amp;lt;T&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such classes is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NewClassNamingConvention" defaultSeverity="WARNING" displayName="Class naming convention" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; if the inspection is enabled for tests, and the specified length for the minimum class name is 8 (the default), the following test class
   produces a warning because the length of its name is 6, which is less than 8: &lt;code&gt;public class MyTest{}&lt;/code&gt;.
&lt;p&gt;A quick-fix that renames such classes is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
  Use the list in the &lt;b&gt;Options&lt;/b&gt; section to specify which classes should be checked. Deselect the checkboxes for the classes for which
  you want to skip the check.&lt;/p&gt;
&lt;p&gt;For each class type, specify the minimum length, maximum length, and the regular expression expected for class names using the
  provided input fields. Specify &lt;b&gt;0&lt;/b&gt; in the length fields to skip corresponding checks.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonExceptionNameEndsWithException" defaultSeverity="WARNING" displayName="Non-exception class name ends with 'Exception'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;exception&lt;/code&gt; classes whose names end with &lt;code&gt;Exception&lt;/code&gt;.
&lt;p&gt;Such classes may cause confusion by breaking a common naming convention and
  often indicate that the &lt;code&gt;extends Exception&lt;/code&gt; clause is missing.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
  &lt;pre&gt;&lt;code&gt;public class NotStartedException {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such classes is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExceptionNameDoesntEndWithException" defaultSeverity="WARNING" displayName="Exception class name does not end with 'Exception'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports exception classes whose names don't end with &lt;code&gt;Exception&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;class NotStartedEx extends Exception {}&lt;/code&gt;
&lt;p&gt;A quick-fix that renames such classes is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ClassNamePrefixedWithPackageName" defaultSeverity="WARNING" displayName="Class name prefixed with package name" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes whose names are prefixed with their package names, ignoring differences in
capitalization.
&lt;p&gt;While occasionally having such names is reasonable, they are often used due to a poor naming scheme, may be redundant and
  annoying.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
  &lt;pre&gt;&lt;code&gt;
  package byteCode;
  class ByteCodeAnalyzer {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such classes is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 7" path="Java/Java language level migration aids"><inspection shortName="EqualsReplaceableByObjectsCall" defaultSeverity="WEAK WARNING" displayName="'equals()' expression replaceable by 'Objects.equals()' expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions that can be replaced with a call to &lt;code&gt;java.util.Objects#equals&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(Object a, Object b) {
    boolean result = a != null &amp;&amp; a.equals(b);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(Object a, Object b) {
    boolean result = Objects.equals(a, b);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Replacing expressions like &lt;code&gt;a != null &amp;&amp; a.equals(b)&lt;/code&gt; with &lt;code&gt;Objects.equals(a, b)&lt;/code&gt;
  slightly changes the semantics. Use the &lt;b&gt;Highlight expressions like 'a != null &amp;&amp; a.equals(b)'&lt;/b&gt; option to enable or disable this behavior.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;java.util.Objects API&amp;#39;, which is available since Java 7.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TryFinallyCanBeTryWithResources" defaultSeverity="WARNING" displayName="'try finally' can be replaced with 'try' with resources" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;finally&lt;/code&gt; statements that can use Java 7 Automatic Resource Management,
which is less error-prone.
&lt;p&gt;A quick-fix is available to convert a &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;finally&lt;/code&gt;
  statement into a &lt;code&gt;try&lt;/code&gt;-with-resources statement.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  PrintStream printStream = new PrintStream(fileName);
  try {
    printStream.print(true);
  } finally {
    printStream.close();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is provided to pass the cause to a constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try (PrintStream printStream = new PrintStream(fileName)) {
    printStream.print(true);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Try-with-resources&amp;#39;, which is available since Java 7.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TryWithIdenticalCatches" defaultSeverity="WARNING" displayName="Identical 'catch' branches in 'try' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports identical &lt;code&gt;catch&lt;/code&gt; sections in a single &lt;code&gt;try&lt;/code&gt; statement.
&lt;p&gt;Collapsing such sections into one &lt;i&gt;multi-catch&lt;/i&gt; block reduces code duplication and prevents
  the situations when one &lt;code&gt;catch&lt;/code&gt; section is updated, and another one is not.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    try {
        doSmth();
    }
    catch (IOException e) {
        LOG.error(e);
    }
    catch (URISyntaxException e) {
        LOG.error(e);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is available to make the code more compact:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    try {
        doSmth();
    }
    catch (IOException | URISyntaxException e) {
        LOG.error(e);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Multi-catches&amp;#39;, which is available since Java 7.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Convert2Diamond" defaultSeverity="WARNING" displayName="Explicit type can be replaced with '&lt;&gt;'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;new&lt;/code&gt; expressions with type arguments that can be replaced a with diamond type &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(); // reports array list type argument
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;This inspection depends on the Java feature &amp;#39;Diamond types&amp;#39;, which is available since Java 7.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SafeVarargsDetector" defaultSeverity="WARNING" displayName="Possible heap pollution from parameterized vararg type" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods with variable arity, which can be annotated as &lt;code&gt;@SafeVarargs&lt;/code&gt;.
The &lt;code&gt;@SafeVarargs&lt;/code&gt; annotation suppresses unchecked warnings about parameterized array creation at call sites.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Foo&amp;lt;T&amp;gt; {
    private List&amp;lt;T&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();

    public final void safeVarargs(T... elements) {
      Collections.addAll(list, elements);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Foo&amp;lt;T&amp;gt; {
    private List&amp;lt;T&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();

    @SafeVarargs
    public final void safeVarargs(T... elements) {
      Collections.addAll(list, elements);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  This annotation is not supported under Java 1.6 or earlier JVMs.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Error handling" path="Groovy"><inspection shortName="GroovyContinueOrBreakFromFinallyBlock" defaultSeverity="WARNING" displayName="'continue' or 'break' from 'finally' block" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; statements inside of &lt;code&gt;finally&lt;/code&gt; blocks.
&lt;p&gt;While occasionally intended, such statements are very confusing, may mask thrown exceptions, and tremendously complicate debugging.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyThrowFromFinallyBlock" defaultSeverity="WARNING" displayName="'throw' inside 'finally' block" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;throw&lt;/code&gt; statements inside of &lt;code&gt;finally&lt;/code&gt; blocks.
&lt;p&gt;
  While occasionally intended, such &lt;code&gt;throw&lt;/code&gt; statements may mask exceptions thrown and
  tremendously complicate debugging.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyReturnFromFinallyBlock" defaultSeverity="WARNING" displayName="'return' inside 'finally' block" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;return&lt;/code&gt; statements inside of &lt;code&gt;finally&lt;/code&gt; blocks.
&lt;p&gt;
  While occasionally intended, such &lt;code&gt;return&lt;/code&gt; statements may mask exceptions thrown, and
  complicate debugging.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyUnusedCatchParameter" defaultSeverity="WARNING" displayName="Unused 'catch' parameter" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;b&gt;catch&lt;/b&gt; parameters that are unused in their
corresponding blocks. This inspection will not report any &lt;b&gt;catch&lt;/b&gt; parameters
named "ignore" or "ignored".&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
      def arr = new int[3]
      arr[5] = 5
  } catch(Exception &lt;b&gt;ex&lt;/b&gt;) {
      println('Catching the exception')
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the parameter &lt;b&gt;ex&lt;/b&gt; is never used in &lt;b&gt;catch&lt;/b&gt; block.
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
      def arr = new int[3]
      arr[5] = 5
  } catch(Exception &lt;b&gt;ignored&lt;/b&gt;) {
      println('Catching the exception')
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyEmptyCatchBlock" defaultSeverity="WARNING" displayName="Empty 'catch' block" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;code&gt;catch&lt;/code&gt; blocks. While occasionally intended,
empty &lt;code&gt;catch&lt;/code&gt; blocks can make debugging extremely difficult.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
try {
  throw new Exception()
}
catch (Exception e) {
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
try {
  throw new Exception()
}
catch (Exception ignored) {
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyEmptyTryBlock" defaultSeverity="WARNING" displayName="Empty 'try' block" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;code&gt;try&lt;/code&gt; blocks.
Empty &lt;code&gt;try&lt;/code&gt; blocks usually indicate coding errors.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
try {
}
finally {
  close()
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyEmptyFinallyBlock" defaultSeverity="WARNING" displayName="Empty 'finally' block" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;code&gt;finally&lt;/code&gt; blocks.
Empty &lt;code&gt;finally&lt;/code&gt; blocks usually indicate coding errors.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
try {
  throw new Exception()
}
finally {
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="AiExclude" path="Gemini"><inspection shortName="AiExcludeWrong" defaultSeverity="ERROR" displayName="Configuration mistakes in .aiexclude files" enabled="true" language="AiExclude" pluginId="com.google.tools.ij.aiplugin" pluginVersion="1.22.1-251" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
An &lt;code&gt;.aiexclude&lt;/code&gt; file uses the same syntax and semantics as &lt;code&gt;.gitignore&lt;/code&gt; files. This
means that an empty (possibly with whitespace and comments) &lt;code&gt;.aiexclude&lt;/code&gt; file isn't
actually excluding anything. Some other proposed exclude formats (and earlier versions of the
&lt;code&gt;.aiexclude&lt;/code&gt; spec) allowed for an empty file to imply "everything", but this is no
longer the case.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 23" path="Java/Java language level migration aids"><inspection shortName="MarkdownDocumentationCommentsMigration" defaultSeverity="INFORMATION" displayName="Javadoc comment can be Markdown documentation comment" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Javadoc comments that can be converted to Markdown documentation comments.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * For blubbering of the florz.
   *
   * Similar to {@link com.deeps.Querp querping} class.
   */
  class FlorzBlubber {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /// For blubbering of the florz.
  /// Similar to [querping][com.deeps.Querp] class.
  class FlorzBlubber {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2024.2&lt;/small&gt;&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 11" path="Java/Java language level migration aids"><inspection shortName="ReadWriteStringCanBeUsed" defaultSeverity="WARNING" displayName="'Files.readString()' or 'Files.writeString()' can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method calls that read or write a &lt;code&gt;String&lt;/code&gt; as bytes using &lt;code&gt;java.nio.file.Files&lt;/code&gt;.
Such calls can be replaced with a call to a &lt;code&gt;Files.readString()&lt;/code&gt; or &lt;code&gt;Files.writeString()&lt;/code&gt; method introduced in Java 11.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = "example";
  Files.write(Paths.get("out.txt"), s.getBytes(StandardCharsets.UTF_8), StandardOpenOption.WRITE);
  s = new String(Files.readAllBytes(Paths.get("in.txt")), StandardCharsets.ISO_8859_1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = "example";
  Files.writeString(Paths.get("out.txt"), s, StandardOpenOption.WRITE);
  s = Files.readString(Paths.get("in.txt"), StandardCharsets.ISO_8859_1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Note that the &lt;code&gt;readString()&lt;/code&gt; behavior differs from the &lt;code&gt;new String(bytes, charset)&lt;/code&gt; behavior when it comes to 
  handling of invalid (unmappable) characters. The &lt;code&gt;readString()&lt;/code&gt; method throws an exception in such cases, while the 
  &lt;code&gt;new String(bytes, charset)&lt;/code&gt; method silently replaces invalid characters with the replacement character. 
  If silent replacement is desired, it would be better to suppress the inspection warning. 
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringRepeatCanBeUsed" defaultSeverity="WARNING" displayName="String.repeat() can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports loops that can be replaced with a single &lt;code&gt;String.repeat()&lt;/code&gt; method (available since Java 11).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void append(StringBuilder sb, int count, Object obj) {
    for (int i = 0; i &amp;lt; count; i++) {
      sb.append(obj);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void append(StringBuilder sb, int count, Object obj) {
    sb.append(String.valueOf(obj).repeat(Math.max(0, count)));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  By default, the inspection may wrap &lt;code&gt;count&lt;/code&gt; with &lt;code&gt;Math.max(0, count)&lt;/code&gt; if it cannot prove statically that &lt;code&gt;count&lt;/code&gt; is
  not negative. This is done to prevent possible semantics change, as &lt;code&gt;String.repeat()&lt;/code&gt; rejects negative numbers.
  Use the &lt;b&gt;Add Math.max(0,count) to avoid possible semantics change&lt;/b&gt; option to disable this behavior if required.&lt;/p&gt;
  &lt;p&gt;Similarly, a string you want to repeat can be wrapped in
  &lt;code&gt;String.valueOf&lt;/code&gt; to prevent possible &lt;code&gt;NullPointerException&lt;/code&gt; if it's unknown whether it can be &lt;code&gt;null&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 11 or higher.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Lombok" path="Java"><inspection shortName="Lombok" defaultSeverity="WARNING" displayName="Lombok annotations" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Offers general inspections for Lombok annotations.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DeprecatedLombok" defaultSeverity="WARNING" displayName="Deprecated Lombok annotations" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated Lombok annotations and suggests quick-fixes to replace them with the ones promoted to the main package.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SpringQualifierCopyableLombok" defaultSeverity="WARNING" displayName="@Qualifier not copyable by Lombok" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  Spring &lt;code&gt;@Qualifier&lt;/code&gt; annotations on class fields that are ignored by the corresponding Lombok
&lt;code&gt;@RequiredArgsConstructor&lt;/code&gt; and &lt;code&gt;@AllArgsConstructor&lt;/code&gt; annotations.
The generated constructors will not receive the &lt;code&gt;@Qualifier&lt;/code&gt; annotation without
a &lt;code&gt;lombok.copyableAnnotations&lt;/code&gt; definition inside the &lt;code&gt;lombok.config&lt;/code&gt; file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="StaticMethodImportLombok" defaultSeverity="WARNING" displayName="Using static import for Lombok-generated methods" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of static imports for Lombok's generated methods.&lt;br&gt;
&lt;p&gt;
  This will fail on compilation with javac. The reason is that static methods are resolved before the lombok annotation processor kicks in.
  At this time javac uses the original code before the one that should have been generated by the annotation processor, then javac of course
  report the missing symbols (generated methods).
&lt;/p&gt;
See for more &lt;a href="https://github.com/projectlombok/lombok/issues/2044"&gt;details&lt;/a&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Simplifications: other" path="Scala/Collections"><inspection shortName="SortedHeadLast" defaultSeverity="WARNING" displayName="Sorted and head/last to max/min" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports sorting and using &lt;code&gt;head&lt;/code&gt; or &lt;code&gt;last&lt;/code&gt; and suggests replacing it with &lt;code&gt;max&lt;/code&gt; or
  &lt;code&gt;min&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq("abc", "defg", "h").sorted.head
  Seq("abc", "defg", "h").sortBy(_.length).last
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq("abc", "defg", "h").min
  Seq("abc", "defg", "h").maxBy(_.length)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MakeArrayToString" defaultSeverity="WARNING" displayName="Make Array to String" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports arrays being passed to &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;println&lt;/code&gt; and suggests converting them to proper
  strings&lt;/p&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Array[Int]
  print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Array[Int]
  print(x.mkString("Array(", ", ", ")"))
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReverseIterator" defaultSeverity="WARNING" displayName="Reverse and iterator to reverseIterator" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports when a collection is reversed explicitly to acquire a reverse iterator.&lt;/p&gt;

&lt;p&gt;The quick-fix uses &lt;code&gt;reverseIterator&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.reverse.iterator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.reverseIterator
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReverseTakeReverse" defaultSeverity="WARNING" displayName="Reverse, take and reverse to takeRight" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;seq.reverse.take(n).reverse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  seq.reverse.take(n).reverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  seq.takeRight(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReverseFind" defaultSeverity="WARNING" displayName="Reverse and find to findLast" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports when a collection is reversed explicitly before calling &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt; The quick-fix will use &lt;code&gt;xs.findLast(f)&lt;/code&gt;, which might be more efficient in some cases.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1, 2).reverse.find(_ == 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1, 2).findLast(_ == 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifiableFoldOrReduce" defaultSeverity="WARNING" displayName="Simplifiable fold or reduce method" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; methods that could be replaced with &lt;code&gt;sum&lt;/code&gt;,
  &lt;code&gt;product&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, or &lt;code&gt;min&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List(1, 2, 3).foldLeft(1){(x,y) =&gt; x * y}
  List(1, 2, 3).fold(0)(_ + _)
  List(1, 2, 3).reduce(_ + _)
  List(1, 2, 3).reduceLeft(_ min _)
  List(1, 2, 3).reduce((x, y) =&gt; math.max(x, y))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List(1, 2, 3).product
  List(1, 2, 3).sum
  List(1, 2, 3).sum
  List(1, 2, 3).min
  List(1, 2, 3).max
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IndexBoundsCheck" defaultSeverity="WARNING" displayName="Index bounds check" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports explicit checking of index bounds.&lt;/p&gt;

&lt;p&gt;The quick-fix uses &lt;code&gt;lift&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  if (i &amp;lt; x.length) Some(x(i)) else None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.lift(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MapFlatten" defaultSeverity="WARNING" displayName="Map and flatten to flatMap" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;collection.map(f).flatten(m)&lt;/code&gt; and suggests replacing it with &lt;code&gt;collection.flatMap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1, 10).map(i =&gt; Seq(i, i + 10)).flatten
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1, 10).flatMap(i =&gt; Seq(i, i + 10))
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceToWithUntil" defaultSeverity="WARNING" displayName="Replace to with until" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports inclusive ranges instead of the exclusive ones.&lt;/p&gt;

&lt;p&gt;The quick-fix will transform the inclusive range into an exclusive one.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  0 to x - 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  0 until x
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ToSetAndBack" defaultSeverity="WARNING" displayName="Conversion to Set and back to distinct" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports chained conversions of a sequence to &lt;code&gt;Set&lt;/code&gt; and back, and suggests replacing them with &lt;code&gt;.distinct&lt;/code&gt;
  call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1).toSet.toSeq
  List(1).toSet.toList
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1).distinct
  List(1).distinct
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DropTakeToSlice" defaultSeverity="WARNING" displayName="Drop and take to slice" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports compositions of &lt;code&gt;drop&lt;/code&gt; and &lt;code&gt;take&lt;/code&gt; and replaces them with &lt;code&gt;slice&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.drop(n).take(m)
  x.take(m).drop(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.slice(n, n + m)
  x.slice(n, m)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FoldTrueAnd" defaultSeverity="WARNING" displayName="Fold simplifiable to forall" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usage of &lt;code&gt;fold&lt;/code&gt; to check a condition for all elements.&lt;/p&gt;

&lt;p&gt;The quick-fix replaces the &lt;code&gt;fold&lt;/code&gt; with an equivalent &lt;code&gt;forall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.foldLeft(true)((x,y) =&gt; x &amp;&amp; p(y))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.forall(y =&gt; p(y))
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplaceWithFlatten" defaultSeverity="WARNING" displayName="Replace with flatten" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports code which emulates &lt;code&gt;.flatten&lt;/code&gt; on collections of collections.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(seq1, seq2).flatMap(identity)
  Seq(seq1, seq2).flatMap(x =&gt; identity(x))
  Seq(seq1, seq2).flatMap(x =&gt; x)

  val nestedOption = Option(Some(10))
  nestedOption.getOrElse(None)
  nestedOption.map(_.get)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(seq1, seq2).flatten
  Seq(seq1, seq2).flatten
  Seq(seq1, seq2).flatten

  val nestedOption = Option(Some(10))
  nestedOption.flatten
  nestedOption.flatten
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CollectHeadOption" defaultSeverity="WARNING" displayName="Collect and headOption to collectFirst" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;collection.collect(f).headOption&lt;/code&gt; and suggests replacing it with
  &lt;code&gt;collection.collectFirst(f)&lt;/code&gt; if possible.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x: Set[Int]
  x.collect(f).headOption
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x: Set[Int]
  x.collectFirst(f)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HeadOrLastOption" defaultSeverity="WARNING" displayName="Emulated headOption or lastOption" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports when &lt;code&gt;headOption&lt;/code&gt; or &lt;code&gt;lastOption&lt;/code&gt; is emulated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  if (seq.nonEmpty) Some(seq.head) else None
  seq.lift(0)

  if (seq.size == 0) None else seq.lastOption
  seq.lift(seq.size - 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.headOption
  seq.headOption

  seq.lastOption
  seq.lastOption
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Simplifications: filter and exists" path="Scala/Collections"><inspection shortName="FilterSetContains" defaultSeverity="WARNING" displayName="Redundant contains in filter" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant &lt;code&gt;contains&lt;/code&gt; in &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1, 2, 3).filter(Set(1, 3).contains)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1, 2, 3).filter(Set(1, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FindEmptyCheck" defaultSeverity="WARNING" displayName="Find and emptiness check to exists" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;find&lt;/code&gt; and an emptiness check and suggests using &lt;code&gt;exists&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.find(p).isDefined
  x.find(p) != None
  x.find(p).isEmpty
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.exists(p)
  x.exists(p)
  !x.exists(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FilterHeadOption" defaultSeverity="WARNING" displayName="Filter and headOption to find" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usages of &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;headOption&lt;/code&gt; and replaces them with &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.filter(p).headOption
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.find(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="FilterOtherContains" defaultSeverity="WARNING" displayName="Filter and contains to intersect or diff" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;filterNot&lt;/code&gt; on &lt;code&gt;Set&lt;/code&gt; and suggests using &lt;code&gt;intersect&lt;/code&gt; or &lt;code&gt;diff&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val set = Set(1, 2)
  val others = Set(2, 3)
  set.filter(others.contains(_))
  set.filterNot(others.contains)
  set.filter(x =&gt; !others.contains(x))
  set.filterNot(x =&gt; !others.contains(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val set = Set(1, 2)
  val others = Set(2, 3)
  set.intersect(others)
  set.diff(others)
  set.diff(others)
  set.intersect(others)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExistsEquals" defaultSeverity="WARNING" displayName="Exists simplifiable to contains" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usage of &lt;code&gt;exists&lt;/code&gt; or &lt;code&gt;forall&lt;/code&gt;
  for searching a specific element.&lt;/p&gt;


&lt;p&gt;The quick-fix uses &lt;code&gt;contains&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  set.exists(x =&gt; x == "a")
  set.forall(x =&gt; x != "a")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  set.contains("a")
  !set.contains("a")
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FilterEmptyCheck" defaultSeverity="WARNING" displayName="Filter and emptiness check to exists/forall" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports emptiness checks on filtered collections.&lt;/p&gt;

&lt;p&gt;The quick-fix uses &lt;code&gt;exists&lt;/code&gt; or &lt;code&gt;forall&lt;/code&gt; to check for emptiness.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.filter(p).size == 0
  x.filter(p).length &gt; 0
  x.filterNot(p).isEmpty
  x.filterNot(p).nonEmpty
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  !x.exists(p)
  x.exists(p)
  x.forall(p)
  !x.forall(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MapToBooleanContains" defaultSeverity="WARNING" displayName="Map and contains(true/false) to exists or !forall" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports mapping a collection to Boolean values and using &lt;code&gt;contains&lt;/code&gt; on it.&lt;/p&gt;

&lt;p&gt;The quick-fix uses &lt;code&gt;.exists()&lt;/code&gt; or &lt;code&gt;!.forall()&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def p(x: Int): Boolean = ???
  var seq: Seq[Int]
  seq.map(p).contains(true)
  seq.map(p).contains(false)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def p(x: Int): Boolean = ???
  var seq: Seq[Int]
  seq.exists(p)
  !seq.forall(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FilterSize" defaultSeverity="WARNING" displayName="Filter and size to count" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usages of &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; (or &lt;code&gt;length&lt;/code&gt;) and suggests replacing them with &lt;code&gt;count&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.filter(p).size
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.count(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RELAX NG" path=""><inspection shortName="UnusedDefine" defaultSeverity="WARNING" displayName="Unused define" enabled="false" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused named pattern (&lt;code&gt;define&lt;/code&gt;) in a RELAX-NG file (XML or Compact Syntax).
&lt;code&gt;define&lt;/code&gt; elements that are used through an include in another file are ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a named pattern (&lt;code&gt;define&lt;/code&gt;) in RELAX-NG files that use XML syntax.
Suggests creating the referenced &lt;code&gt;define&lt;/code&gt; element.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Indices" path="Scala/Collections"><inspection shortName="ZipWithIndex" defaultSeverity="WARNING" displayName="Manually zipping with indices" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports manual zipping of the index instead of using &lt;code&gt;zipWithIndex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.zip(seq.indices)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.zipWithIndex
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LastIndexToLast" defaultSeverity="WARNING" displayName="Access to last element by index" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;seq(seq.size - 1)&lt;/code&gt; or &lt;code&gt;seq.apply(seq.size - 1)&lt;/code&gt; and suggests replacing it with &lt;code&gt;seq.last&lt;/code&gt;
    if
    &lt;code&gt;seq&lt;/code&gt; is not an instance of &lt;code&gt;IndexedSeq&lt;/code&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RangeToIndices" defaultSeverity="WARNING" displayName="Constructing range for seq indices" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports constructing ranges of collection indices manually instead of using &lt;code&gt;.indices&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  Range(0, x.size)
  0 until x.size
  0.to(x.size - 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x: Seq[Int]
  x.indices
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ZeroIndexToHead" defaultSeverity="WARNING" displayName="Access to first element by index" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports accessing the first element of a collection by index instead of &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq(0)
  seq.apply(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.head
  seq.head
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Reflective access" path="Java"><inspection shortName="JavaReflectionMemberAccess" defaultSeverity="WARNING" displayName="Reflective access to non-existent or not visible class member" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reflective access to fields and methods that don't exist or aren't visible.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Field stringHashField() throws NoSuchFieldException {
    return String.class.getField("hash");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Field stringHashField() throws NoSuchFieldException {
    return String.class.getDeclaredField("hash");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  With a &lt;code&gt;final&lt;/code&gt; class, it's clear if there is a field or method with the specified name in the class.
&lt;/p&gt;
&lt;p&gt;
  With non-&lt;code&gt;final&lt;/code&gt; classes, it's possible that a subclass has a field or method with that name, so there could be false positives.
  Use the inspection's settings to get rid of such false positives everywhere or with specific classes.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Java9ReflectionClassVisibility" defaultSeverity="WARNING" displayName="Reflective access across modules issues" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Class.forName()&lt;/code&gt; and &lt;code&gt;ClassLoader.loadClass()&lt;/code&gt; calls
which try to access classes that aren't visible in the current scope due to Java 9 module accessibility rules.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Modules&amp;#39;, which is available since Java 9.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaLangInvokeHandleSignature" defaultSeverity="WARNING" displayName="MethodHandle/VarHandle type mismatch" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;MethodHandle&lt;/code&gt; and &lt;code&gt;VarHandle&lt;/code&gt; factory method calls that don't match any method or field.
&lt;p&gt;Also reports arguments to &lt;code&gt;MethodHandle.invoke()&lt;/code&gt; and similar methods, that don't match the &lt;code&gt;MethodHandle&lt;/code&gt; signature
  and arguments to &lt;code&gt;VarHandle.set()&lt;/code&gt; that don't match the &lt;code&gt;VarHandle&lt;/code&gt; type.
  &lt;!-- tooltip end --&gt;

&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;
  MethodHandle mh = MethodHandles.lookup().findVirtual(
      MyClass.class, "foo", MethodType.methodType(void.class, int.class));
  &lt;i&gt;// the argument should be an &lt;b&gt;int&lt;/b&gt; value&lt;/i&gt;
  mh.invoke(myObj, "&lt;b&gt;abc&lt;/b&gt;");
&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;
  &lt;i&gt;// the argument should be &lt;b&gt;String&lt;/b&gt;.class&lt;/i&gt;
  VarHandle vh = MethodHandles.lookup().findVarHandle(
      MyClass.class, "text", &lt;b&gt;int&lt;/b&gt;.class);
&lt;/pre&gt;
&lt;br&gt;
&lt;pre&gt;
  VarHandle vh = MethodHandles.lookup().findVarHandle(
      MyClass.class, "text", String.class);
  &lt;i&gt;// the argument should be a &lt;b&gt;String&lt;/b&gt; value&lt;/i&gt;
  vh.set(myObj, &lt;b&gt;42&lt;/b&gt;);
&lt;/pre&gt;
&lt;p&gt;
  &lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaReflectionInvocation" defaultSeverity="WARNING" displayName="Reflective invocation arguments mismatch" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases in which the arguments provided to &lt;code&gt;Method.invoke()&lt;/code&gt; and &lt;code&gt;Constructor.newInstance()&lt;/code&gt;
do not match the signature specified in &lt;code&gt;Class.getMethod()&lt;/code&gt; and &lt;code&gt;Class.getConstructor()&lt;/code&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Method m = myObj.getClass().getMethod("myMethod", &lt;b&gt;int&lt;/b&gt;.class);
  &lt;i&gt;// the argument should be an &lt;b&gt;int&lt;/b&gt; value&lt;/i&gt;
  m.invoke(myObj, "&lt;b&gt;abc&lt;/b&gt;");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Error handling" path="Java"><inspection shortName="UncheckedExceptionClass" defaultSeverity="WARNING" displayName="Unchecked 'Exception' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports subclasses of &lt;code&gt;java.lang.RuntimeException&lt;/code&gt;.
&lt;p&gt;Some coding standards require that all user-defined exception classes are checked.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class EnigmaException extends RuntimeException {} // warning: Unchecked exception class 'EnigmaException'
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FinallyBlockCannotCompleteNormally" defaultSeverity="WARNING" displayName="'finally' block which can not complete normally" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt; statements that are used inside &lt;code&gt;finally&lt;/code&gt; blocks.
These cause the &lt;code&gt;finally&lt;/code&gt; block to not complete normally but to complete abruptly.
Any exceptions thrown from the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks of the same &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; statement will be suppressed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void x() {
    &lt;b&gt;try&lt;/b&gt; {
      throw new RuntimeException();
    } &lt;b&gt;finally&lt;/b&gt; {
      // if bar() returns true, the RuntimeException will be suppressed
      &lt;b&gt;if&lt;/b&gt; (bar()) &lt;b&gt;return&lt;/b&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExtendsThrowable" defaultSeverity="WARNING" displayName="Class directly extends 'Throwable'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that directly extend &lt;code&gt;java.lang.Throwable&lt;/code&gt;.
&lt;p&gt;Extending &lt;code&gt;java.lang.Throwable&lt;/code&gt; directly is generally considered bad practice.
  It is usually enough to extend &lt;code&gt;java.lang.RuntimeException&lt;/code&gt;, &lt;code&gt;java.lang.Exception&lt;/code&gt;, or - in special
  cases - &lt;code&gt;java.lang.Error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class EnigmaThrowable extends Throwable {} // warning: Class 'EnigmaThrowable' directly extends 'java.lang.Throwable'
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CatchMayIgnoreException" defaultSeverity="WARNING" displayName="Catch block may ignore exception" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;catch&lt;/code&gt; blocks that are empty or may ignore an exception.
&lt;p&gt;While occasionally intended, empty &lt;code&gt;catch&lt;/code&gt; blocks may complicate debugging.
Also, ignoring a &lt;code&gt;catch&lt;/code&gt; parameter might be wrong.
  Finally, the static code analyzer reports if it detects that a &lt;code&gt;catch&lt;/code&gt; block may silently ignore important VM
  exceptions like &lt;code&gt;NullPointerException&lt;/code&gt;. Ignoring such an exception
(without logging or rethrowing it) may hide a bug.&lt;/p&gt;

&lt;p&gt;
  The inspection won't report any &lt;code&gt;catch&lt;/code&gt; parameters named &lt;code&gt;ignore&lt;/code&gt; or &lt;code&gt;ignored&lt;/code&gt;.
  Conversely, the inspection will warn you about any &lt;code&gt;catch&lt;/code&gt; parameters named &lt;code&gt;ignore&lt;/code&gt; or &lt;code&gt;ignored&lt;/code&gt; that are actually in use.
  Additionally, the inspection won't report &lt;code&gt;catch&lt;/code&gt; parameters inside test sources named &lt;code&gt;expected&lt;/code&gt; or &lt;code&gt;ok&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  You can use a quick-fix to change the exception name to &lt;code&gt;ignored&lt;/code&gt;.
  For empty &lt;b&gt;catch&lt;/b&gt; blocks, an additional quick-fix to generate the &lt;b&gt;catch&lt;/b&gt; body is suggested.
  You can modify the "Catch Statement Body" template on the Code tab in
  &lt;a href="settings://fileTemplates"&gt;Settings | Editor | File and Code Templates&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    throwingMethod();
  } catch (IOException ex) {

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    System.out.println(System.in.read());
  } catch (IOException ignored) {

  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Do not warn when 'catch' block contains a comment&lt;/b&gt; option to ignore &lt;code&gt;catch&lt;/code&gt; blocks with comments.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Do not warn when 'catch' block is not empty&lt;/b&gt; option to ignore &lt;code&gt;catch&lt;/code&gt; blocks that contain
    statements or comments inside, while the variable itself is not used.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Do not warn when exception named 'ignore(d)' is not actually ignored&lt;/b&gt; option to ignore
    variables named &lt;code&gt;ignored&lt;/code&gt; if they are in use.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckedExceptionClass" defaultSeverity="WARNING" displayName="Checked exception class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports checked exception classes (that is, subclasses of &lt;code&gt;java.lang.Exception&lt;/code&gt; that are
not subclasses of &lt;code&gt;java.lang.RuntimeException&lt;/code&gt;).
&lt;p&gt;Some coding standards suppress checked user-defined exception classes.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class IllegalMoveException extends Exception {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowCaughtLocally" defaultSeverity="WARNING" displayName="'throw' caught by containing 'try' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;throw&lt;/code&gt; statements whose exceptions are always
caught by containing &lt;code&gt;try&lt;/code&gt; statements.
&lt;p&gt;Using &lt;code&gt;throw&lt;/code&gt;
  statements as a "goto" to change the local flow of control is confusing and results in poor performance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    if (!Files.isDirectory(PROJECTS)) {
        throw new IllegalStateException("Directory not found."); // warning: 'throw' caught by containing 'try' statement
    }
    ...
  } catch (Exception e) {
      LOG.error("run failed");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore rethrown exceptions&lt;/b&gt; option to ignore exceptions that are rethrown.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NewExceptionWithoutArguments" defaultSeverity="WARNING" displayName="Exception constructor called without arguments" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports creation of a exception instance without any arguments specified.
&lt;p&gt;When an exception is constructed without any arguments, it contains no information about the problem that occurred, which makes
  debugging needlessly hard.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  throw new IOException(); // warning: exception without arguments
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TooBroadCatch" defaultSeverity="WARNING" displayName="Overly broad 'catch' block" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;catch&lt;/code&gt; blocks with parameters that are more generic than the
exception thrown by the corresponding &lt;code&gt;try&lt;/code&gt; block.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try  {
    File file = new File(pathToFile);
    return file.getAbsolutePath();
  } catch (Exception ex) { // warning: 'catch' of 'Exception' is too broad, masking exceptions 'RuntimeException'
    return defaultFilePath;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try  {
    File file = new File(pathToFile);
    return file.getAbsolutePath();
  } catch (RuntimeException ex) {
    return defaultFilePath;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Only warn on RuntimeException, Exception, Error or Throwable&lt;/b&gt; option to have this inspection warn only on the most generic exceptions.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore exceptions which hide others but are themselves thrown&lt;/b&gt; option to ignore any exceptions that hide other exceptions but
    still may be thrown and thus are technically not overly broad.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyFinallyBlock" defaultSeverity="WARNING" displayName="Empty 'finally' block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;code&gt;finally&lt;/code&gt; blocks.
&lt;p&gt;Empty &lt;code&gt;finally&lt;/code&gt; blocks usually indicate coding errors. They may also remain after code refactoring and can safely be removed.&lt;/p&gt;
&lt;p&gt;This inspection doesn't report empty &lt;code&gt;finally&lt;/code&gt; blocks found in JSP files.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    Files.readString(Paths.get("in.txt"));
  } catch (IOException e) {
    throw new RuntimeException(e);
  } finally {

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:
&lt;pre&gt;&lt;code&gt;
  try {
    Files.readString(Paths.get("in.txt"));
  } catch (IOException e) {
    throw new RuntimeException(e);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BadExceptionDeclared" defaultSeverity="WARNING" displayName="Prohibited exception declared" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that declare an inappropriate exception in their &lt;code&gt;throws&lt;/code&gt; clause.
For example an exception can be inappropriate because it is overly generic,
such as &lt;code&gt;java.lang.Exception&lt;/code&gt; or &lt;code&gt;java.lang.Throwable&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void describeModule(String module) throws Exception {} // warning: Prohibited exception 'Exception' declared
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Prohibited exceptions&lt;/b&gt; list to specify which exceptions should be reported.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore exceptions declared on methods overriding a library method&lt;/b&gt; option to ignore exceptions declared by methods
    that override a library method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ErrorRethrown" defaultSeverity="WARNING" displayName="'Error' not rethrown" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;try&lt;/code&gt; statements that catch
&lt;code&gt;java.lang.Error&lt;/code&gt; or any of its subclasses and do not rethrow the error.
&lt;p&gt;Statements that catch &lt;code&gt;java.lang.ThreadDeath&lt;/code&gt; are not
  reported.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    executeTests(request);
  }
  catch (OutOfMemoryError ex) { // warning: Error 'ex' not rethrown
    return false;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonFinalFieldOfException" defaultSeverity="WARNING" displayName="Non-final field of 'Exception' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields in subclasses of &lt;code&gt;java.lang.Exception&lt;/code&gt; that are not declared &lt;code&gt;final&lt;/code&gt;.
&lt;p&gt;Data on exception objects should not be modified
  because this may result in losing the error context for later debugging and logging.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class EditorException extends Exception {
    private String message; // warning: Non-final field 'message' of exception class
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NullThrown" defaultSeverity="WARNING" displayName="'null' thrown" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;null&lt;/code&gt; literals that are used as the argument of a &lt;code&gt;throw&lt;/code&gt; statement.
&lt;p&gt;Such constructs produce a &lt;code&gt;java.lang.NullPointerException&lt;/code&gt; that usually should not be thrown programmatically.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstanceofCatchParameter" defaultSeverity="WARNING" displayName="'instanceof' on 'catch' parameter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases in which an &lt;code&gt;instanceof&lt;/code&gt; expression is used for testing the type of a parameter in a &lt;code&gt;catch&lt;/code&gt; block.
&lt;p&gt;Testing the type of &lt;code&gt;catch&lt;/code&gt; parameters is usually better done by having separate
  &lt;code&gt;catch&lt;/code&gt; blocks instead of using &lt;code&gt;instanceof&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(Runnable runnable) {
    try {
        runnable.run();
    } catch (Throwable throwable) {
        if (throwable instanceof NoClassDefFoundError) { // warning: 'instanceof' on 'catch' parameter 'throwable'
            System.out.println("Class not found!");
        }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TooBroadThrows" defaultSeverity="WARNING" displayName="Overly broad 'throws' clause" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;throws&lt;/code&gt; clauses with exceptions that are more generic than the
exceptions that the method actually throws.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public void createFile() throws Exception { // warning: 'throws Exception' is too broad, masking exception 'IOException'
    File file = new File("pathToFile");
    file.createNewFile();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public void createFile() throws IOException {
    File file = new File("pathToFile");
    file.createNewFile();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Maximum number of hidden exceptions to warn&lt;/b&gt; field to ignore exceptions, that hide a larger number of other exceptions than specified.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Only warn on RuntimeException, Exception, Error or Throwable&lt;/b&gt; option to have this inspection warn only on the most generic
    exceptions.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore exceptions declared on methods overriding a library method&lt;/b&gt; option to ignore overly broad &lt;code&gt;throws&lt;/code&gt; clauses
    in methods that override a library method.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore exceptions which hide others but are themselves thrown&lt;/b&gt; option to ignore any exceptions that hide other exceptions
    but still may be thrown from the method body and thus
    are technically not overly broad.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CaughtExceptionImmediatelyRethrown" defaultSeverity="WARNING" displayName="Caught exception is immediately rethrown" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;catch&lt;/code&gt; blocks that immediately rethrow
the caught exception without performing any action on it.
Such &lt;code&gt;catch&lt;/code&gt; blocks are unnecessary and have no error
handling.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
        try {
            new FileInputStream("");
        } catch (FileNotFoundException e) {
            throw e;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BadExceptionThrown" defaultSeverity="WARNING" displayName="Prohibited exception thrown" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;throw&lt;/code&gt; statements that throw an inappropriate exception.
For example an exception can be inappropriate because it is overly generic,
such as &lt;code&gt;java.lang.Exception&lt;/code&gt; or &lt;code&gt;java.io.IOException&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void setup(Mode mode) {
      if (mode == null)
          throw new RuntimeException("Problem during setup"); // warning: Prohibited exception 'RuntimeException' thrown
      ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Prohibited exceptions&lt;/b&gt; list to specify which exceptions should be reported.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueOrBreakFromFinallyBlock" defaultSeverity="WARNING" displayName="'continue' or 'break' inside 'finally' block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statements inside of &lt;code&gt;finally&lt;/code&gt; blocks.
&lt;p&gt;While occasionally intended, such statements are very confusing, may mask thrown exceptions, and complicate debugging.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    while (true) {
        try {
          throwingMethod();
        } finally {
            continue;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowableSupplierOnlyThrowException" defaultSeverity="WARNING" displayName="Throwable supplier never returns a value" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Supplier&lt;/code&gt; lambdas in &lt;code&gt;Optional.orElseThrow()&lt;/code&gt; calls that throw an exception, instead of returning it.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
optional.orElseThrow(() -&gt; {
    throw new RuntimeException();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
optional.orElseThrow(() -&gt; new RuntimeException());
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2023.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BadExceptionCaught" defaultSeverity="WARNING" displayName="Prohibited 'Exception' caught" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;catch&lt;/code&gt; clauses that catch an inappropriate exception.
&lt;p&gt;Some exceptions, for example
  &lt;code&gt;java.lang.NullPointerException&lt;/code&gt; or
  &lt;code&gt;java.lang.IllegalMonitorStateException&lt;/code&gt;, represent programming errors
  and therefore almost certainly should not be caught in production code.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    return component.getMousePosition(true) != null;
  } catch (NullPointerException e) { // warning: Prohibited exception 'NullPointerException' caught
    return false;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Prohibited exceptions&lt;/b&gt; list to specify which exceptions should be reported.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedTryStatement" defaultSeverity="WARNING" displayName="Nested 'try' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;code&gt;try&lt;/code&gt; statements.
&lt;p&gt;Nested &lt;code&gt;try&lt;/code&gt; statements
  may result in unclear code and should probably have their &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; sections
  merged.
  &lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExceptionFromCatchWhichDoesntWrap" defaultSeverity="WARNING" displayName="'throw' inside 'catch' block which ignores the caught exception" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports exceptions that are thrown from inside &lt;code&gt;catch&lt;/code&gt; blocks but do not "wrap" the caught exception.
&lt;p&gt;When an exception is thrown in response to an exception, wrapping the initial exception prevents losing valuable context information,
  such as stack frames and line numbers.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ...
  catch (IOException e) {
    closeAllConnections();
    throw new ConnectException("Connection problem."); // warning: 'throw' inside 'catch' block ignores the caught exception 'e'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore if result of exception method call is used&lt;/b&gt; option to indicate whether the inspection should ignore exceptions whose
    argument is the result of a method
    call on the original exception, such as &lt;code&gt;getMessage()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore if thrown exception cannot wrap an exception&lt;/b&gt; option to ignore &lt;code&gt;throw&lt;/code&gt; statements that throw exceptions without a
    constructor that accepts a &lt;code&gt;Throwable&lt;/code&gt; cause.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowsRuntimeException" defaultSeverity="WARNING" displayName="Unchecked exception declared in 'throws' clause" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declaration of an unchecked exception (&lt;code&gt;java.lang.RuntimeException&lt;/code&gt; or one of its subclasses) in the &lt;code&gt;throws&lt;/code&gt;
clause of a method.
&lt;p&gt;Declarations of unchecked exceptions are not required and may be deleted or moved to a Javadoc &lt;code&gt;@throws&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class InvalidDataException extends RuntimeException {}

  class TextEditor {
    void readSettings() throws InvalidDataException {} // warning: Unchecked exception 'InvalidDataException' declared in 'throws' clause
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyTryBlock" defaultSeverity="WARNING" displayName="Empty 'try' block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty &lt;code&gt;try&lt;/code&gt; blocks, including try-with-resources statements.
&lt;p&gt;&lt;code&gt;try&lt;/code&gt; blocks with comments are considered empty.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
This inspection doesn't report empty &lt;code&gt;try&lt;/code&gt; blocks found in JSP files.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadDeathRethrown" defaultSeverity="WARNING" displayName="'ThreadDeath' not rethrown" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;try&lt;/code&gt; statements that catch
&lt;code&gt;java.lang.ThreadDeath&lt;/code&gt; and do not rethrow the exception.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    executeInParallel(request);
  } catch (ThreadDeath ex) { // warning: ThreadDeath 'ex' not rethrown
    return false;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryInitCause" defaultSeverity="WARNING" displayName="Unnecessary call to 'Throwable.initCause()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Throwable.initCause()&lt;/code&gt; where an exception constructor also takes a &lt;code&gt;Throwable cause&lt;/code&gt; argument.
&lt;p&gt;In this case, the &lt;code&gt;initCause()&lt;/code&gt; call can be removed and its argument can be added to the call to the exception's constructor.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
      process();
  }
  catch (RuntimeException ex) {
    RuntimeException wrapper = new RuntimeException("Error while processing");
    wrapper.initCause(ex); // Unnecessary call to 'Throwable.initCause()'
    throw wrapper;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is available to pass the cause argument to the constructor. After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
      process();
  }
  catch (RuntimeException ex) {
    RuntimeException wrapper = new RuntimeException("Error while processing", ex);
    throw wrapper;
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowFromFinallyBlock" defaultSeverity="WARNING" displayName="'throw' inside 'finally' block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;throw&lt;/code&gt; statements inside &lt;code&gt;finally&lt;/code&gt; blocks. 
While occasionally intended, such &lt;code&gt;throw&lt;/code&gt; statements can hide exceptions thrown from the &lt;code&gt;try&lt;/code&gt; and 
&lt;code&gt;catch&lt;/code&gt; blocks, thereby complicating the debugging process.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Fascinating {
    void doTask(Task t) {
      try {
        t.activity();
      } finally {
        if (!t.finish()) {
          throw new IllegalStateException();
        }
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Warn everywhere declared exceptions may be thrown&lt;/b&gt; option 
  to warn on method calls to methods that declare exceptions as well.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReturnFromFinallyBlock" defaultSeverity="WARNING" displayName="'return' inside 'finally' block" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;return&lt;/code&gt; statements inside of &lt;code&gt;finally&lt;/code&gt; blocks.
&lt;p&gt;While occasionally intended, such &lt;code&gt;return&lt;/code&gt; statements may mask thrown exceptions
and complicate debugging.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    foo();
  } finally {
    if (bar()) return;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Threading issues" path="Java"><inspection shortName="SynchronizationOnStaticField" defaultSeverity="WARNING" displayName="Synchronization on 'static' field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization on &lt;code&gt;static&lt;/code&gt; fields. While not strictly incorrect,
synchronization on &lt;code&gt;static&lt;/code&gt; fields can lead to bad performance because of contention.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="WhileLoopSpinsOnField" defaultSeverity="WARNING" displayName="'while' loop spins on field" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;while&lt;/code&gt; loops that spin on the
value of a non-&lt;code&gt;volatile&lt;/code&gt; field, waiting for it to be changed by another thread.
&lt;p&gt;
In addition to being potentially extremely CPU intensive when little work is done inside the loop, such
loops are likely to have different semantics from what was intended.
The Java Memory Model allows such loops to never complete even if another thread changes the field's value.
&lt;/p&gt;
&lt;p&gt;
Additionally, since Java 9 it's recommended to call &lt;code&gt;Thread.onSpinWait()&lt;/code&gt; inside a spin loop
on a &lt;code&gt;volatile&lt;/code&gt; field, which may significantly improve performance on some hardware.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class SpinsOnField {
    boolean ready = false;

    void run() {
      while (!ready) {
      }
      // do some work
    }

    void markAsReady() {
      ready = true;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class SpinsOnField {
    volatile boolean ready = false;

    void run() {
      while (!ready) {
        Thread.onSpinWait();
      }
      // do some work
    }

    void markAsReady() {
      ready = true;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the inspection options to only report empty &lt;code&gt;while&lt;/code&gt; loops.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExtendsThread" defaultSeverity="WARNING" displayName="Class directly extends 'Thread'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that directly extend &lt;code&gt;java.lang.Thread&lt;/code&gt;.
It is usually recommended to prefer composition over inheritance to create more reusable code that is easier to modify later.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MainThread extends Thread {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SynchronizationOnGetClass" defaultSeverity="WARNING" displayName="Synchronization on 'getClass()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization on a call to &lt;code&gt;getClass()&lt;/code&gt;.
&lt;p&gt;
  If the class containing the synchronization is subclassed, the subclass
  will
  synchronize on a different class object. Usually the call to &lt;code&gt;getClass()&lt;/code&gt; can be replaced with a class literal expression, for
  example &lt;code&gt;String.class&lt;/code&gt;. An even better solution is synchronizing on a &lt;code&gt;private static final&lt;/code&gt; lock object, access to
  which can be completely controlled.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; synchronized(getClass()) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MethodMayBeSynchronized" defaultSeverity="WARNING" displayName="Method with single 'synchronized' block can be replaced with 'synchronized' method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose body contains a single &lt;code&gt;synchronized&lt;/code&gt; statement.
A lock expression for this &lt;code&gt;synchronized&lt;/code&gt; statement must be equal to
&lt;code&gt;this&lt;/code&gt; for instance methods or &lt;code&gt;[ClassName].class&lt;/code&gt; for static methods.
&lt;p&gt;
  To improve readability of such methods,
  you can remove the &lt;code&gt;synchronized&lt;/code&gt; wrapper and mark the method as &lt;code&gt;synchronized&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public int generateInt(int x) {
    synchronized (this) {
      return 1;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public synchronized int generateInt(int x) {
    return 1;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedSynchronizedStatement" defaultSeverity="WARNING" displayName="Nested 'synchronized' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;code&gt;synchronized&lt;/code&gt; statements.
It is recommended to avoid nested synchronization if possible, because in some cases it may lead to a deadlock.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  synchronized (lockA){
    //thread 1 is waiting for lockB
    synchronized (lockB){ //warning
    }
  }
  ...
  synchronized (lockB) {
    //thread 2 is waiting for lockA
    synchronized (lockA) { //warning
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NakedNotify" defaultSeverity="WARNING" displayName="'notify()' or 'notifyAll()' without corresponding state change" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Object.notify()&lt;/code&gt; or &lt;code&gt;Object.notifyAll()&lt;/code&gt; being called without any detectable state change occurring.
&lt;p&gt;
  Normally, &lt;code&gt;Object.notify()&lt;/code&gt; and &lt;code&gt;Object.notifyAll()&lt;/code&gt; are used to inform other threads that a state change has
  occurred. That state change should occur in a synchronized context that contains the &lt;code&gt;Object.notify()&lt;/code&gt; or
  &lt;code&gt;Object.notifyAll()&lt;/code&gt; call, and prior to the call. While not having such a state change isn't necessarily incorrect, it is
  certainly worth examining.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  synchronized (this) {
    notify();
  }
  // no state change
  synchronized (this) {
    notify(); // this notify might be redundant
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VolatileArrayField" defaultSeverity="WARNING" displayName="Volatile array field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports array fields that are declared &lt;code&gt;volatile&lt;/code&gt;. Such declarations
may be confusing because accessing the array itself follows the rules for &lt;code&gt;volatile&lt;/code&gt;
fields, but accessing the array's contents does not.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Data {
    private volatile int[] idx = new int[0];
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  If such volatile access is needed for array contents, consider using
  &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; classes instead:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Data {
    private final AtomicIntegerArray idx = new AtomicIntegerArray(new int[0]);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SynchronizeOnNonFinalField" defaultSeverity="WARNING" displayName="Synchronization on a non-final field" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;synchronized&lt;/code&gt; statement lock expressions
that consist of a non-&lt;code&gt;final&lt;/code&gt; field reference.
Such statements are unlikely to have useful semantics, as different
threads may acquire different locks even when operating on the same object.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  private Object o;
  public void foo() {
    synchronized (o) // synchronization on a non-final field
    { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WaitWhileHoldingTwoLocks" defaultSeverity="WARNING" displayName="'wait()' while holding two locks" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;wait()&lt;/code&gt; methods that may occur while the current thread is holding two locks.
&lt;p&gt;
  Since calling &lt;code&gt;wait()&lt;/code&gt; only releases one lock on its target,
  waiting with two locks held can easily lead to a deadlock.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  synchronized (lockA) {
    synchronized (lockB) {
      lockB.wait(); //warning
      //thread A is stuck here holding lockA
    }
  }

  synchronized (lockA) { //thread B can't enter the block and release thread A
    lockB.notify();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DoubleCheckedLocking" defaultSeverity="WARNING" displayName="Double-checked locking" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;a href="https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html"&gt;double-checked locking&lt;/a&gt;.
&lt;p&gt;
  Double-checked locking tries to initialize a field on demand and in a thread-safe manner, while avoiding the cost of synchronization.
  Unfortunately it is not thread-safe when used on a field that is not declared &lt;code&gt;volatile&lt;/code&gt;.
  When using Java 1.4 or earlier, double-checked locking doesn't work even with a &lt;code&gt;volatile&lt;/code&gt; field.
  Read the article linked above for a detailed explanation of the problem.
&lt;/p&gt;
&lt;p&gt;Example of incorrect double-checked locking:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    private Helper helper = null;
    public Helper getHelper() {
      if (helper == null)
        synchronized(this) {
          if (helper == null) helper = new Helper();
        }
        return helper;
      }
    }
    // other functions and members...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SynchronizedOnLiteralObject" defaultSeverity="WARNING" displayName="Synchronization on an object initialized with a literal" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;synchronized&lt;/code&gt; blocks that lock on an object initialized with a literal.
&lt;p&gt;
  String literals are interned and &lt;code&gt;Character&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; literals can be allocated from a cache.
  Because of this, it is possible that some other part of the system, which uses an object initialized with the same literal, is actually
  holding a reference to the exact same object. This can create unexpected dead-lock situations, if the lock object was thought to be private.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    final String mutex = "Mutex";
    void method() {
      synchronized (mutex) {
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;strong&gt;Warn on all possible literals&lt;/strong&gt; option to report any synchronization on
  &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; objects.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AwaitWithoutCorrespondingSignal" defaultSeverity="WARNING" displayName="'await()' without corresponding 'signal()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Condition.await()&lt;/code&gt;,
for which no call to a corresponding &lt;code&gt;Condition.signal()&lt;/code&gt; or &lt;code&gt;Condition.signalAll()&lt;/code&gt; can be found.
&lt;p&gt;
  Calling &lt;code&gt;Condition.await()&lt;/code&gt; in a thread without corresponding &lt;code&gt;Condition.signal()&lt;/code&gt; may cause the thread
  to become disabled until it is interrupted or "spurious wakeup" occurs.
&lt;/p&gt;
&lt;p&gt;Only calls that target fields of the current class are reported by this inspection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Queue {
    private final Condition isEmpty = ...;

    void add(Object elem) {
      // ...
      // isEmpty.signal();
      // ...
    }

    void remove(Object elem) throws InterruptedException {
      // ...
      isEmpty.await(); // 'await()' doesn't contain corresponding 'signal()'/'signalAll()' call
      // ...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BusyWait" defaultSeverity="WARNING" displayName="Busy wait" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.Thread.sleep()&lt;/code&gt; that occur inside loops.
&lt;p&gt;Such calls
  are indicative of "busy-waiting". Busy-waiting is often inefficient, and may result in unexpected deadlocks
  as busy-waiting threads do not release locked resources.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
     volatile int x;
     public void waitX() throws Exception {
      while (x &amp;gt; 0) {
        Thread.sleep(10);//warning: Call to 'Thread.sleep()' in a loop, probably busy-waiting
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadLocalNotStaticFinal" defaultSeverity="WARNING" displayName="'ThreadLocal' field not declared 'static final'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields of type &lt;code&gt;java.lang.ThreadLocal&lt;/code&gt; that are not declared &lt;code&gt;static final&lt;/code&gt;.
&lt;p&gt;
  In the most common case, a &lt;code&gt;java.lang.ThreadLocal&lt;/code&gt; instance associates state with a thread.
  A non-static non-final &lt;code&gt;java.lang.ThreadLocal&lt;/code&gt; field associates state with an instance-thread combination.
  This is usually unnecessary and quite often is a bug that can cause memory leaks and incorrect behavior.
&lt;/p&gt;
&lt;p&gt;
  A quick-fix is suggested to make the field &lt;code&gt;static final&lt;/code&gt;.
&lt;p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  private ThreadLocal tl = ThreadLocal.withInitial(() -&gt; Boolean.TRUE);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SynchronizeOnThis" defaultSeverity="WARNING" displayName="Synchronization on 'this'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization on &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; expressions.
The reported constructs include &lt;code&gt;synchronized&lt;/code&gt; blocks and calls to &lt;code&gt;wait()&lt;/code&gt;,
&lt;code&gt;notify()&lt;/code&gt; or &lt;code&gt;notifyAll()&lt;/code&gt;.
&lt;p&gt;There are several reasons synchronization on &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; expressions may be a bad idea:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    it makes synchronization a part of the external interface of the class,
    which makes a future change to a different locking mechanism difficult,
  &lt;/li&gt;
  &lt;li&gt;
    it becomes hard to track just who is locking on a given object,
  &lt;/li&gt;
  &lt;li&gt;
    it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an alternative, consider synchronizing on a &lt;code&gt;private final&lt;/code&gt; lock object, access to which can be completely controlled.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public void print() {
    synchronized(this) { // warning: Lock operations on 'this' may have unforeseen side-effects
      System.out.println("synchronized");
    }
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AwaitNotInLoop" defaultSeverity="WARNING" displayName="'await()' not called in loop" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;java.util.concurrent.locks.Condition.await()&lt;/code&gt; not being called inside a loop.
&lt;p&gt;
  &lt;code&gt;await()&lt;/code&gt; and related methods are normally used to suspend a thread until some condition becomes true.
  As the thread could have been woken up for a different reason,
  the condition should be checked after the &lt;code&gt;await()&lt;/code&gt; call returns.
  A loop is a simple way to achieve this.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void acquire(Condition released) throws InterruptedException {
    released.await();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good code should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void acquire(Condition released) throws InterruptedException {
    while (acquired) {
      released.await();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SharedThreadLocalRandom" defaultSeverity="WARNING" displayName="'ThreadLocalRandom' instance might be shared" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;java.util.concurrent.ThreadLocalRandom&lt;/code&gt; instances which might be shared between threads.
&lt;p&gt;
  A &lt;code&gt;ThreadLocalRandom&lt;/code&gt; should not be shared between threads because that is not thread-safe.
  The inspection reports instances that are assigned to a field used as a method argument,
  or assigned to a local variable and used in anonymous or nested classes as they might get shared between threads.
&lt;/p&gt;
&lt;p&gt;
  Usages of &lt;code&gt;ThreadLocalRandom&lt;/code&gt; should typically look like &lt;code&gt;ThreadLocalRandom.current().nextInt(...)&lt;/code&gt;
  (or &lt;code&gt;nextDouble(...)&lt;/code&gt; etc.).
  When all usages are in this form, &lt;code&gt;ThreadLocalRandom&lt;/code&gt; instances cannot be used accidentally by multiple threads.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    class Main {
      void printRandomNumbersAsync() {
        ThreadLocalRandom random = ThreadLocalRandom.current();
        CompletableFuture.supplyAsync(() -&amp;gt; generateNumbers(random))
          .thenAccept(numbers -&amp;gt; System.out.println(Arrays.toString(numbers)));
      }

      private int[] generateNumbers(Random random) {
        return random.ints(1000, 0, 100).toArray();
      }
    }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the options to list methods that are safe to be passed to &lt;code&gt;ThreadLocalRandom&lt;/code&gt; instances as an argument.
  It's possible to use regular expressions for method names.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicFieldAccessedInSynchronizedContext" defaultSeverity="WARNING" displayName="Non-private field accessed in 'synchronized' context" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;final&lt;/code&gt;, non-&lt;code&gt;private&lt;/code&gt; fields that are accessed in a synchronized context.
&lt;p&gt;
  A non-&lt;code&gt;private&lt;/code&gt; field cannot be guaranteed to always be accessed in a synchronized manner, and such "partially synchronized"
  access may result in unexpectedly inconsistent data structures.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Bar {
    public String field1;
  }
  public Bar myBar;

  synchronized public void sample() {
   myBar.field1 = "bar";
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SynchronizeOnLock" defaultSeverity="WARNING" displayName="Synchronization on a 'Lock' object" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;synchronized&lt;/code&gt; blocks that lock on an instance of &lt;code&gt;java.util.concurrent.locks.Lock&lt;/code&gt;.
Such synchronization is almost certainly unintended, and appropriate versions of &lt;code&gt;.lock()&lt;/code&gt;
and &lt;code&gt;.unlock()&lt;/code&gt; should be used instead.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  final ReentrantLock lock = new ReentrantLock();

  public void foo() {
    synchronized (lock) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SafeLock" defaultSeverity="WARNING" displayName="Lock acquired but not safely unlocked" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;java.util.concurrent.locks.Lock&lt;/code&gt; resources that are not acquired in front of a
&lt;code&gt;try&lt;/code&gt; block or not unlocked in the corresponding &lt;code&gt;finally&lt;/code&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  lock.lock(); // will be reported since the 'finally' block is missing
  try {
    doSmthWithLock();
  } catch (IOException e) {
    throw new UncheckedIOException(e);
  }
  lock.unlock();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SynchronizationOnLocalVariableOrMethodParameter" defaultSeverity="WARNING" displayName="Synchronization on local variable or method parameter" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports synchronization on a local variable or parameter. 
&lt;p&gt;
  It is very difficult to guarantee correct operation when such synchronization is used.
  It may be possible to improve such code, for example, by controlling access using a synchronized wrapper class or by synchronizing on a
  field.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void bar() {
    final Object lock = new Object();
    synchronized (lock) { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ThreadStartInConstruction" defaultSeverity="WARNING" displayName="Call to 'Thread.start()' during object construction" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;start()&lt;/code&gt; on &lt;code&gt;java.lang.Thread&lt;/code&gt;
or any of its subclasses during object construction.
&lt;p&gt;
  While occasionally useful, such constructs should be avoided due to inheritance issues.
  Subclasses of a class that launches a thread during the object construction will not have finished
  any initialization logic of their own before the thread has launched.
&lt;/p&gt;
&lt;p&gt;This inspection does not report if the class that starts a thread is declared &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyThread extends Thread {
    MyThread() {
      start();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonSynchronizedMethodOverridesSynchronizedMethod" defaultSeverity="WARNING" displayName="Unsynchronized method overrides 'synchronized' method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;synchronized&lt;/code&gt; methods overriding &lt;code&gt;synchronized&lt;/code&gt; methods.
&lt;p&gt;
  The overridden method will not be automatically synchronized if the superclass method
  is declared as &lt;code&gt;synchronized&lt;/code&gt;. This may result in unexpected race conditions when using the subclass.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Super {
    synchronized void process() {}
  }
  class Sub extends Super {
    // Unsynchronized method 'process()' overrides synchronized method
    void process() {}
  }  
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadStopSuspendResume" defaultSeverity="WARNING" displayName="Call to 'Thread.stop()', 'suspend()' or 'resume()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Thread.stop()&lt;/code&gt;,
&lt;code&gt;Thread.suspend()&lt;/code&gt;, and &lt;code&gt;Thread.resume()&lt;/code&gt;.
&lt;p&gt;
  These calls are inherently prone to data corruption and deadlocks, and their use is strongly discouraged.
  It is better to use cooperative cancellation instead of &lt;code&gt;stop&lt;/code&gt;, and
  interruption instead of direct calls to &lt;code&gt;suspend&lt;/code&gt; and &lt;code&gt;resume&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WaitOrAwaitWithoutTimeout" defaultSeverity="WARNING" displayName="'wait()' or 'await()' without timeout" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Object.wait()&lt;/code&gt; or &lt;code&gt;Condition.await()&lt;/code&gt; without specifying a timeout.
&lt;p&gt;
  Such calls may be dangerous in high-availability programs, as failures in one
  component may result in blockages of the waiting component
  if &lt;code&gt;notify()&lt;/code&gt;/&lt;code&gt;notifyAll()&lt;/code&gt;
  or &lt;code&gt;signal()&lt;/code&gt;/&lt;code&gt;signalAll()&lt;/code&gt; never get called.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(Object bar) throws InterruptedException {
    bar.wait();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SystemRunFinalizersOnExit" defaultSeverity="WARNING" displayName="Call to 'System.runFinalizersOnExit()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;System.runFinalizersOnExit()&lt;/code&gt;.
&lt;p&gt;
  This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,
  may result in data corruption, a deadlock, and may affect parts of the program far removed from its call point.
  It is deprecated and was removed in JDK 11, and its use is strongly discouraged.
&lt;/p&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 10 or lower.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NotifyCalledOnCondition" defaultSeverity="WARNING" displayName="'notify()' or 'notifyAll()' called on 'java.util.concurrent.locks.Condition' object" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;notify()&lt;/code&gt; or &lt;code&gt;notifyAll()&lt;/code&gt; made on
&lt;code&gt;java.util.concurrent.locks.Condition&lt;/code&gt; object.
&lt;p&gt;
  This is probably a programming error, and some variant of the &lt;code&gt;signal()&lt;/code&gt; or
  &lt;code&gt;signalAll()&lt;/code&gt; method was intended instead, otherwise &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; may occur.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C {
    final Lock l = new ReentrantLock();
    final Condition c = l.newCondition();

    void release() {
      l.lock();
      try {
        c.notifyAll(); // probably 'signalAll()' was intended here
      } finally {
        l.unlock();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadPriority" defaultSeverity="WARNING" displayName="Call to 'Thread.setPriority()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Thread.setPriority()&lt;/code&gt;.
Modifying priorities of threads is an inherently non-portable operation, as no guarantees
are given in the Java specification of how priorities are used in scheduling threads, or even
whether they are used at all.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AccessToNonThreadSafeStaticFieldFromInstance" defaultSeverity="WARNING" displayName="Non-thread-safe 'static' field access" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to &lt;code&gt;static&lt;/code&gt; fields that are of a non-thread-safe type.
&lt;p&gt;
  When a &lt;code&gt;static&lt;/code&gt; field is accessed from an instance method or a non-synchronized block,
  multiple threads can access that field.
  This can lead to unspecified side effects, like exceptions and incorrect results.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Sample {
    private static final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    String method() {
      return df.format("");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  You can specify which types should be considered not thread-safe.
  Only fields with these exact types or initialized with these exact types are reported,
  because there may exist thread-safe subclasses of these types.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptySynchronizedStatement" defaultSeverity="WARNING" displayName="Empty 'synchronized' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;synchronized&lt;/code&gt; statements with empty bodies.
&lt;p&gt;
  Empty &lt;code&gt;synchronized&lt;/code&gt; statements are sometimes used to wait for other threads to
  release a particular resource. However, there is no guarantee that the same resource
  won't be acquired again right after the empty &lt;code&gt;synchronized&lt;/code&gt; statement finishes.
  For proper synchronization, the resource should be utilized inside the &lt;code&gt;synchronized&lt;/code&gt; block.
&lt;/p&gt;
&lt;p&gt;
  Also, an empty &lt;code&gt;synchronized&lt;/code&gt; block may appear after a refactoring
  when redundant code was removed. In this case, the &lt;code&gt;synchronized&lt;/code&gt; block
  itself will be redundant and should be removed as well.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  synchronized(lock) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  A quick-fix is suggested to remove the empty synchronized statement.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  This inspection is disabled in JSP files.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonAtomicOperationOnVolatileField" defaultSeverity="WARNING" displayName="Non-atomic operation on 'volatile' field" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-atomic operations on volatile fields.
&lt;p&gt;
  An example of a non-atomic operation is updating the field using the increment operator.
  As the operation involves read and write, and other modifications may happen in between, data may become corrupted.
  The operation can be made atomic by surrounding it with a &lt;code&gt;synchronized&lt;/code&gt; block or
  using one of the classes from the &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; package.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  private volatile int v = 1;

  void foo() {
    v = 2 * v;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AccessToStaticFieldLockedOnInstance" defaultSeverity="WARNING" displayName="Access to 'static' field locked on instance data" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to non-constant static fields that are
locked on either &lt;code&gt;this&lt;/code&gt; or an instance field of &lt;code&gt;this&lt;/code&gt;.
&lt;p&gt;
  Locking a static field on instance data does not prevent the field from being
  modified by other instances, and thus may result in unexpected race conditions.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  static String test;
  public void foo() {
      synchronized (this) {
          System.out.println(test); // warning
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  There is a quick-fix that allows ignoring static fields of specific types.
  You can manage those ignored types in the inspection options.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to specify which classes used for static fields should be ignored.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadLocalSetWithNull" defaultSeverity="WEAK WARNING" displayName="'ThreadLocal.set()' with null as an argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;java.lang.ThreadLocal.set()&lt;/code&gt; with null as an argument.
&lt;p&gt;This call does not free the resources, and it may cause a memory leak.&lt;/p&gt;
It may happen because:
&lt;ul&gt;
  &lt;li&gt;Firstly, &lt;code&gt;ThreadLocal.set(null)&lt;/code&gt; finds a map associated with the current Thread. If there is no such a map, it will be created&lt;/li&gt;
  &lt;li&gt;It sets key and value: &lt;code&gt;map.set(this, value)&lt;/code&gt;, where &lt;code&gt;this&lt;/code&gt; refers to instance of &lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;java.lang.ThreadLocal.remove()&lt;/code&gt; should be used to free the resources.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ThreadLocal&amp;lt;Integer&amp;gt; threadLocal = new ThreadLocal&amp;lt;&amp;gt;();
  threadLocal.set(null);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  threadLocal.remove();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;New in 2023.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SynchronizedMethod" defaultSeverity="WARNING" displayName="'synchronized' method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;synchronized&lt;/code&gt; modifier on methods.
&lt;p&gt;
  There are several reasons a &lt;code&gt;synchronized&lt;/code&gt; modifier on a method may be a bad idea:
&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    As little work as possible should be performed under a lock. Therefore it is often better to use a &lt;code&gt;synchronized&lt;/code&gt; block and
    keep there only the code that works with shared state.
  &lt;/li&gt;
  &lt;li&gt;
    Synchronization becomes a part of a method's interface. This makes a transition to a different locking mechanism difficult.
  &lt;/li&gt;
  &lt;li&gt;
    Keeping track of what is locking a particular object gets harder.
  &lt;/li&gt;
  &lt;li&gt;
    The DoS (denial-of-service) attack becomes feasible either on purpose or unknowingly when inheriting the method's class.
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
  As an alternative, consider synchronizing on a &lt;code&gt;private final&lt;/code&gt; lock object, access to which can be completely controlled.
&lt;/p&gt;
&lt;p&gt;A quick-fix is provided to wrap the method body with &lt;code&gt;synchronized(this)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    public synchronized void fooBar() {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    public void fooBar() {
      synchronized (this) {
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;You can configure the following options for this inspection:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Include native methods&lt;/strong&gt; - include native methods into the inspection's scope.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ignore methods overriding a synchronized method&lt;/strong&gt; -
    do not report methods that override a &lt;code&gt;synchronized&lt;/code&gt; method.&lt;/li&gt;
&lt;/ol&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallToNativeMethodWhileLocked" defaultSeverity="WARNING" displayName="Call to a 'native' method while locked" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls &lt;code&gt;native&lt;/code&gt; methods within a &lt;code&gt;synchronized&lt;/code&gt; block or method.
&lt;p&gt;
  When possible, it's better to keep calls to &lt;code&gt;native&lt;/code&gt; methods out of the synchronized context
  because such calls cause an expensive context switch and may lead to performance issues.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  native void nativeMethod();

  void example(){
    synchronized (lock){
      nativeMethod();//warning
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WaitWithoutCorrespondingNotify" defaultSeverity="WARNING" displayName="'wait()' without corresponding 'notify()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Object.wait()&lt;/code&gt;, for which no call to the corresponding &lt;code&gt;Object.notify()&lt;/code&gt; or
&lt;code&gt;Object.notifyAll()&lt;/code&gt; can be found.
&lt;p&gt;This inspection only reports calls with qualifiers referencing fields of the current class.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Foo {
    public Object foo = new Object();

    void bar() throws InterruptedException {
      this.foo.wait();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WaitNotifyNotInSynchronizedContext" defaultSeverity="WARNING" displayName="'wait()' or 'notify()' is not in synchronized context" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt;, and &lt;code&gt;notifyAll()&lt;/code&gt;
that are not made inside a corresponding synchronized statement or synchronized method.
&lt;p&gt;
  Calling these methods on an object
  without holding a lock on that object causes &lt;code&gt;IllegalMonitorStateException&lt;/code&gt;.
  Such a construct is not necessarily an error, as the necessary lock may be acquired before
  the containing method is called, but it's worth looking at.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Sync {
    private final Object lock = new Object();

    void test() throws InterruptedException {
      synchronized (this) {
        lock.wait(); // 'lock.wait()' is not synchronized on 'lock'
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AtomicFieldUpdaterIssues" defaultSeverity="WARNING" displayName="Inconsistent 'AtomicFieldUpdater' declaration" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues with &lt;code&gt;AtomicLongFieldUpdater&lt;/code&gt;,
&lt;code&gt;AtomicIntegerFieldUpdater&lt;/code&gt;, or &lt;code&gt;AtomicReferenceFieldUpdater&lt;/code&gt; fields (the &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; package).
&lt;p&gt;The reported issues are identical to the runtime problems that can happen with atomic field updaters:
  specified field not found, specified field not accessible, specified field has a wrong type, and so on.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;pre&gt;&lt;code&gt;
  class A {
    private static volatile int value = 0;
    private static final AtomicIntegerFieldUpdater updater =
    AtomicIntegerFieldUpdater.newUpdater((A.class), "value"); // warning: Field 'value' has 'static' modifier
  }
  &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;&lt;pre&gt;&lt;code&gt;
  class B {
    private static final AtomicIntegerFieldUpdater updater =
      AtomicIntegerFieldUpdater.newUpdater(B.class, "value"); // warning: No field named 'value' found in class 'B'
  }
  &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WaitNotInLoop" defaultSeverity="WARNING" displayName="'wait()' not called in loop" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;wait()&lt;/code&gt; that are not made inside a loop.
&lt;p&gt;
  &lt;code&gt;wait()&lt;/code&gt; is normally used to suspend a thread until some condition becomes true.
  As the thread could have been waken up for a different reason,
  the condition should be checked after the &lt;code&gt;wait()&lt;/code&gt; call returns.
  A loop is a simple way to achieve this.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class BoundedCounter {
    private int count;
    synchronized void inc() throws InterruptedException {
      if (count &gt;= 10) wait();
      ++count;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good code should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class BoundedCounter {
    private int count;
    synchronized void inc() throws InterruptedException {
      while (count &gt;= 10) wait();
      ++count;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectNotify" defaultSeverity="WARNING" displayName="Call to 'notify()' instead of 'notifyAll()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Object.notify()&lt;/code&gt;. While occasionally useful, in almost all cases
&lt;code&gt;Object.notifyAll()&lt;/code&gt; is a better choice because calling &lt;code&gt;Object.notify()&lt;/code&gt; may lead to deadlocks.
See Doug Lea's &lt;i&gt;Concurrent Programming in Java&lt;/i&gt; for a discussion.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionSignal" defaultSeverity="WARNING" displayName="Call to 'signal()' instead of 'signalAll()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.util.concurrent.locks.Condition.signal()&lt;/code&gt;. While occasionally useful, in almost all cases
&lt;code&gt;signalAll()&lt;/code&gt; is a better and safer choice.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SleepWhileHoldingLock" defaultSeverity="WARNING" displayName="Call to 'Thread.sleep()' while synchronized" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.Thread.sleep()&lt;/code&gt; methods that occur
within a &lt;code&gt;synchronized&lt;/code&gt; block or method.
&lt;p&gt;
  &lt;code&gt;sleep()&lt;/code&gt; within a
  &lt;code&gt;synchronized&lt;/code&gt; block may result in decreased performance, poor scalability, and possibly
  even deadlocking. Consider using &lt;code&gt;wait()&lt;/code&gt; instead,
  as it will release the lock held.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  synchronized (lock) {
    Thread.sleep(100);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NotifyWithoutCorrespondingWait" defaultSeverity="WARNING" displayName="'notify()' without corresponding 'wait()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Object.notify()&lt;/code&gt; or &lt;code&gt;Object.notifyAll()&lt;/code&gt; for which no call to a corresponding
&lt;code&gt;Object.wait()&lt;/code&gt; can be found.
&lt;p&gt;Only calls that target fields of the current class are reported by this inspection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  synchronized (synList) {
    synList.notify(); //synList.wait() is never called
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldAccessedSynchronizedAndUnsynchronized" defaultSeverity="WARNING" displayName="Field accessed in both 'synchronized' and unsynchronized contexts" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-final fields that are accessed in both &lt;code&gt;synchronized&lt;/code&gt; and
non-&lt;code&gt;synchronized&lt;/code&gt; contexts.
&lt;code&gt;volatile&lt;/code&gt; fields as well as accesses in constructors and initializers are ignored by this inspection.
&lt;p&gt;
  Such "partially synchronized" access is often the result of a coding oversight
  and may lead to unexpectedly inconsistent data structures.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Program {
    Console console; // warning: Field 'console' is accessed in both synchronized and unsynchronized contexts

    public synchronized void execute() {
      console.print("running");
    }

    public void check() {
      console.check();
    }
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to specify if simple getters and setters are counted as accesses too.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AtomicFieldUpdaterNotStaticFinal" defaultSeverity="WARNING" displayName="'AtomicFieldUpdater' field not declared 'static final'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields of types:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;java.util.concurrent.atomic.AtomicLongFieldUpdater&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.concurrent.atomic.AtomicIntegerFieldUpdater&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.concurrent.atomic.AtomicReferenceFieldUpdater&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
that are not &lt;code&gt;static final&lt;/code&gt;.
Because only one atomic field updater is needed for updating a &lt;code&gt;volatile&lt;/code&gt; field in all instances
of a class, it can almost always be &lt;code&gt;static&lt;/code&gt;.

&lt;p&gt;Making the updater &lt;code&gt;final&lt;/code&gt; allows the JVM to optimize access for improved performance.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    private volatile int id;
    private AtomicIntegerFieldUpdater&amp;lt;Main&amp;gt; idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, "id");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    private volatile int id;
    private static final AtomicIntegerFieldUpdater&amp;lt;Main&amp;gt; idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, "id");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadYield" defaultSeverity="WARNING" displayName="Call to 'Thread.yield()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Thread.yield()&lt;/code&gt;.
&lt;p&gt;
  The behavior of &lt;code&gt;yield()&lt;/code&gt; is non-deterministic and platform-dependent, and it is rarely appropriate to use this method.
  Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public static void main(String[] args) {
    Runnable r = () -&gt; {
      for (int i = 0; i &amp;lt; 10; i++) {
        System.out.println(i);
        Thread.yield();
      }
    };
    new Thread(r).start();
    new Thread(r).start();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnconditionalWait" defaultSeverity="WARNING" displayName="Unconditional 'wait()' call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;wait()&lt;/code&gt; being called unconditionally within a synchronized context.
&lt;p&gt;
  Normally, &lt;code&gt;wait()&lt;/code&gt; is used to block a thread until some condition is true. If
  &lt;code&gt;wait()&lt;/code&gt; is called unconditionally, it often indicates that the condition was
  checked before a lock was acquired. In that case a data race may occur, with the condition
  becoming true between the time it was checked and the time the lock was acquired.
&lt;/p&gt;
&lt;p&gt;
  While constructs found by this inspection are not necessarily incorrect, they are certainly worth examining.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Bar {
      void foo() throws InterruptedException {
          synchronized (this) {
              wait(); // warning
          }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadWithDefaultRunMethod" defaultSeverity="WARNING" displayName="Instantiating a 'Thread' with default 'run()' method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiations of &lt;code&gt;Thread&lt;/code&gt; or an inheritor without specifying
a &lt;code&gt;Runnable&lt;/code&gt; parameter or overriding the &lt;code&gt;run()&lt;/code&gt; method.
Such threads do nothing useful.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new Thread().start();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticInitializerReferencesSubClass" defaultSeverity="WARNING" displayName="Static initializer references subclass" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that refer to their subclasses in static initializers or static fields.
&lt;p&gt;Such references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load the superclass
  and another thread tries to load the subclass at the same time.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {
    static final Child field = new Child();
  }
  class Child extends Parent { }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SignalWithoutCorrespondingAwait" defaultSeverity="WARNING" displayName="'signal()' without corresponding 'await()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Condition.signal()&lt;/code&gt; or &lt;code&gt;Condition.signalAll()&lt;/code&gt;
for which no call to a corresponding &lt;code&gt;Condition.await()&lt;/code&gt; can be found.
&lt;p&gt;Only calls that target fields of the current class are reported by this inspection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Queue {
    private final Condition isEmpty = ...;

    void add(Object elem) {
      // ...
      isEmpty.signal(); // warning: Call to 'signal()' without corresponding 'await()'
      // ...
    }

    void remove(Object elem) throws InterruptedException {
      // ...
      //      isEmpty.await();
      // ...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WaitCalledOnCondition" defaultSeverity="WARNING" displayName="'wait()' called on 'java.util.concurrent.locks.Condition' object" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;wait()&lt;/code&gt; made on a &lt;code&gt;java.util.concurrent.locks.Condition&lt;/code&gt;
object. This is probably a programming error, and some variant of the &lt;code&gt;await()&lt;/code&gt; method was intended instead.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void acquire(Condition released) throws InterruptedException {
    while (acquired) {
      released.wait();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good code would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void acquire(Condition released) throws InterruptedException {
    while (acquired) {
      released.await();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JSON and JSON5" path=""><inspection shortName="Json5StandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON5 standard" enabled="true" language="JSON5" pluginId="com.intellij.modules.json" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency with &lt;a href="http://json5.org"&gt;the language specification&lt;/a&gt; in a JSON5 file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated JSON property" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated property in a JSON file.&lt;br&gt;
Note that deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard extension 'deprecationMessage'.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaCompliance" defaultSeverity="WARNING" displayName="Compliance with JSON schema" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistence between a JSON file and the &lt;a href="https://json-schema.org"&gt;JSON schema&lt;/a&gt; that is assigned to it.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonStandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON standard" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following discrepancies of a JSON file with  &lt;a href="https://tools.ietf.org/html/rfc7159"&gt;the language specification&lt;/a&gt;:
&lt;ul&gt;
  &lt;li&gt;A line or  block comment (configurable).&lt;/li&gt;
  &lt;li&gt;Multiple top-level values (expect for JSON Lines files, configurable for others).&lt;/li&gt;
  &lt;li&gt;A trailing comma in an object or array (configurable).&lt;/li&gt;
  &lt;li&gt;A single quoted string.&lt;/li&gt;
  &lt;li&gt;A property key is a not a double quoted strings.&lt;/li&gt;
  &lt;li&gt;A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaRefReference" defaultSeverity="WARNING" displayName="Unresolved '$ref' and '$schema' references" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;code&gt;$ref&lt;/code&gt; or &lt;code&gt;$schema&lt;/code&gt; path in a JSON schema.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonDuplicatePropertyKeys" defaultSeverity="WARNING" displayName="Duplicate keys in object literals" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate key in an object literal.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code Coverage" path=""><inspection shortName="JvmCoverageInspection" defaultSeverity="WARNING" displayName="Check Kotlin and Java source code coverage" enabled="true" language="UAST" pluginId="org.intellij.qodana" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports methods and classes whose coverage is below a certain threshold.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaCoverageInspection" defaultSeverity="WARNING" displayName="Check Scala source code coverage" enabled="true" language="UAST" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports Scala methods and classes whose coverage is below a certain threshold.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Naming conventions" path="Kotlin"><inspection shortName="PrivatePropertyName" defaultSeverity="WEAK WARNING" displayName="Private property naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports private property names that do not follow the recommended naming conventions.&lt;/p&gt;
&lt;p&gt;
    Consistent naming allows for easier code reading and understanding.
    According to the &lt;a href="https://kotlinlang.org/docs/coding-conventions.html#naming-rules"&gt;Kotlin official style guide&lt;/a&gt;,
    private property names should start with a lowercase letter and use camel case.
    Optionally, underscore prefix is allowed but only for &lt;b&gt;private&lt;/b&gt; properties.
&lt;/p&gt;
&lt;p&gt;It is possible to introduce other naming rules by changing the "Pattern" regular expression.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val _My_Cool_Property = ""
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix renames the class according to the Kotlin naming conventions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val _myCoolProperty = ""
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectPropertyName" defaultSeverity="WEAK WARNING" displayName="Object property naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties that do not follow the naming conventions.
&lt;p&gt;The following properties are reported:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Top-level properties&lt;/li&gt;
    &lt;li&gt;Properties in objects and companion objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can specify the required pattern in the inspection options.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kotlinlang.org/docs/coding-conventions.html#naming-rules"&gt;Recommended naming conventions&lt;/a&gt;: it has to start with an uppercase letter, use camel case and no underscores.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // top-level property
  val USER_NAME_FIELD = "UserName"
  // top-level property holding reference to singleton object
  val PersonComparator: Comparator&amp;lt;Person&amp;gt; = /*...*/

  class Person {
    companion object {
      // property in companion object
      val NO_NAME = Person()
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InconsistentCommentForJavaParameter" defaultSeverity="WARNING" displayName="Inconsistent comment for Java parameter" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistent parameter names for &lt;b&gt;Java&lt;/b&gt; method calls specified in a comment block.
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Java
  public class JavaService {
      public void invoke(String command) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
  // Kotlin
  fun main() {
      JavaService().invoke(/* name = */ "fix")
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix corrects the parameter name in the comment block:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun main() {
      JavaService().invoke(/* command = */ "fix")
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionName" defaultSeverity="WEAK WARNING" displayName="Function naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports function names that do not follow the recommended naming conventions.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun Foo() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the problem change the name of the function to match the recommended naming conventions.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PropertyName" defaultSeverity="WEAK WARNING" displayName="Property naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports property names that do not follow the recommended naming conventions.&lt;/p&gt;
&lt;p&gt;
    Consistent naming allows for easier code reading and understanding.
    According to the &lt;a href="https://kotlinlang.org/docs/coding-conventions.html#naming-rules"&gt;Kotlin official style guide&lt;/a&gt;,
    property names should start with a lowercase letter and use camel case.
&lt;/p&gt;
&lt;p&gt;It is possible to introduce other naming rules by changing the "Pattern" regular expression.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val My_Cool_Property = ""
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix renames the class according to the Kotlin naming conventions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val myCoolProperty = ""
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectPrivatePropertyName" defaultSeverity="WEAK WARNING" displayName="Object private property naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties that do not follow the naming conventions.
&lt;p&gt;The following properties are reported:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Private properties in objects and companion objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can specify the required pattern in the inspection options.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kotlinlang.org/docs/coding-conventions.html#naming-rules"&gt;Recommended naming conventions&lt;/a&gt;: it has to start with an underscore or an uppercase letter, use camel case.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Person {
    companion object {
      // property in companion object
      private val NO_NAME = Person()
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassName" defaultSeverity="WEAK WARNING" displayName="Class naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports class names that do not follow the recommended naming conventions.
&lt;p&gt;
    Consistent naming allows for easier code reading and understanding.
    According to the &lt;a href="https://kotlinlang.org/docs/coding-conventions.html#naming-rules"&gt;Kotlin official style guide&lt;/a&gt;,
    class names should start with an uppercase letter and use camel case.
&lt;/p&gt;
&lt;p&gt;It is possible to introduce other naming rules by changing the "Pattern" regular expression.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class user(val name: String)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix renames the class according to the Kotlin naming conventions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class User(val name: String)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LocalVariableName" defaultSeverity="WEAK WARNING" displayName="Local variable naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables that do not follow the naming conventions.
&lt;p&gt;You can specify the required pattern in the inspection options.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kotlinlang.org/docs/coding-conventions.html#function-names"&gt;Recommended naming conventions&lt;/a&gt;: it has to start with a lowercase letter, use camel case and no underscores.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun fibonacciNumber(index: Int): Long = when(index) {
      0 -&gt; 0
      else -&gt; {
          // does not follow naming conventions: contains underscore symbol (`_`)
          var number_one: Long = 0
          // does not follow naming conventions: starts with an uppercase letter
          var NUMBER_TWO: Long = 1
          // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.
          var numberThree: Long = number_one + NUMBER_TWO

          for(currentIndex in 2..index) {
              numberThree = number_one + NUMBER_TWO
              number_one = NUMBER_TWO
              NUMBER_TWO = numberThree
          }
          numberThree
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EnumEntryName" defaultSeverity="WEAK WARNING" displayName="Enum entry naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports enum entry names that do not follow the recommended naming conventions.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum class Foo {
    _Foo,
    foo
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the problem rename enum entries to match the recommended naming conventions.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageName" defaultSeverity="WEAK WARNING" displayName="Package naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports package names that do not follow the naming conventions.
&lt;p&gt;You can specify the required pattern in the inspection options.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kotlinlang.org/docs/coding-conventions.html#naming-rules"&gt;Recommended naming conventions&lt;/a&gt;: names of packages are always lowercase and should not contain underscores.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;code&gt;org.example.project&lt;/code&gt;
&lt;p&gt;Using multi-word names is generally discouraged, but if you do need to use multiple words, you can either just concatenate them together or use camel case&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;code&gt;org.example.myProject&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TestFunctionName" defaultSeverity="WEAK WARNING" displayName="Test function naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports test function names that do not follow the &lt;a href="https://kotlinlang.org/docs/coding-conventions.html#names-for-test-methods"&gt;recommended naming conventions&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstPropertyName" defaultSeverity="WEAK WARNING" displayName="Const property naming convention" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;const&lt;/code&gt; property names that do not follow the recommended naming conventions.
&lt;p&gt;
    Consistent naming allows for easier code reading and understanding.
    According to the &lt;a href="https://kotlinlang.org/docs/coding-conventions.html#property-names"&gt;Kotlin official style guide&lt;/a&gt;,
    &lt;code&gt;const&lt;/code&gt; properties should use uppercase underscore-separated names.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  const val Planck: Double = 6.62607015E-34
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix renames the property:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  const val PLANCK: Double = 6.62607015E-34
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Properties files" path="Scala"><inspection shortName="ScalaUnresolvedPropertyKey" defaultSeverity="ERROR" displayName="Invalid property key" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unresolved or wrongly used &lt;b&gt;I18n&lt;/b&gt; property keys.&lt;/p&gt;
&lt;p&gt;Property keys that are not present in the associated &lt;b&gt;I18n Bundle&lt;/b&gt; will lead to runtime errors.
    The same can be applied to properties that take arguments, which are not provided by the code.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Method signature" path="Scala"><inspection shortName="JavaMutatorMethodOverriddenAsParameterless" defaultSeverity="WARNING" displayName="Java mutator method overridden as parameterless" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods without parameter clauses that override Java methods with mutator-like names.&lt;/p&gt;
&lt;p&gt;Scala allows overriding parameterless Java methods without parameter clauses.
    This is mainly to allow Scala code to override Java accessor methods the same way as Scala accessor methods.
    Namely without parameter clause and thereby adhere to the &lt;a href="https://en.wikipedia.org/wiki/Uniform_access_principle"&gt;uniform access principle&lt;/a&gt;,
    which says that the client code should not be affected by the decision to implement an attribute as a field or method.&lt;/p&gt;

&lt;p&gt;For methods with &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;, however,
    it is convention to have an empty parameter clause.
    This would be in accordance with the &lt;a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle"&gt;Liskov substitution
        principle&lt;/a&gt;, whereby, when an overridden method has side effects,
    the overriding method must also be declared as a method with side effects.&lt;/p&gt;

&lt;p&gt;The quick-fix adds an empty parameter clause.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util

  class Test extends util.ArrayList[String] {
    override def clear: Unit = ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util

  class Test extends util.ArrayList[String] {
    override def clear(): Unit = ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnitMethodIsParameterless" defaultSeverity="WARNING" displayName="Method with Unit result type is parameterless" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods with result type &lt;code&gt;Unit&lt;/code&gt; that do not have parameter clauses.&lt;/p&gt;
&lt;p&gt;Methods with a result type of &lt;code&gt;Unit&lt;/code&gt; are only executed for their
    &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;
    and, by the convention, methods with side effects have at least one (empty) parameter clause.
    &lt;/p&gt;
&lt;p&gt;The quick-fix adds an empty parameter clause.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test: Unit = ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Unit = ()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProcedureDefinition" defaultSeverity="WARNING" displayName="Procedure syntax in method definition" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports method definitions with procedure syntax.&lt;/p&gt;
&lt;p&gt;It is not recommended for developers to use procedure-like syntax for methods.
  It is inconsistent, may lead to errors, and will be removed in Scala 3.&lt;/p&gt;
&lt;p&gt;The quick-fix converts the definition from procedure syntax to function syntax.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    def method() { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    def method(): Unit = { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;em&gt;Hint:&lt;/em&gt; You can use Analyze / Run Inspection by Name (Ctrl+Alt+Shift+I) to apply this inspection to the whole
  project.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyParenMethodOverriddenAsParameterless" defaultSeverity="WARNING" displayName="Empty-paren Scala method overridden as parameterless" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods without parameter clauses that override methods with empty parameter clauses.&lt;/p&gt;

&lt;p&gt;The convention is that a method should have parentheses if it has
    &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;.
    In accordance with the &lt;a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle"&gt;Liskov substitution principle&lt;/a&gt;,
    when an overridden method has a parameter clause, indicating a side effect,
    the overriding method must also be declared as a method with side effects.&lt;/p&gt;

&lt;p&gt;The quick-fix adds an empty parameter clause.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Base {
    def x() = 1
  }
  class Impl extends Base {
    override def x = 2
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fixes are applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Base {
    def x() = 1
  }
  class Impl extends Base {
    override def x() = 2
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyParenMethodAccessedAsParameterless" defaultSeverity="WARNING" displayName="Empty-paren method accessed as parameterless" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports calls without argument clauses referring to methods with an empty parameter clause.&lt;/p&gt;

&lt;p&gt;The convention is that a method should have parentheses if it has
    &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;.
    While it is possible to leave out argument clauses in method calls
    (to adapt the &lt;a href="https://en.wikipedia.org/wiki/Uniform_access_principle"&gt;uniform access principle&lt;/a&gt; for Java),
    it is recommended for users to add one empty argument clause when the invoked method represents more than a property.&lt;/p&gt;

&lt;p&gt;The quick-fix adds an empty argument clause.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Int = ???

  test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fixes are applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Int = ???

  test()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AccessorLikeMethodIsEmptyParen" defaultSeverity="WARNING" displayName="Accessor-like method has empty parameter clause" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods with accessor-like names that have an empty parameter clause.&lt;/p&gt;
&lt;p&gt;Methods that follow &lt;a href="https://en.wikipedia.org/wiki/JavaBean"&gt;JavaBean&lt;/a&gt; naming contract for accessors are
    expected to have no &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;.
    The recommended convention for these methods is to use a parameterless method whenever there are no parameters.&lt;/p&gt;
&lt;p&gt;This convention promotes the &lt;a href="https://en.wikipedia.org/wiki/Uniform_access_principle"&gt;uniform access principle&lt;/a&gt;,
    which says that client code should not be affected by a decision to implement an attribute as a field or  method.&lt;/p&gt;
&lt;p&gt;The quick-fix removes the empty parameter clause.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Test {
    def hasProperty(): Boolean
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Test {
    def hasProperty: Boolean
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection will not report methods that override other members.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParameterlessMemberOverriddenAsEmptyParen" defaultSeverity="WARNING" displayName="Parameterless Scala member overridden as empty-paren" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods with one empty parameter clause that override methods without parameter clauses.&lt;/p&gt;

&lt;p&gt;The recommended convention is to use a method without parameter clauses whenever there are
    no parameters and the method has no
    &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This convention promotes the &lt;a href="https://en.wikipedia.org/wiki/Uniform_access_principle"&gt;uniform access principle&lt;/a&gt;,
    which says that client code should not be affected by a decision to implement an attribute as a field or method.&lt;/p&gt;

&lt;p&gt;In accordance with the &lt;a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle"&gt;Liskov substitution principle&lt;/a&gt;,
    whenever an overridden method doesn't have a parameter clause, the overriding method must also be declared as a method without side effects.&lt;/p&gt;

&lt;p&gt;The quick-fix removes the empty parameter clause.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Base { def isOk: Boolean }

  class Impl extends Base {
    override def isOk(): Boolean = ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Base { def isOk: Boolean }

  class Impl extends Base {
    override def isOk: Boolean = ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MutatorLikeMethodIsParameterless" defaultSeverity="WARNING" displayName="Mutator-like named method is parameterless" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods with mutator-like names that have no parameter clauses.&lt;/p&gt;

&lt;p&gt;For a method with &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;,
    it is convention to have an empty parameter clause to indicate that it is not just an accessor method.&lt;/p&gt;

&lt;p&gt;The quick-fix adds an empty parameter clause.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Test {
    def updateAll: Boolean
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Test {
    def updateAll(): Boolean
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypedParameterWithoutParen" defaultSeverity="INFORMATION" displayName="Typed parameter without parenthesis in functional literal" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports function literal parameters that are not surrounded by parenthesis.&lt;/p&gt;

&lt;p&gt;In Scala 3, a function literal with only one parameter cannot omit the parenthesis around the parameter.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  call { a: Int =&gt; a }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  call { (a: Int) =&gt; a }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaAccessorMethodOverriddenAsEmptyParen" defaultSeverity="WARNING" displayName="Java accessor method overridden with empty argument clause" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods with empty parameter clause that override Java accessor methods.&lt;/p&gt;

&lt;p&gt;Methods that follow the &lt;a href="https://en.wikipedia.org/wiki/JavaBean"&gt;JavaBean&lt;/a&gt; naming contract for accessors are
    expected to have no &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;.
    The recommended convention is to use a parameterless method whenever there are
    no parameters and the method have no side effect.
    This convention promotes the &lt;a href="https://en.wikipedia.org/wiki/Uniform_access_principle"&gt;uniform access principle&lt;/a&gt;,
    which says that the client code should not be affected by the decision to implement an attribute as a field or method.&lt;/p&gt;

&lt;p&gt;The problem is that Java does not implement the uniform access principle
    and doesn't allow methods without parameter clauses.
    To bridge that gap, Scala allows you to override methods with empty parameter clauses with
    methods without parameter clauses.&lt;/p&gt;

&lt;p&gt;The quick-fix removes the empty parameter clause.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class TestException extends Exception {
    override def getMessage(): String = ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class TestException extends Exception {
    override def getMessage: String = ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProcedureDeclaration" defaultSeverity="WARNING" displayName="Procedure syntax in method declaration" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports method declarations with procedure syntax.&lt;/p&gt;
&lt;p&gt;It is not recommended for developers to use procedure-like syntax for methods.
    It is inconsistent, may lead to errors, and will be removed in Scala 3.&lt;/p&gt;
&lt;p&gt;The quick-fix converts the declaration from procedure syntax to function syntax.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Test {
    def method()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Test {
    def method(): Unit
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;em&gt;Hint:&lt;/em&gt; You can use Analyze / Run Inspection by Name (Ctrl+Alt+Shift+I) to apply this inspection to the whole
    project.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ApparentResultTypeRefinement" defaultSeverity="WARNING" displayName="Apparent result type refinement; is an assignment missing?" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;=&lt;/code&gt; missing between result type and function body.&lt;/p&gt;
&lt;p&gt;A type cannot be refined when used as the result type of a function.
    However, when a &lt;code&gt;=&lt;/code&gt; is missing between the result type and function body it might look refined.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): T {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): T = {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaMutatorMethodAccessedAsParameterless" defaultSeverity="WARNING" displayName="Java mutator method accessed as parameterless" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports calls to methods with mutator-like names without argument clauses.&lt;/p&gt;
&lt;p&gt;Scala allows calling parameterless Java methods without argument clauses.
    This is mainly to allow Scala code to use parameterless Java accessor methods the same way as Scala accessor methods.
    Namely without any argument clause and thereby adhere to the&lt;a href="https://en.wikipedia.org/wiki/Uniform_access_principle"&gt;uniform access principle&lt;/a&gt;,
    which says that the client code should not be affected by the decision to implement an attribute as a field or method.&lt;/p&gt;

&lt;p&gt;For methods with &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;, however,
    it is convention to use an empty argument clause.&lt;/p&gt;

&lt;p&gt;The quick-fix adds an empty argument clause.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val stringBuilder = new java.util.ArrayList[String]
  stringBuilder.clear
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val stringBuilder = new java.util.ArrayList[String]
  stringBuilder.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverrideAbstractMember" defaultSeverity="INFORMATION" displayName="Abstract method implementation without override keyword" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports functions that override abstract members but do not have an override modifier.&lt;/p&gt;
&lt;p&gt;Scala does not require a developer to use &lt;code&gt;override&lt;/code&gt; on methods that implement abstract members.
    Nonetheless, it is a good idea to mark such methods with &lt;code&gt;override&lt;/code&gt; to be notified
    by the compiler when the override relationship gets broken (by a subsequent refactoring, for example).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Base {
    def fun(): Int
  }

  class Impl extends Base {
    def fun(): Int = 42
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Base {
    def fun(): Int
  }

  class Impl extends Base {
    override def fun(): Int = 42
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AccessorLikeMethodIsUnit" defaultSeverity="WARNING" displayName="Accessor-like method has Unit result type" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods with accessor-like names that have result type &lt;code&gt;Unit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Methods that follow &lt;a href="https://en.wikipedia.org/wiki/JavaBean"&gt;JavaBean&lt;/a&gt; naming contract for accessors are
    expected to have no &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;. However,
    methods with a result type of &lt;code&gt;Unit&lt;/code&gt; are only executed for their side effects.&lt;/p&gt;
&lt;p&gt;This indicates that the method should either result in a non-&lt;code&gt;Unit&lt;/code&gt; type or
    be renamed to better reflect the side effect.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Test {
    def getTarget(): Unit
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection will not report methods that override other members.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaAccessorEmptyParenCall" defaultSeverity="WARNING" displayName="Java accessor method called with empty argument clause" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports calls to Java accessor methods with empty argument clauses.&lt;/p&gt;

&lt;p&gt;Methods that follow the &lt;a href="https://en.wikipedia.org/wiki/JavaBean"&gt;JavaBean&lt;/a&gt; naming contract for accessors are
    expected to have no &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt;.
    The recommended convention is to use a parameterless method whenever there are
    no parameters and the method have no side effect.
    This convention promotes the &lt;a href="https://en.wikipedia.org/wiki/Uniform_access_principle"&gt;uniform access principle&lt;/a&gt;,
    which says that the client code should not be affected by the decision to implement an attribute as a field or method.&lt;/p&gt;

&lt;p&gt;The problem is that Java does not implement the uniform access principle.
    To bridge that gap, Scala allows you to leave off the empty parentheses
    on an invocation of a Java method that takes no arguments.&lt;/p&gt;

&lt;p&gt;The quick-fix removes the empty argument clause.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  "test".getClass()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  "test".getClass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JPA" path=""><inspection shortName="AssociationFieldHasColumnAnnotation" defaultSeverity="WARNING" displayName="Association field marked with @Colum" enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects incorrect use of &lt;pre&gt;&lt;code&gt;@Column&lt;/code&gt;&lt;/pre&gt; annotation for association attributes with &lt;pre&gt;&lt;code&gt;@OneToOne&lt;/code&gt;&lt;/pre&gt;
and &lt;pre&gt;&lt;code&gt;@ManyToOne&lt;/code&gt;&lt;/pre&gt; annotations.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OneToOneWithLazy" defaultSeverity="WARNING" displayName="Specifying FetchType.LAZY for the non-owning side of the @OneToOne association will not affect the loading. The related entity will still be loaded as if the FetchType.EAGER is defined." enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks for the non-owning side of the &lt;pre&gt;&lt;code&gt;@OneToOne&lt;/code&gt;&lt;/pre&gt; associations with the &lt;pre&gt;&lt;code&gt;FetchType.Lazy&lt;/code&gt;&lt;/pre&gt; attribute.
Specifying &lt;pre&gt;&lt;code&gt;FetchType.LAZY&lt;/code&gt;&lt;/pre&gt; for the non-owning side of the &lt;pre&gt;&lt;code&gt;@OneToOne&lt;/code&gt;&lt;/pre&gt; association will not affect the loading.
The related entity will still be loaded as if the &lt;pre&gt;&lt;code&gt;FetchType.EAGER&lt;/code&gt;&lt;/pre&gt; is defined.
For more info see &lt;a
  href="https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#associations-one-to-one-bidirectional-lazy"&gt;the
  documentation&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LombokBuilderAllArgsInspection" defaultSeverity="WARNING" displayName="Lombok @Builder needs a proper constructor for this class" enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that all-args constructor exists for &lt;pre&gt;&lt;code&gt;@lombok.Builder&lt;/code&gt;&lt;/pre&gt; in JPA entities.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MoreThanOneIdInspection" defaultSeverity="WARNING" displayName="Entity has more than one id attribute." enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks for multiple id attributes in one entity.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConverterNotAnnotatedInspection" defaultSeverity="WARNING" displayName="JPA converter must be annotated with @Converter annotation" enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks for the presence of &lt;pre&gt;&lt;code&gt;@Converter&lt;/code&gt;&lt;/pre&gt; annotation on JPA converter.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ManyToManyCascadeRemove" defaultSeverity="WARNING" displayName="For @ManyToMany associations, the REMOVE entity state transition doesn't make sense to be cascaded because it will propagate beyond the link table." enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks for &lt;pre&gt;&lt;code&gt;@ManyToMany&lt;/code&gt;&lt;/pre&gt; associations with the &lt;pre&gt;&lt;code&gt;CascadeType.REMOVE&lt;/code&gt;&lt;/pre&gt; attribute.
Specifying &lt;pre&gt;&lt;code&gt;CascadeType.REMOVE&lt;/code&gt;&lt;/pre&gt; for &lt;pre&gt;&lt;code&gt;@ManyToMany&lt;/code&gt;&lt;/pre&gt; doesn’t make sense to be cascaded
because it will propagate beyond the link table.
Since the other side might be referenced by other entities on the parent-side, the automatic removal might end up in
a &lt;pre&gt;&lt;code&gt;ConstraintViolationException&lt;/code&gt;&lt;/pre&gt;.
For example, if &lt;pre&gt;&lt;code&gt;@ManyToMany(cascade = CascadeType.ALL)&lt;/code&gt;&lt;/pre&gt; was defined, and the first person would be deleted,
Hibernate would throw an exception because another person is still associated with the address that’s being deleted.
For more info see &lt;a href="https://vladmihalcea.com/hypersistence-optimizer/docs/user-guide/#ManyToManyCascadeRemoveEvent"&gt;the article&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LombokAllArgsInspection" defaultSeverity="WARNING" displayName="Using @AllArgsConstructor for JPA entities without defined no-argument constructor breaks JPA specification." enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that &lt;pre&gt;&lt;code&gt;@lombok.AllArgsConstructor&lt;/code&gt;&lt;/pre&gt; used in JPA entities.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssociationNotMarkedInspection" defaultSeverity="WARNING" displayName="Entity attribute is not marked with association annotation" enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks for associations that are not marked with corresponding annotations.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LombokBuilderInspection" defaultSeverity="WARNING" displayName="Using @Builder for JPA entities without defined no-argument constructor breaks JPA specification." enabled="true" language="UAST" pluginId="com.intellij.jpa.jpb.model" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that &lt;pre&gt;&lt;code&gt;@lombok.Builder&lt;/code&gt;&lt;/pre&gt; used in JPA entities.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Gradle Declarative" path=""><inspection shortName="DeclarativeUnresolvedReference" defaultSeverity="WARNING" displayName="Unresolved reference" enabled="true" language="Declarative" pluginId="com.android.tools.gradle.dcl" pluginVersion="251.27812.49" isGlobalTool="false"></inspection></group><group name="Class metrics" path="Java"><inspection shortName="AnonymousClassMethodCount" defaultSeverity="WARNING" displayName="Anonymous class with too many methods" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous inner classes whose method count exceeds the specified maximum.
&lt;p&gt;Anonymous classes with numerous methods may be
  difficult to understand and should be promoted to become named inner classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Method count limit&lt;/b&gt; field to specify the maximum allowed number of methods in an anonymous inner class.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodCount" defaultSeverity="WARNING" displayName="Class with too many methods" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes whose number of methods exceeds the specified maximum.
&lt;p&gt;Classes with too many methods are often trying to 'do too much'. Consider splitting such a class into multiple smaller classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Method count limit&lt;/b&gt; field to specify the maximum allowed number of methods in a class.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore simple getter and setter methods&lt;/b&gt; option to ignore simple getters and setters in method count.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore methods overriding/implementing a super method&lt;/b&gt; to ignore methods that override or implement a method
    from a superclass.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassComplexity" defaultSeverity="WARNING" displayName="Overly complex class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes whose total complexity exceeds the specified maximum.
&lt;p&gt;The total complexity of a class is the sum of cyclomatic complexities of all the methods
  and initializers the class declares. Inherited methods and initializers are not counted
  toward the total complexity.&lt;/p&gt;
&lt;p&gt;Too high complexity indicates that the class should be refactored into several smaller classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Cyclomatic complexity limit&lt;/b&gt; field below to specify the maximum allowed complexity for a class.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldCount" defaultSeverity="WARNING" displayName="Class with too many fields" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes whose number of fields exceeds the specified maximum.
&lt;p&gt;Classes with a large number of fields are often trying to do too much. Consider splitting such a class into multiple smaller classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Field count limit&lt;/b&gt; field to specify the maximum allowed number of fields in a class.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Include constant fields in count&lt;/b&gt; option to indicate whether constant fields should be counted.&lt;/li&gt;
  &lt;li&gt;By default only immutable &lt;code&gt;static final&lt;/code&gt; objects are counted as constants. Use the &lt;b&gt;'static final' fields count as constant&lt;/b&gt; option
    to count any &lt;code&gt;static final&lt;/code&gt; field as constant.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Include enum constants in count&lt;/b&gt; option to specify whether &lt;code&gt;enum&lt;/code&gt; constants in &lt;code&gt;enum&lt;/code&gt; classes
    should be counted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassCoupling" defaultSeverity="WARNING" displayName="Overly coupled class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that reference too many other classes.
&lt;p&gt;Classes with too high coupling can be very fragile, and should probably be split into smaller classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Class coupling limit&lt;/b&gt; field to specify the maximum allowed coupling for a class.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Include couplings to java system classes&lt;/b&gt; option to specify whether references to system classes
    (those in the &lt;code&gt;java.&lt;/code&gt;or &lt;code&gt;javax.&lt;/code&gt; packages) should be counted.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Include couplings to library classes&lt;/b&gt; option to specify whether references to any library classes should be counted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AnonymousClassComplexity" defaultSeverity="WARNING" displayName="Overly complex anonymous class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous inner classes whose total complexity exceeds the specified maximum.
&lt;p&gt;The total complexity of a class is the sum of cyclomatic complexities of all the methods
  and initializers the class declares. Inherited methods and initializers are not counted
  toward the total complexity.&lt;/p&gt;
&lt;p&gt;Anonymous classes should have very low complexity otherwise they are hard to understand and should be promoted to become named inner classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Cyclomatic complexity limit&lt;/b&gt; field to specify the maximum allowed complexity for a class.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassInheritanceDepth" defaultSeverity="WARNING" displayName="Class too deep in inheritance tree" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that are too deep in the inheritance hierarchy.
&lt;p&gt;Classes that are too deeply inherited may be confusing and indicate that a refactoring is necessary.&lt;/p&gt;
&lt;p&gt;All superclasses from a library are treated as a single superclass, libraries are considered unmodifiable.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Inheritance depth limit&lt;/b&gt; field to specify the maximum inheritance depth for a class.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassNestingDepth" defaultSeverity="WARNING" displayName="Inner class too deeply nested" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes whose number of nested inner classes exceeds the specified maximum.
&lt;p&gt;Nesting inner classes inside other inner classes is confusing and indicates that a refactoring may be necessary.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Nesting limit&lt;/b&gt; field to specify the maximum allowed nesting depth for a class.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstructorCount" defaultSeverity="WARNING" displayName="Class with too many constructors" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes whose number of constructors exceeds the specified maximum.
&lt;p&gt;Classes with too many constructors are prone to initialization errors, and often modeling such a class as multiple subclasses is preferable.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Constructor count limit&lt;/b&gt; field to specify the maximum allowed number of constructors in a class.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore deprecated constructors&lt;/b&gt; option to avoid adding deprecated constructors to the total count.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Kotlin" path=""><inspection shortName="KotlinInvalidBundleOrProperty" defaultSeverity="ERROR" displayName="Invalid property key" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references to &lt;code&gt;.properties&lt;/code&gt; file keys and resource bundles in Kotlin files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DeprecatedGradleDependency" defaultSeverity="WARNING" displayName="Deprecated library is used in Gradle" enabled="true" language="Groovy" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated dependencies in Gradle build scripts.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  dependencies {
      compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:1.2.0"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  dependencies {
      compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.2.0"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DifferentKotlinMavenVersion" defaultSeverity="WARNING" displayName="Maven and IDE plugins versions are different" enabled="true" language="XML" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports that Maven plugin version isn't properly supported in the current IDE plugin.
&lt;p&gt;This inconsistency may lead to different error reporting behavior in the IDE and the compiler&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DifferentKotlinGradleVersion" defaultSeverity="WARNING" displayName="Kotlin Gradle and IDE plugins versions are different" enabled="true" language="Groovy" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports that Gradle plugin version isn't properly supported in the current IDE plugin.
&lt;p&gt;This can cause inconsistencies between IDE and Gradle builds in error reporting or code behavior.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:0.0.1"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the problem, change the Kotlin Gradle plugin version to match the version of Kotlin that is bundled into the IDE plugin.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DifferentStdlibGradleVersion" defaultSeverity="WARNING" displayName="Kotlin library and Gradle plugin versions are different" enabled="true" language="Groovy" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports different Kotlin stdlib and compiler versions.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-stdlib:0.0.1"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the problem change the kotlin stdlib version to match the kotlin compiler version.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KotlinMavenPluginPhase" defaultSeverity="WARNING" displayName="Kotlin Maven Plugin misconfigured" enabled="true" language="XML" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">Reports kotlin-maven-plugin configuration issues</inspection><inspection shortName="DeprecatedMavenDependency" defaultSeverity="WARNING" displayName="Deprecated library is used in Maven" enabled="true" language="XML" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated maven dependency.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;dependencies&gt;
    &amp;lt;dependency&gt;
        &amp;lt;groupId&gt;org.jetbrains.kotlin&amp;lt;/groupId&gt;
        &amp;lt;artifactId&gt;kotlin-stdlib-jre7&amp;lt;/artifactId&gt;
        &amp;lt;version&gt;${kotlin.version}&amp;lt;/version&gt;
    &amp;lt;/dependency&gt;
  &amp;lt;/dependencies&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix changes the deprecated dependency to a maintained one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
   &amp;lt;dependencies&gt;
    &amp;lt;dependency&gt;
        &amp;lt;groupId&gt;org.jetbrains.kotlin&amp;lt;/groupId&gt;
        &amp;lt;artifactId&gt;kotlin-stdlib-jdk7&amp;lt;/artifactId&gt;
        &amp;lt;version&gt;${kotlin.version}&amp;lt;/version&gt;
    &amp;lt;/dependency&gt;
  &amp;lt;/dependencies&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KotlinTestJUnit" defaultSeverity="WARNING" displayName="kotlin-test-junit could be used" enabled="true" language="XML" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usage of &lt;code&gt;kotlin-test&lt;/code&gt; and &lt;code&gt;junit&lt;/code&gt; dependency without &lt;code&gt;kotlin-test-junit&lt;/code&gt;.
&lt;p&gt;It is recommended to use &lt;code&gt;kotlin-test-junit&lt;/code&gt; dependency to work with Kotlin and JUnit.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DifferentMavenStdlibVersion" defaultSeverity="WARNING" displayName="Library and maven plugin versions are different" enabled="true" language="XML" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports different Kotlin stdlib and compiler versions.
&lt;p&gt;Using different versions of the Kotlin compiler and the standard library can lead to unpredictable
    runtime problems and should be avoided.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path=""><inspection shortName="MaliciousLibrariesLocal" defaultSeverity="WARNING" displayName="Malicious dependency" enabled="true" language="" pluginId="org.jetbrains.security.package-checker" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports malicious NPM and PyPI dependencies declared in your project.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;Remove a malicious package to solve a problem.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="VulnerableCodeUsages" defaultSeverity="WARNING" displayName="Vulnerable API usage" enabled="true" language="UAST" pluginId="org.jetbrains.security.package-checker" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of Vulnerable APIs of imported dependencies.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="VulnerableLibrariesLocal" defaultSeverity="WARNING" displayName="Vulnerable declared dependency" enabled="true" language="" pluginId="org.jetbrains.security.package-checker" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports vulnerabilities in Gradle, Maven, NPM and PyPI dependencies declared in your project.
  A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.&lt;/p&gt;
&lt;p&gt;The quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="VulnerableLibrariesGlobal" defaultSeverity="WARNING" displayName="Vulnerable imported dependency" enabled="true" language="" pluginId="org.jetbrains.security.package-checker" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports vulnerabilities in Gradle and Maven dependencies imported into your project.
  A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.&lt;/p&gt;
&lt;p&gt;The quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Control flow issues" path="Java"><inspection shortName="BooleanExpressionMayBeConditional" defaultSeverity="INFORMATION" displayName="Boolean expression can be replaced with conditional expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;code&gt;boolean&lt;/code&gt; expressions which can be formulated in a more compact and, arguably, clear way than by using a conditional expression.
&lt;p&gt;Use the quick-fix to replace the &lt;code&gt;boolean&lt;/code&gt; expression by a conditional expression.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a &amp;amp;&amp;amp; b || !a &amp;amp;&amp;amp; c;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a ? b : c;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DoubleNegation" defaultSeverity="WARNING" displayName="Double negation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports double negations that can be simplified.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (!!functionCall()) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (functionCall()) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (!(a != b)) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (a == b) {}
&lt;/code&gt;&lt;/pre&gt;
  &lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateCondition" defaultSeverity="WARNING" displayName="Duplicate condition" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate conditions in &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; expressions
and branches of &lt;code&gt;if&lt;/code&gt; statements.
While sometimes duplicate conditions are intended, in most cases they are the result of an oversight.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean result = digit1 != digit2 || digit1 != digit2;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  To ignore conditions that may produce side effects, use the &lt;b&gt;Ignore conditions with side effects&lt;/b&gt; option.
Disabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  native boolean unknownMethod();
  
  ...
  
  if (unknownMethod() || unknownMethod()) {
    System.out.println("Got it");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Due to possible side effects of &lt;code&gt;unknownMethod()&lt;/code&gt; (on the example), the warning will only be
  triggered if the &lt;b&gt;Ignore conditions with side effects&lt;/b&gt; option is disabled.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExpressionMayBeFactorized" defaultSeverity="INFORMATION" displayName="Expression can be factorized" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2021 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports expressions that can be factorized, i.e. reorganized to pull out a common factor.
This reduces redundancy and could improve the readability of your code.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a &amp;amp;&amp;amp; b || a &amp;amp;&amp;amp; c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a &amp;amp;&amp;amp; (b || c)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="NegatedConditional" defaultSeverity="WARNING" displayName="Conditional expression with negated condition" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions whose conditions are negated.
&lt;p&gt;Flipping the order of the conditional expression branches usually increases the clarity of such statements.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore '!= null' comparisons&lt;/b&gt; and &lt;b&gt;Ignore '!= 0' comparisons&lt;/b&gt; options to ignore comparisons of the form
  &lt;code&gt;obj != null&lt;/code&gt; or &lt;code&gt;num != 0&lt;/code&gt;.
  Since &lt;code&gt;obj != null&lt;/code&gt; effectively means "obj exists",
  the meaning of the whole expression does not involve any negation
  and is therefore easy to understand.
&lt;p&gt;
  The same reasoning applies to &lt;code&gt;num != 0&lt;/code&gt; expressions, especially when using bit masks.
&lt;p&gt;
  These forms have the added benefit of mentioning the interesting case first.
  In most cases, the value for the &lt;code&gt;== null&lt;/code&gt; branch is &lt;code&gt;null&lt;/code&gt; itself,
  like in the following examples:

&lt;pre&gt;&lt;code&gt;
    static String getName(Person p) {
        return p != null ? p.getName() : null;
    }

    static String getExecutableString(int fileMode) {
        return (fileMode &amp; 0b001001001) != 0 ? "executable" : "non-executable";
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueStatementWithLabel" defaultSeverity="WARNING" displayName="'continue' statement with label" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;continue&lt;/code&gt; statements with labels.
&lt;p&gt;Labeled &lt;code&gt;continue&lt;/code&gt; statements complicate refactoring and can be confusing.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void handle(List&amp;lt;String&amp;gt; strs) {
    outer:
    for (String s: strs) {
      for (char ch : s.toCharArray()) {
        if ('s' == ch) continue outer;
        handleChar(ch);
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantConditionalExpression" defaultSeverity="WARNING" displayName="Constant conditional expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions in which the condition is either a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; constant.
These expressions sometimes occur as a result of automatic refactorings and may be simplified.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return true ? "Yes" : "No";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return "Yes";
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegatedIfElse" defaultSeverity="WARNING" displayName="'if' statement with negated condition" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements
that contain &lt;code&gt;else&lt;/code&gt; branches and whose conditions are negated.
&lt;p&gt;Flipping the order of the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;
  branches usually increases the clarity of such statements.&lt;/p&gt;
&lt;p&gt;There is a fix that inverts the current &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    void m(Object o1, Object o2) {
        if (o1 != o2) {
            System.out.println(1);
        }
        else {
            System.out.println(2);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    void m(Object o1, Object o2) {
        if (o1 == o2) {
            System.out.println(2);
        } else {
            System.out.println(1);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore '!= null' comparisons&lt;/b&gt; option to ignore comparisons of the &lt;code&gt;!= null&lt;/code&gt; form.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore '!= 0' comparisons&lt;/b&gt; option to ignore comparisons of the &lt;code&gt;!= 0&lt;/code&gt; form.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalExpression" defaultSeverity="INFORMATION" displayName="Conditional expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of the ternary condition operator and suggests converting them to &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; statements.
&lt;p&gt;Some code standards prohibit the use of the condition operator.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Object result = (condition) ? foo() : bar();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Object result;
  if (condition) {
    comp = foo();
  }
  else {
    comp = bar();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore for simple assignments and returns &lt;/b&gt; option to ignore simple assignments and returns and allow the following constructs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = (foo == null) ? "" : foo.toString();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore places where an if statement is not possible &lt;/b&gt; option to ignore conditional expressions in contexts in which automatic
  replacement with an if statement is not possible (for example, when the conditional expression is used as an argument to a
  &lt;code&gt;super()&lt;/code&gt; constructor call).
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedConditionalExpression" defaultSeverity="WARNING" displayName="Nested conditional expression" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested conditional expressions as they
may result in extremely confusing code.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int y = a == 10 ? b == 20 ? 10 : a : b;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BreakStatementWithLabel" defaultSeverity="WARNING" displayName="'break' statement with label" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;break&lt;/code&gt; statements with labels.
&lt;p&gt;Labeled &lt;code&gt;break&lt;/code&gt; statements complicate refactoring and can be confusing.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void handle(List&amp;lt;String&amp;gt; strs) {
    outer:
    for (String s: strs) {
      for (char ch : s.toCharArray()) {
        if ('s' == ch) break outer;
        handleChar(ch);
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DefaultNotLastCaseInSwitch" defaultSeverity="WARNING" displayName="'default' not last case in 'switch'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements or expressions in which the &lt;code&gt;default&lt;/code&gt; branch
is positioned before another case.
Such a construct is unnecessarily confusing.
A quick-fix is provided to move the &lt;code&gt;default&lt;/code&gt; branch to the last position, if possible.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  switch (n) {
      default:
          System.out.println();
          break;
      case 1:
          break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  switch (n) {
    case 1:
        break;
    default:
        System.out.println();
        break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfCanBeAssertion" defaultSeverity="INFORMATION" displayName="Statement can be replaced with 'assert' or 'Objects.requireNonNull'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements that throw only &lt;code&gt;java.lang.Throwable&lt;/code&gt; from a &lt;code&gt;then&lt;/code&gt; branch
and do not have an &lt;code&gt;else&lt;/code&gt; branch. Such statements can be converted to more compact &lt;code&gt;assert&lt;/code&gt; statements.
&lt;p&gt;
The inspection also reports Guava's &lt;code&gt;Preconditions.checkNotNull()&lt;/code&gt;.
  They can be replaced with a &lt;code&gt;Objects.requireNonNull()&lt;/code&gt; call for which a library may not be needed.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;if&lt;/b&gt; (x == 2) &lt;b&gt;throw new&lt;/b&gt; RuntimeException("fail");
  &lt;b&gt;if&lt;/b&gt; (y == null) &lt;b&gt;throw new&lt;/b&gt; AssertionError();
  Preconditions.checkNotNull(z, "z");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;assert&lt;/b&gt; x != 2 : "fail";
  Objects.requireNonNull(y);
  Objects.requireNonNull(z, "z");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;By default, this inspection provides a quick-fix in the editor without code highlighting.&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Assertions&amp;#39;, which is available since Java 1.4.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SimplifiableConditionalExpression" defaultSeverity="WARNING" displayName="Simplifiable conditional expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions and suggests simplifying them.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;condition ? true : foo &amp;rarr; condition || foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;condition ? false : foo &amp;rarr; !condition &amp;&amp; foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;condition ? foo : !foo &amp;rarr; condition == foo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;condition ? true : false &amp;rarr; condition&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a == b ? b : a &amp;rarr; a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;result != null ? result : null &amp;rarr; result&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessIndexOfComparison" defaultSeverity="WARNING" displayName="Pointless 'indexOf()' comparison" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary comparisons with
&lt;code&gt;.indexOf()&lt;/code&gt; expressions. An example of such an expression
is comparing the result of &lt;code&gt;.indexOf()&lt;/code&gt; with numbers smaller than -1.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalExpressionWithIdenticalBranches" defaultSeverity="WARNING" displayName="Conditional expression with identical branches" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions with identical &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches.
&lt;p&gt;Such expressions almost certainly indicate bugs. The inspection provides a fix that collapses conditional expressions.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int y = x == 10 ? 4 : 4;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int y = 4;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessNullCheck" defaultSeverity="WARNING" displayName="Unnecessary 'null' check before method call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;null&lt;/code&gt; checks followed by a method call that will definitely return
&lt;code&gt;false&lt;/code&gt; when &lt;code&gt;null&lt;/code&gt; is passed (e.g. &lt;code&gt;Class.isInstance&lt;/code&gt;).
&lt;p&gt;Such a check seems excessive as the method call will always return &lt;code&gt;false&lt;/code&gt; in this case.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (x != null &amp;&amp; myClass.isInstance(x)) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (myClass.isInstance(x)) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="LoopStatementsThatDontLoop" defaultSeverity="WARNING" displayName="Loop statement that does not loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any instance of &lt;code&gt;for&lt;/code&gt;,
&lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;do&lt;/code&gt; statements whose
bodies will be executed once at most. Normally, this is an indication of a bug.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore enhanced for loops&lt;/b&gt; option to ignore the foreach loops.
They are sometimes used to perform an action only on the first item of an iterable in a compact way.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;for&lt;/b&gt; (String s : stringIterable) {
    doSomethingOnFirstString(s);
    &lt;b&gt;break&lt;/b&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwitchStatement" defaultSeverity="WARNING" displayName="'switch' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements.
&lt;p&gt;&lt;code&gt;switch&lt;/code&gt; statements often (but not always) indicate a poor object-oriented design.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  switch (i) {
    // code
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForLoopWithMissingComponent" defaultSeverity="WARNING" displayName="'for' loop with missing components" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;for&lt;/code&gt; loops
that lack initialization, condition, or update clauses. Some coding styles prohibit such loops.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (int i = 0;;i++) {
    // body
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore collection iterations&lt;/b&gt; option to ignore loops which use an iterator.
This is a standard way to iterate over a collection in which the &lt;code&gt;for&lt;/code&gt; loop does not have an update clause.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BreakStatement" defaultSeverity="WARNING" displayName="'break' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;break&lt;/code&gt; statements that are used in places
other than at the end of a &lt;code&gt;switch&lt;/code&gt; statement branch.
&lt;p&gt;&lt;code&gt;break&lt;/code&gt; statements complicate refactoring and can be confusing.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
void foo(List&amp;lt;String&amp;gt; strs) {
  for (String str : strs) {
    if (str.contains("stop")) break;
    handleStr(str);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingElse" defaultSeverity="INFORMATION" displayName="Redundant 'else'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;else&lt;/code&gt; keywords in &lt;code&gt;if&lt;/code&gt;&amp;mdash;&lt;code&gt;else&lt;/code&gt; statements and statement chains.
&lt;p&gt;
The &lt;code&gt;else&lt;/code&gt; keyword is redundant when all previous branches end with a
&lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, or &lt;code&gt;continue&lt;/code&gt; statement. In this case,
the statements from the &lt;code&gt;else&lt;/code&gt; branch can be placed after the &lt;code&gt;if&lt;/code&gt; statement, and the
&lt;code&gt;else&lt;/code&gt; keyword can be removed.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (name == null) {
      throw new IllegalArgumentException();
  } else {
      System.out.println(name);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (name == null) {
      throw new IllegalArgumentException();
  }
  System.out.println(name);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Disable the &lt;b&gt;Report when there are no more statements after the 'if' statement&lt;/b&gt; option to ignore cases where the &lt;code&gt;if&lt;/code&gt;&amp;mdash;&lt;code&gt;else&lt;/code&gt; statement is the last statement in a code block.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WhileCanBeDoWhile" defaultSeverity="WEAK WARNING" displayName="'while' can be replaced with 'do while'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports &lt;code&gt;while&lt;/code&gt; loops that could be more effectively written as &lt;code&gt;do-while&lt;/code&gt; loops.
  There are &lt;code&gt;while&lt;/code&gt; loops where the code just before the loop is identical to the code in the body of the loop.
  Replacing with a &lt;code&gt;do-while&lt;/code&gt; loop removes the duplicated code.
  For &lt;code&gt;while&lt;/code&gt; loops without such duplicated code, the quick fix is offered in the editor as well, but without highlighting.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  foo();
  while (x) {
      foo();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can be replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  do {
    foo();
  } while (x);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2024.1&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssertionCanBeIf" defaultSeverity="INFORMATION" displayName="Assertion can be replaced with 'if' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;assert&lt;/code&gt; statements and suggests replacing them with
&lt;code&gt;if&lt;/code&gt; statements that throw &lt;code&gt;java.lang.AssertionError&lt;/code&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  assert param != null;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (param == null) throw new AssertionError();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Assertions&amp;#39;, which is available since Java 1.4.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialIf" defaultSeverity="WARNING" displayName="Redundant 'if' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements that can be simplified to a single assignment,
&lt;code&gt;return&lt;/code&gt;, or &lt;code&gt;assert&lt;/code&gt; statement.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (foo()) {
    return true;
  } else {
    return false;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return foo();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore chained 'if' statements &lt;/b&gt; option if you want to hide a warning for chained &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;For example, in the following code the warning will be hidden, but the quick-fix will still be available:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (condition1) return true;
  if (condition2) return false;
  return true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that replacing &lt;code&gt;if (isTrue()) assert false;&lt;/code&gt; with &lt;code&gt;assert isTrue();&lt;/code&gt; may change the program semantics
  when asserts are disabled if condition has side effects.
  Use the &lt;b&gt;Ignore 'if' statements with trivial 'assert'&lt;/b&gt; option if you want to hide a warning for &lt;code&gt;if&lt;/code&gt; statements
  containing only &lt;code&gt;assert&lt;/code&gt; statement in their bodies.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForLoopReplaceableByWhile" defaultSeverity="WARNING" displayName="'for' loop may be replaced by 'while' loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;for&lt;/code&gt; loops that contain neither initialization nor update components, and suggests converting them to &lt;code&gt;while&lt;/code&gt;
loops. This makes the code easier to read.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for(; exitCondition(); ) {
    process();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  while(exitCondition()) {
    process();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix is also available for other &lt;code&gt;for&lt;/code&gt; loops, so you can replace any &lt;code&gt;for&lt;/code&gt; loop with a
  &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore 'infinite' for loops without conditions&lt;/b&gt; option if you want to ignore &lt;code&gt;for&lt;/code&gt;
  loops with trivial or non-existent conditions.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifiableBooleanExpression" defaultSeverity="WARNING" displayName="Simplifiable boolean expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports boolean expressions that can be simplified.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(boolean foo, boolean bar) {
    boolean b = !(foo ^ bar);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(boolean foo, boolean bar) {
    boolean b = foo == bar;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(boolean foo, boolean bar) {
    boolean b = (foo &amp;&amp; bar) || !foo;
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(boolean foo, boolean bar) {
    boolean b = !foo || bar;
  }
  &lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwitchStatementWithTooFewBranches" defaultSeverity="WARNING" displayName="Minimum 'switch' branches" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements and expressions with too few &lt;code&gt;case&lt;/code&gt; labels, and suggests rewriting them as &lt;code&gt;if&lt;/code&gt;
and &lt;code&gt;else if&lt;/code&gt; statements.
&lt;p&gt;Example (minimum branches == 3):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  switch (expression) {
    case "foo" -&amp;gt; foo();
    case "bar" -&amp;gt; bar();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if ("foo".equals(expression)) {
    foo();
  } else if ("bar".equals(expression)) {
    bar();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exhaustive switch expressions (Java 14+) or pattern switch statements (Java 17 preview) without the 'default' branch are not reported.
  That's because compile-time exhaustiveness check will be lost when the &lt;code&gt;switch&lt;/code&gt; is converted to &lt;code&gt;if&lt;/code&gt;
  which might be undesired.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Minimum number of branches&lt;/b&gt; field to specify the minimum expected number of &lt;code&gt;case&lt;/code&gt; labels.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Do not report pattern switch statements&lt;/b&gt; option to avoid reporting switch statements and expressions that
have pattern branches. E.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String result = switch(obj) {
    case String str -&gt; str.trim();
    default -&gt; "none";
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It might be preferred to keep the switch even with a single pattern branch, rather than using the &lt;code&gt;instanceof&lt;/code&gt; statement.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwitchStatementDensity" defaultSeverity="WARNING" displayName="'switch' statement with too low of a branch density" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements or expressions
with a too low ratio of switch labels to executable statements.
&lt;p&gt;Such &lt;code&gt;switch&lt;/code&gt; statements
may be confusing and should probably be refactored.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    switch (i) { // one case and 5 executable statements -&gt; 20% density
        case 1:
            System.out.println("1");
            System.out.println("2");
            System.out.println("3");
            System.out.println("4");
            System.out.println("5");
            break;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;p&gt;Use the &lt;b&gt;Minimum density of branches&lt;/b&gt; field to specify the allowed ratio of the switch labels to executable statements.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfiniteLoopStatement" defaultSeverity="WARNING" displayName="Infinite loop statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;,
or &lt;code&gt;do&lt;/code&gt; statements that
can only exit by throwing an exception. While such statements may be correct, they
often happen due to coding errors.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (;;) {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore when placed in Thread.run&lt;/b&gt; option to ignore the
  infinite loop statements inside &lt;code&gt;Thread.run&lt;/code&gt;.
It may be useful for the daemon threads.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new Thread(() -&amp;gt; {
    while (true) {
    }
  }).start();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedSwitchStatement" defaultSeverity="WARNING" displayName="Nested 'switch' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;code&gt;switch&lt;/code&gt; statements or expressions.
&lt;p&gt;Nested &lt;code&gt;switch&lt;/code&gt; statements
may result in extremely confusing code. These statements may be extracted to a separate method.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int res = switch (i) {
            case 0 -&gt; 0;
            default -&gt; switch (i) {
                case 100 -&gt; 0;
                default -&gt; i;
            };
        };
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalBreakInInfiniteLoop" defaultSeverity="WARNING" displayName="Conditional break inside loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional breaks at the beginning or at the end of a loop and suggests adding a loop condition instead to shorten the code.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;while&lt;/b&gt; (true) {
    &lt;b&gt;if&lt;/b&gt; (i  == 23) &lt;b&gt;break&lt;/b&gt;;
    i++;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;while&lt;/b&gt; (i != 23) {
    i++;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EnumSwitchStatementWhichMissesCases" defaultSeverity="INFORMATION" displayName="Enum 'switch' statement that misses case" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements over enumerated types that are not exhaustive.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;enum&lt;/b&gt; AlphaBetaGamma {
    A, B, C;

    &lt;b&gt;void&lt;/b&gt; x(AlphaBetaGamma e) {
      &lt;b&gt;switch&lt;/b&gt; (e) {

      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;enum&lt;/b&gt; AlphaBetaGamma {
    A, B, C;

    &lt;b&gt;void&lt;/b&gt; x(AlphaBetaGamma e) {
      &lt;b&gt;switch&lt;/b&gt; (e) {
        &lt;b&gt;case&lt;/b&gt; A -&gt; {}
        &lt;b&gt;case&lt;/b&gt; B -&gt; {}
        &lt;b&gt;case&lt;/b&gt; C -&gt; {}
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore switch statements with a default branch &lt;/b&gt; option to ignore &lt;code&gt;switch&lt;/code&gt;
  statements that have a &lt;code&gt;default&lt;/code&gt; branch.
&lt;p&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Enums&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwitchExpressionCanBePushedDown" defaultSeverity="INFORMATION" displayName="Common subexpression can be extracted from 'switch'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports switch expressions and statements where every branch has a common subexpression, and the &lt;code&gt;switch&lt;/code&gt; can be moved inside.
This action shortens the code. In many cases, it's reasonable to extract the resulting switch expression to a separate variable or
method.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  switch (value) {
    case 0 -&gt; System.out.println("zero");
    case 1 -&gt; System.out.println("one");
    case 2, 3, 4 -&gt; System.out.println("few");
    default -&gt; System.out.println("many");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(switch (value) {
    case 0 -&gt; "zero";
    case 1 -&gt; "one";
    case 2, 3, 4 -&gt; "few";
    default -&gt; "many";
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  This inspection is applicable only for enhanced switches with arrow syntax.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;&amp;#39;switch&amp;#39; expressions&amp;#39;, which is available since Java 14.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2022.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwitchStatementsWithoutDefault" defaultSeverity="INFORMATION" displayName="'switch' statement without 'default' branch" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements that do not contain &lt;code&gt;default&lt;/code&gt; labels.
&lt;p&gt;Adding the &lt;code&gt;default&lt;/code&gt; label guarantees that all possible scenarios are covered, and it becomes
easier to make assumptions about the current state of the program.&lt;/p&gt;
&lt;p&gt;
&lt;!-- tooltip end --&gt;
  Note that by default, the inspection does not report &lt;code&gt;switch&lt;/code&gt; statements if all cases for enums or &lt;code&gt;sealed&lt;/code&gt; classes are covered.
  Use the &lt;b&gt;Ignore exhaustive switch statements&lt;/b&gt; option if you want to change this behavior.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfStatementWithTooManyBranches" defaultSeverity="WARNING" displayName="'if' statement with too many branches" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements with too many branches.
&lt;p&gt;Such statements may be confusing and are often a sign of inadequate levels of design
  abstraction.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Maximum number of branches&lt;/b&gt; field to specify the maximum number of branches an &lt;code&gt;if&lt;/code&gt; statement is allowed to have.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyComplexBooleanExpression" defaultSeverity="WARNING" displayName="Overly complex boolean expression" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  cond(x1) &amp;amp;&amp;amp; cond(x2) ^ cond(x3) &amp;amp;&amp;amp; cond(x4);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Maximum number of terms&lt;/b&gt; field to specify the maximum number of terms allowed in a boolean expression.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore pure conjunctions and disjunctions&lt;/b&gt; option to ignore boolean expressions which use only a single boolean operator repeatedly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfStatementWithIdenticalBranches" defaultSeverity="WEAK WARNING" displayName="'if' statement with identical branches or common parts" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements in which common parts can be extracted from the branches.
&lt;p&gt;These common parts are independent from the condition and make &lt;code&gt;if&lt;/code&gt; statements harder to understand.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (x &amp;gt; 12) {
    doSomethingBefore();
    doSomethingDifferent1();
    doSomethingAfter();
  } else {
    doSomethingBefore();
    doSomethingDifferent2();
    doSomethingAfter();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  doSomethingBefore();
  if (x &amp;gt; 12) {
    doSomethingDifferent1();
  } else {
    doSomethingDifferent2();
  }
  doSomethingAfter();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Updated in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SwitchStatementWithConfusingDeclaration" defaultSeverity="WARNING" displayName="Local variable used and declared in different 'switch' branches" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables declared in one branch of a &lt;code&gt;switch&lt;/code&gt; statement
and used in another branch. Such declarations can be extremely confusing.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    switch(i) {
      case 2:
          int x = 0;
          break;
      case 3:
          x = 3;
          System.out.println(x);
          break;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;


&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalCanBePushedInsideExpression" defaultSeverity="INFORMATION" displayName="Conditional can be pushed inside branch expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions with &lt;code&gt;then&lt;/code&gt; and &lt;c&gt;else&lt;/c&gt; branches that are similar enough so that the expression can be moved
inside. This action shortens the code.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  double g(int a, int b) {
    return a == b ? Math.cos(0) : Math.cos(1);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  double g(int a, int b) {
    return Math.cos(a == b ? 0 : 1);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessBooleanExpression" defaultSeverity="WARNING" displayName="Pointless boolean expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary or overly complicated boolean expressions.
&lt;p&gt;Such expressions include &lt;code&gt;&amp;&amp;&lt;/code&gt;-ing with &lt;code&gt;true&lt;/code&gt;,
&lt;code&gt;||&lt;/code&gt;-ing with &lt;code&gt;false&lt;/code&gt;,
  equality comparison with a boolean literal, or negation of a boolean literal. Such expressions can be simplified.&lt;/p&gt;
&lt;p&gt;Example:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;boolean&lt;/b&gt; a = !(x &amp;&amp; &lt;b&gt;false&lt;/b&gt;);
  &lt;b&gt;boolean&lt;/b&gt; b = &lt;b&gt;false&lt;/b&gt; || x;
  &lt;b&gt;boolean&lt;/b&gt; c = x != &lt;b&gt;true&lt;/b&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;boolean&lt;/b&gt; a = &lt;b&gt;true&lt;/b&gt;;
  &lt;b&gt;boolean&lt;/b&gt; b = x;
  &lt;b&gt;boolean&lt;/b&gt; c = !x;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
Use the &lt;b&gt;Ignore named constants in determining pointless expressions &lt;/b&gt; option to ignore named constants when determining if an expression is pointless.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwitchStatementWithTooManyBranches" defaultSeverity="WARNING" displayName="Maximum 'switch' branches" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements or expressions with too many &lt;code&gt;case&lt;/code&gt; labels.
&lt;p&gt;Such a long switch statement may be confusing and should probably be refactored.
  Sometimes, it is not a problem (for example, a domain is very complicated and has enums with a lot of constants).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    switch (x) {
        case 1 -&gt; {}
        case 2 -&gt; {}
        case 3 -&gt; {}
        case 4 -&gt; {}
        case 5 -&gt; {}
        case 6 -&gt; {}
        case 7 -&gt; {}
        case 8 -&gt; {}
        case 9 -&gt; {}
        case 10 -&gt; {}
        case 11,12,13 -&gt; {}
        default -&gt; {}
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Maximum number of branches&lt;/b&gt; field to specify the maximum number of &lt;code&gt;case&lt;/code&gt; labels expected.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LabeledStatement" defaultSeverity="WARNING" displayName="Labeled statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports labeled statements that can complicate refactorings and control flow of the method.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  label:
  while (true) {
      // code
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoopConditionNotUpdatedInsideLoop" defaultSeverity="WARNING" displayName="Loop variable not updated inside loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any variables and parameters that are used in a loop condition
and are not updated inside the loop.
&lt;p&gt;Such variables and parameters are usually used by mistake as they
  may cause an infinite loop if they are executed.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void loopDoesNotLoop(boolean b) {
    while (b) {
      System.out.println();
      break;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore possible non-local changes&lt;/b&gt; option to disable this inspection
  if the condition can be updated indirectly (e.g. via the called method or concurrently from another thread).
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegatedConditionalExpression" defaultSeverity="WARNING" displayName="Negated conditional expression" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions which are negated with a prefix expression, as
such constructions may be confusing.
&lt;p&gt;There is a fix that propagates the outer negation to both branches.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  !(i == 1 ? a : b)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  i == 1 ? !a : !b
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FallthruInSwitchStatement" defaultSeverity="WARNING" displayName="Fallthrough in 'switch' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports 'fall-through' in a &lt;code&gt;switch&lt;/code&gt; statement.
&lt;p&gt;Fall-through occurs when a series of executable statements after a &lt;code&gt;case&lt;/code&gt; label is not guaranteed
to transfer control before the next &lt;code&gt;case&lt;/code&gt; label. For example, this can happen if the branch is missing a &lt;code&gt;break&lt;/code&gt; statement.
In that case, control falls through to the statements after
that &lt;code&gt;switch&lt;/code&gt; label, even though the &lt;code&gt;switch&lt;/code&gt; expression is not equal to
  the value of the fallen-through label. While occasionally intended, this construction is confusing and is often the result of a typo.&lt;/p&gt;
&lt;p&gt;
This inspection ignores any fall-through commented with a text matching the regex pattern &lt;code&gt;(?i)falls?\s*thro?u&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;There is a fix that adds a &lt;code&gt;break&lt;/code&gt; to the branch that can fall through to the next branch.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    switch(x) {
      case (4):
          if (condition) {
              System.out.println("3");
              // no break here
          } else {
              break;
          }
      case (6):
          System.out.println("4");
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    switch(x) {
        case (4):
            if (condition) {
                System.out.println("3");
            } else {
                break;
            }
            break;
        case (6):
            System.out.println("4");
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegatedEqualityExpression" defaultSeverity="WARNING" displayName="Negated equality expression" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports equality expressions which are negated by a prefix expression.
&lt;p&gt;Such expressions can be simplified using the &lt;code&gt;!=&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  !(i == 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  i != 1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IdempotentLoopBody" defaultSeverity="WARNING" displayName="Idempotent loop body" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports loops whose second and all subsequent iterations do not produce any additional side effects other
than the one produced by the first iteration, which can indicate a programming error.
&lt;p&gt;Such loops may iterate only zero, one, or infinite number of times.
If the infinite number of times case is unreachable, such a loop can be replaced with an &lt;code&gt;if&lt;/code&gt; statement.
  Otherwise, there's a possibility that the program can get stuck.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    public void foo(String baseName, String names) {
        int suffix = 1;
        String name = baseName;
        while (names.contains(name)) {
            // error: suffix is not updated making loop body idempotent
            name = baseName + suffix;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueStatement" defaultSeverity="WARNING" displayName="'continue' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;continue&lt;/code&gt; statements.
&lt;p&gt;&lt;code&gt;continue&lt;/code&gt; statements complicate refactoring and can be confusing.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(List&amp;lt;String&amp;gt; strs) {
    for (String str : strs) {
      if (str.contains("skip")) continue;
      handleStr(str);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoopWithImplicitTerminationCondition" defaultSeverity="WARNING" displayName="Loop with implicit termination condition" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;code&gt;while&lt;/code&gt;,
&lt;code&gt;do-while&lt;/code&gt;, and &lt;code&gt;for&lt;/code&gt;
loops that have the &lt;code&gt;true&lt;/code&gt; constant as their
only condition. At the same time, such loops can be still terminated by a containing
&lt;code&gt;if&lt;/code&gt; statement which can break out of the loop.
&lt;p&gt;Such an &lt;code&gt;if&lt;/code&gt; statement must be the first or the only statement
in a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;
loop and the last or the only statement in a &lt;code&gt;do-while&lt;/code&gt; loop.&lt;/p&gt;

&lt;p&gt;Removing the &lt;code&gt;if&lt;/code&gt; statement and making its condition an explicit
  loop condition simplifies the loop.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style issues" path="Java"><inspection shortName="UnnecessarySuperConstructor" defaultSeverity="WARNING" displayName="Unnecessary call to 'super()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to no-arg superclass constructors during object construction.
&lt;p&gt;Such calls are unnecessary and may be removed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    Foo() {
      super();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    Foo() {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedMethodCall" defaultSeverity="WARNING" displayName="Nested method call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method calls used as parameters to another method call.
&lt;p&gt;The quick-fix introduces a variable to make the code simpler and easier to debug.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public int y() { return 1; }
  public int f(int x) { return 2 * x; }

  public void foo() {
      int x = f(y());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public int y() { return 1; }
  public int f(int x) { return 2 * x; }

  public void foo() {
      int y = y();
      int x = f(y);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the inspection options to toggle the reporting of:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;method calls in field initializers&lt;/li&gt;
  &lt;li&gt;calls to static methods&lt;/li&gt;
  &lt;li&gt;calls to simple getters&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ChainedEquality" defaultSeverity="WARNING" displayName="Chained equality comparisons" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports chained equality comparisons.
&lt;p&gt;Such comparisons may be confusing: &lt;code&gt;a == b == c&lt;/code&gt; means &lt;code&gt;(a == b) == c&lt;/code&gt;,
  but possibly &lt;code&gt;a == b &amp;&amp; a == c&lt;/code&gt; is intended.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean chainedEquality(boolean a, boolean b, boolean c) {
    return a == b == c;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use parentheses to make the comparison less confusing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean chainedEquality(boolean a, boolean b, boolean c) {
    return (a == b) == c;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantFieldInitialization" defaultSeverity="WARNING" displayName="Redundant field initialization" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields explicitly initialized to their default values.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    int foo = 0;
    List bar = null;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    int foo;
    List bar;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection settings to only report explicit &lt;code&gt;null&lt;/code&gt; initialization, for example:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    int foo = 0;     // no warning
    List bar = null; // redundant field initialization warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SingleStatementInBlock" defaultSeverity="INFORMATION" displayName="Code block contains single statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports control flow statements with a single statement in their code block and
suggests removing the braces from the control flow statement body.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (x &gt; 0) {
    System.out.println("x is positive");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (x &gt; 0) System.out.println("x is positive");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ConstantOnWrongSideOfComparison" defaultSeverity="WARNING" displayName="Constant on wrong side of comparison" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comparison operations where the constant value is on the wrong side.
&lt;p&gt;Some coding conventions specify that constants should be on a specific side of a comparison, either left or right.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean compare(int x) {
    return 1 &amp;gt; x; // Constant '1' on the left side of the comparison
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean compare(int x) {
    return x &amp;lt; 1;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection settings to choose the side of constants in comparisons
  and whether to warn if &lt;code&gt;null&lt;/code&gt; literals are on the wrong side.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BoundedWildcard" defaultSeverity="WARNING" displayName="Can use bounded wildcard" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports generic method parameters that can make use of &lt;a href="https://en.wikipedia.org/wiki/Wildcard_(Java)"&gt;bounded wildcards&lt;/a&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void process(Consumer&amp;lt;Number&amp;gt; consumer);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should be replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void process(Consumer&amp;lt;? super Number&amp;gt; consumer);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  This method signature is more flexible because it accepts more types: not only
  &lt;code&gt;Consumer&amp;lt;Number&amp;gt;&lt;/code&gt;, but also &lt;code&gt;Consumer&amp;lt;Object&amp;gt;&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;Likewise, type parameters in covariant position:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  T produce(Producer&amp;lt;T&amp;gt; p);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should be replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  T produce(Producer&amp;lt;? extends T&amp;gt; p);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  To quote &lt;a href="https://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java"&gt;Joshua Bloch&lt;/a&gt; in &lt;em&gt;Effective Java&lt;/em&gt; third Edition:
&lt;/p&gt;
&lt;blockquote&gt;
  &lt;h4&gt;Item 31: Use bounded wildcards to increase API flexibility&lt;/h4&gt;
  Using wildcard types in your APIs, while tricky, makes the APIs far more flexible.
  If you write a library that will be widely used, the proper use of wildcard types should be considered mandatory.
  Remember the basic rule: producer-extends, consumer-super (PECS).
  Also remember that all Comparables and Comparators are consumers.
&lt;/blockquote&gt;

&lt;p&gt;
  Use the inspection options to toggle the reporting for:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;
      invariant classes. An example of an invariant class is &lt;code&gt;java.util.List&amp;lt;T&amp;gt;&lt;/code&gt; because it both accepts values
      (via the &lt;code&gt;List.add(T)&lt;/code&gt; method)
      and produces values (via the &lt;code&gt;T List.get()&lt;/code&gt; method).
    &lt;/p&gt;
    &lt;p&gt;
      On the
      other hand, &lt;code&gt;contravariant&lt;/code&gt; classes only receive values, for example, &lt;code&gt;java.util.function.Consumer&amp;lt;T&amp;gt;&lt;/code&gt;
      with the only method &lt;code&gt;accept(T)&lt;/code&gt;. Similarly, &lt;code&gt;covariant&lt;/code&gt; classes
      only produce values, for example, &lt;code&gt;java.util.function.Supplier&amp;lt;T&amp;gt;&lt;/code&gt;
      with the only method &lt;code&gt;T get()&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      People often use bounded wildcards in covariant/contravariant
      classes but avoid wildcards in invariant classes, for example, &lt;code&gt;void process(List&amp;lt;? extends T&amp;gt; l)&lt;/code&gt;.
      Disable this option to ignore such invariant classes and leave them rigidly typed, for example, &lt;code&gt;void
      process(List&amp;lt;T&amp;gt; l)&lt;/code&gt;.
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;
      &lt;code&gt;private&lt;/code&gt; methods, which can be considered as not a part of the public API
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;
      instance methods
    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessarySemicolon" defaultSeverity="WARNING" displayName="Unnecessary semicolon" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any unnecessary semicolons, including semicolons that are used between class members, inside block statements, or after
class definitions.
&lt;p&gt;Even though these semicolons are valid in Java, they are redundant and may be removed.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C {
    ;
    void m() throws Exception {
        try (AutoCloseable r1 = createAutoCloseable();) {
          ;
        }
    }
    ;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C {
    void m() throws Exception {
      try (AutoCloseable r1 = createAutoCloseable()) {
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayCanBeReplacedWithEnumValues" defaultSeverity="INFORMATION" displayName="Array can be replaced with enum values" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arrays of enum constants that can be replaced with a call to &lt;code&gt;EnumType.values()&lt;/code&gt;.
&lt;p&gt;Usually, when updating such an enum, you have to update the array as well. However, if you use &lt;code&gt;EnumType.values()&lt;/code&gt;
 instead, no modifications are required.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum States {
     NOT_RUN, IN_PROGRESS, FINISHED;
  }
  
  handleStates(new States[] {NOT_RUN, IN_PROGRESS, FINISHED});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  handleStates(States.values());
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultipleVariablesInDeclaration" defaultSeverity="INFORMATION" displayName="Multiple variables in one declaration" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple variables that are declared in a single declaration and suggest
creating a separate declaration for each variable.
&lt;p&gt;Some coding standards prohibit such declarations.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int x = 1, y = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int x = 1;
  int y = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;b&gt;Ignore 'for' loop declarations&lt;/b&gt; option to ignore multiple variables declared in the initialization of a 'for' loop statement, for example:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;for&lt;/b&gt; (int i = 0, max = list.size(); i &amp;gt; max; i++) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Use the &lt;b&gt;Only warn on different array dimensions in a single declaration&lt;/b&gt; option to only warn when variables with different array dimensions are declared in a single declaration, for example:
&lt;pre&gt;&lt;code&gt;
  String s = "", array[];
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;New in 2019.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissortedModifiers" defaultSeverity="INFORMATION" displayName="Missorted modifiers" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declaration modifiers that are not in the canonical
preferred order (as stated in the Java Language Specification).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    native public final void foo();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    public final native void foo();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FuseStreamOperations" defaultSeverity="WARNING" displayName="Subsequent steps can be fused into Stream API chain" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects transformations outside a Stream API chain that could be incorporated into it.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; list = stream.collect(Collectors.toList());
  list.sort(null);
  return list.toArray(new String[list.size()]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the conversion:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return stream.sorted().toArray(String[]::new);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Note that sometimes the converted stream chain may replace explicit &lt;code&gt;ArrayList&lt;/code&gt; with &lt;code&gt;Collectors.toList()&lt;/code&gt; or explicit
  &lt;code&gt;HashSet&lt;/code&gt; with &lt;code&gt;Collectors.toSet()&lt;/code&gt;. The current library implementation uses these collections internally. However,
  this approach is not very reliable and might change in the future altering the semantics of your code.&lt;/p&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;If you are concerned about it, use the &lt;b&gt;Do not suggest 'toList()' or 'toSet()' collectors&lt;/b&gt; option to suggest
  &lt;code&gt;Collectors.toCollection()&lt;/code&gt; instead of &lt;code&gt;toList&lt;/code&gt; and &lt;code&gt;toSet&lt;/code&gt; collectors.
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalCanBeOptional" defaultSeverity="INFORMATION" displayName="Conditional can be replaced with Optional" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports null-check conditions and suggests replacing them with &lt;code&gt;Optional&lt;/code&gt; chains.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return str == null ? "" : str.trim();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return Optional.ofNullable(str).map(String::trim).orElse("");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the replacement is not always shorter, it could be helpful for further refactoring
  (for example, for changing the method return value to &lt;code&gt;Optional&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Note that when a not-null branch of the condition returns null, the corresponding mapping step will
  produce an empty &lt;code&gt;Optional&lt;/code&gt; possibly changing the semantics. If it cannot be statically
  proven that semantics will be preserved, the quick-fix action name will contain the "(may change semantics)"
  notice, and the inspection highlighting will be turned off.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReturnThis" defaultSeverity="WARNING" displayName="Return of 'this'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods returning &lt;code&gt;this&lt;/code&gt;.
&lt;p&gt;
  While such a return is valid, it is rarely necessary, and usually indicates that the method is intended to be used
  as part of a chain of similar method calls (for example, &lt;code&gt;buffer.append("foo").append("bar").append("baz")&lt;/code&gt;).
  Such chains are frowned upon by many coding standards.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public Builder append(String str) {
    // [...]
    return this;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryConstantArrayCreationExpression" defaultSeverity="WARNING" displayName="Redundant 'new' expression in constant array creation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constant new array expressions that can be replaced with an array initializer. Array initializers can omit the type because
it is already specified in the left side of the assignment.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int[] foo = new int[] {42};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int[] foo = {42};
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessarilyQualifiedStaticallyImportedElement" defaultSeverity="WARNING" displayName="Unnecessarily qualified statically imported element" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usage of statically imported members qualified with
their containing class name.
&lt;p&gt;Such qualification is unnecessary and can be removed
  because statically imported members can be accessed directly by member name.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import static foo.Test.WIDTH;

  class Bar {
    void bar() {
      System.out.println(Test.WIDTH);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import static foo.Test.WIDTH;

  class Bar {
    void bar() {
      System.out.println(WIDTH);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifiableIfStatement" defaultSeverity="INFORMATION" displayName="'if' statement can be replaced with conditional or boolean expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements that can be replaced with conditions using the &lt;code&gt;&amp;&amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;,
&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, or &lt;code&gt;?:&lt;/code&gt; operator.
&lt;p&gt;The result is usually shorter, but not always clearer, so it's not advised to apply the fix  in every case.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (condition) return true; else return foo;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return condition || foo;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
  Use the &lt;b&gt;Don't suggest '?:' operator&lt;/b&gt; option to disable the warning when the &lt;code&gt;?:&lt;/code&gt; operator is suggested. In this case, only
  &lt;code&gt;&amp;&amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, and &lt;code&gt;!=&lt;/code&gt; suggestions will be highlighted. The
  quick-fix will still be available in the editor.
&lt;/li&gt;
&lt;li&gt;
  Use the &lt;b&gt;Ignore chained 'if' statements&lt;/b&gt; option to disable the warning for &lt;code&gt;if-else&lt;/code&gt; chains. The quick-fix will
  still be available in the editor.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BlockMarkerComments" defaultSeverity="WARNING" displayName="Block marker comment" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comments which are used as code block markers.
The quick-fix removes such comments.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  while (i &amp;lt; 10) {
    i++;
  } // end while
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  while (i &amp;lt; 10) {
    i++;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EqualsCalledOnEnumConstant" defaultSeverity="WARNING" displayName="'equals()' called on enum value" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;equals()&lt;/code&gt; calls on enum constants.
&lt;p&gt;Such calls can be replaced by an identity comparison (&lt;code&gt;==&lt;/code&gt;) because two
  enum constants are equal only when they have the same identity.&lt;/p&gt;
&lt;p&gt;A quick-fix is available to change the call to a comparison.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean foo(MyEnum value) {
    return value.equals(MyEnum.FOO);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean foo(MyEnum value) {
    return value == MyEnum.FOO;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ImplicitCallToSuper" defaultSeverity="WARNING" displayName="Implicit call to 'super()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constructors that do not begin with a call to "super" constructor or
another constructor of the same class.
&lt;p&gt;Such constructors can be thought of as implicitly beginning with a
  call to &lt;code&gt;super()&lt;/code&gt;. Some coding standards prefer that such calls to
  &lt;code&gt;super()&lt;/code&gt; be made explicitly.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    Foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    Foo() {
      super();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection settings to ignore classes extending directly from &lt;code&gt;Object&lt;/code&gt;.
  For instance:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    Foo() {} // Not reported
  }

  class Bar extends Foo {
    Bar() {} // Implicit call to 'super()'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultiCatchCanBeSplit" defaultSeverity="INFORMATION" displayName="Multi-catch can be split into separate catch blocks" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multi-&lt;code&gt;catch&lt;/code&gt; sections and suggests splitting them into separate &lt;code&gt;catch&lt;/code&gt; blocks.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    int i = getIndex();
  } catch (NullPointerException|IndexOutOfBoundsException e) {
    e.printStackTrace();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    int i = getIndex();
  } catch (NullPointerException e) {
    e.printStackTrace();
  } catch (IndexOutOfBoundsException e) {
    e.printStackTrace();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Multi-catches&amp;#39;, which is available since Java 7.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TrailingWhitespacesInTextBlock" defaultSeverity="WARNING" displayName="Trailing whitespace in text block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports text blocks with trailing whitespace characters.
Trailing whitespace is considered incidental and will be stripped away by the Java compiler.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Text block literals&amp;#39;, which is available since Java 15.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RecordCanBeClass" defaultSeverity="INFORMATION" displayName="Record can be converted to class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports record classes and suggests converting them to ordinary classes.
&lt;p&gt;This inspection makes it possible to move a Java record to a codebase using an earlier Java version
  by applying the quick-fix to this record.&lt;/p&gt;
&lt;p&gt;
  Note that the resulting class is not completely equivalent to the original record:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The resulting class no longer extends &lt;code&gt;java.lang.Record&lt;/code&gt;,
    so &lt;code&gt;instanceof Record&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Reflection methods like &lt;code&gt;Class.isRecord()&lt;/code&gt; and
    &lt;code&gt;Class.getRecordComponents()&lt;/code&gt; produce different results.&lt;/li&gt;
  &lt;li&gt;The generated &lt;code&gt;hashCode()&lt;/code&gt; implementation may produce a different result
    because the formula to calculate record &lt;code&gt;hashCode&lt;/code&gt; is deliberately not specified.&lt;/li&gt;
  &lt;li&gt;Record serialization mechanism differs from that of an ordinary class.
    Refer to &lt;i&gt;Java Object Serialization Specification&lt;/i&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  record Point(int x, int y) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  final class Point {
    private final int x;
    private final int y;

    Point(int x, int y) {
      this.x = x;
      this.y = y;
    }

    public int x() { return x; }

    public int y() { return y; }

    @Override
    public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null || obj.getClass() != this.getClass()) return false;
      var that = (Point)obj;
      return this.x == that.x &amp;&amp;
             this.y == that.y;
    }

    @Override
    public int hashCode() {
      return Objects.hash(x, y);
    }

    @Override
    public String toString() {
      return "Point[" +
             "x=" + x + ", " +
             "y=" + y + ']';
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Records&amp;#39;, which is available since Java 16.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StreamToLoop" defaultSeverity="INFORMATION" displayName="Stream API call chain can be replaced with loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Stream API chains, &lt;code&gt;Iterable.forEach()&lt;/code&gt;, and &lt;code&gt;Map.forEach()&lt;/code&gt; calls that can be automatically converted into classical loops.
This can help to downgrade for backward compatibility with earlier Java versions.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String joinNonEmpty(List&amp;lt;String&amp;gt; list) {
    return list.stream() // Stream can be converted to loop
      .filter(s -&gt; !s.isEmpty())
      .map(String::trim)
      .collect(Collectors.joining(", "));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String joinNonEmpty(List&amp;lt;String&amp;gt; list) {
    StringJoiner joiner = new StringJoiner(", ");
    for (String s : list) {
      if (!s.isEmpty()) {
        String trim = s.trim();
        joiner.add(trim);
      }
    }
    return joiner.toString();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Note that sometimes this inspection might cause slight semantic changes.
  Special care should be taken when it comes to short-circuiting, as it's not specified how many elements will be actually read when
  the stream short-circuits.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Iterate unknown Stream sources via Stream.iterator()&lt;/b&gt; option to suggest conversions for streams with unrecognized source.
  In this case, iterator will be created from the stream.
  For example, when checkbox is selected, the conversion will be suggested here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;ProcessHandle&amp;gt; handles = ProcessHandle.allProcesses().collect(Collectors.toList());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the result will be as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;ProcessHandle&amp;gt; handles = new ArrayList&amp;lt;&amp;gt;();
  for (Iterator&amp;lt;ProcessHandle&amp;gt; it = ProcessHandle.allProcesses().iterator(); it.hasNext(); ) {
    ProcessHandle allProcess = it.next();
    handles.add(allProcess);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssertMessageNotString" defaultSeverity="WARNING" displayName="'assert' message is not a string" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;assert&lt;/code&gt; messages that are not of the &lt;code&gt;java.lang.String&lt;/code&gt; type.
&lt;p&gt;Using a string provides more information to help diagnose the failure
  or the assertion reason.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(List&amp;lt;Integer&amp;gt; myList) {
    assert myList.isEmpty() : false;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Only warn when the &lt;code&gt;assert&lt;/code&gt; message type is 'boolean' or 'java.lang.Boolean'&lt;/b&gt; option to only warn when the &lt;code&gt;assert&lt;/code&gt; message type is &lt;code&gt;boolean&lt;/code&gt; or &lt;code&gt;java.lang.Boolean&lt;/code&gt;.
A &lt;code&gt;boolean&lt;/code&gt; detail message is unlikely to provide additional information about an assertion failure
  and could result from a mistakenly entered &lt;code&gt;:&lt;/code&gt; instead of &lt;code&gt;&amp;&lt;/code&gt;.
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Assertions&amp;#39;, which is available since Java 1.4.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DiamondCanBeReplacedWithExplicitTypeArguments" defaultSeverity="INFORMATION" displayName="Diamond can be replaced with explicit type arguments" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiation of generic classes in which the &lt;b&gt;&amp;lt;&amp;gt;&lt;/b&gt; symbol (diamond) is used instead of
  type parameters.

&lt;p&gt;The quick-fix replaces &lt;b&gt;&amp;lt;&amp;gt;&lt;/b&gt; (diamond) with explicit type parameters.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List &amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List &amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;()&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;i&gt;Diamond operation&lt;/i&gt; appeared in Java 7.
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodRefCanBeReplacedWithLambda" defaultSeverity="INFORMATION" displayName="Method reference can be replaced with lambda" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method references, like &lt;code&gt;MyClass::myMethod&lt;/code&gt; and &lt;code&gt;myObject::myMethod&lt;/code&gt;,
  and suggests replacing them with an equivalent lambda expression.
&lt;p&gt;Lambda expressions can be easier to modify than method references.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out::println
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  s -&amp;gt; System.out.println(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;By default, this inspection does not highlight the code in the editor, but only provides a quick-fix.&lt;/p&gt;
&lt;p&gt;This inspection depends on the following Java features:&lt;ul&gt;&lt;li&gt;Lambda expressions&lt;/li&gt;&lt;li&gt;Method references&lt;/li&gt;&lt;/ul&gt;These features are available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LambdaParameterTypeCanBeSpecified" defaultSeverity="INFORMATION" displayName="Lambda parameter type can be specified" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda parameters that do not have their type specified and suggests
adding the missing type declarations.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Function&amp;lt;String, Integer&amp;gt; length = a -&amp;gt; a.length();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Function&amp;lt;String, Integer&amp;gt; length = (String a) -&amp;gt; a.length();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryConstructor" defaultSeverity="WARNING" displayName="Redundant no-arg constructor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary constructors.
&lt;p&gt;
  A constructor is unnecessary if it is the only constructor of a class, has no parameters,
  has the same access modifier as its containing class,
  and does not perform any initialization except explicitly or implicitly calling the superclass constructor without arguments.
  Such a constructor can be safely removed as it will be generated by the compiler even if not specified.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Foo {
    public Foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Foo {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the inspection settings to ignore unnecessary constructors that have an annotation.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnclearBinaryExpression" defaultSeverity="INFORMATION" displayName="Multiple operators with different precedence" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports binary, conditional, or &lt;code&gt;instanceof&lt;/code&gt; expressions that consist of different operators
without parentheses. Such expressions can be less readable due to different precedence rules of operators.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int n = 3 + 9 * 8 + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int n = 3 + (9 * 8) + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryThis" defaultSeverity="WARNING" displayName="Unnecessary 'this' qualifier" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary &lt;code&gt;this&lt;/code&gt; qualifier.
&lt;p&gt;
  Using &lt;code&gt;this&lt;/code&gt; to disambiguate a code reference is discouraged by many coding styles
  and may easily become unnecessary
  via automatic refactorings.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    int x;
    void foo() {
      this.x = 2;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    int x;
    void foo() {
      x = 2;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection settings to ignore assignments to fields.
  For instance, &lt;code&gt;this.x = 2;&lt;/code&gt; won't be reported, but &lt;code&gt;int y = this.x;&lt;/code&gt; will be.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldMayBeFinal" defaultSeverity="WARNING" displayName="Field may be 'final'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields that can be safely made &lt;code&gt;final&lt;/code&gt;.
All &lt;code&gt;final&lt;/code&gt; fields have a value and this value does not change, which can make the code easier to reason about.
&lt;p&gt;To avoid too expensive analysis, this inspection only reports if the field has a &lt;code&gt;private&lt;/code&gt; modifier
  or it is defined in a local or anonymous class.
  A field can be &lt;code&gt;final&lt;/code&gt; if:
&lt;ul&gt;
  &lt;li&gt;It is &lt;code&gt;static&lt;/code&gt; and initialized once in its declaration or in one &lt;code&gt;static&lt;/code&gt; initializer.&lt;/li&gt;
  &lt;li&gt;It is non-&lt;code&gt;static&lt;/code&gt; and initialized once in its declaration, in one instance initializer or in every constructor&lt;/li&gt;
&lt;/ul&gt;
And it is not modified anywhere else.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Person {
    private String name; // can be final

    Person(String name) {
      this.name = name;
    }

    public String getName() {
      return name;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Person {
    private final String name;

    Person(String name) {
      this.name = name;
    }

    public String getName() {
      return name;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the "Annotations" button to modify the list of annotations that assume implicit field write.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryModifier" defaultSeverity="WARNING" displayName="Unnecessary modifier" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant modifiers and suggests to remove them.
The resulting code will be shorter, but the behaviour and meaning will remain the same.
&lt;p&gt;&lt;b&gt;Example 1:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // all code is implicitly strictfp under Java 17 and higher
  strictfp class X {

    // inner enums are implicitly static
    static enum Inner {
        A, B, C
    }

    // inner records are implicitly static
    static record R() {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example 2:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  final record R() {
    // all records are implicitly final
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example 3:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // all interfaces are implicitly abstract
  abstract interface Printer {

    // all interface members are implicitly public
    public int size();

    // all inner classes of interfaces are implicitly static
    static class Inner {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnqualifiedStaticUsage" defaultSeverity="WARNING" displayName="Unqualified static access" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usage of static members that is not qualified
with the class name.
&lt;p&gt;
This is legal if the static member is in
the same class, but may be confusing.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    static void foo() {}
    static int x;

    void bar() {
      foo();
      System.out.println(x);
    }

    static void baz() { foo(); }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    static void foo() {}
    static int x;

    void bar() {
      Foo.foo();
      System.out.println(Foo.x);
    }

    static void baz() { Foo.foo(); }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the inspection settings to toggle the reporting for the following items:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;
      static fields access&lt;br&gt;
      &lt;code&gt;void bar() { System.out.println(x); }&lt;/code&gt;
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;
      calls to static methods&lt;br&gt;
      &lt;code&gt;void bar() { foo(); }&lt;/code&gt;&lt;br&gt;
      &lt;code&gt;static void baz() { foo(); }&lt;/code&gt;
    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  You can also configure the inspection to only report static member usage from a non-static context.
  In the above example, &lt;code&gt;static void baz() { foo(); }&lt;/code&gt; will not be reported.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ListIndexOfReplaceableByContains" defaultSeverity="WARNING" displayName="'List.indexOf()' expression can be replaced with 'contains()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;code&gt;List.indexOf()&lt;/code&gt;
expressions that can be replaced with the 
  &lt;code&gt;List.contains()&lt;/code&gt; method.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean hasEmptyString(List&amp;lt;String&amp;gt; list) {
    // Warning: can be simplified
    return list.indexOf("") &amp;gt;= 0;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The provided quick-fix replaces the &lt;code&gt;indexOf&lt;/code&gt; call with the &lt;code&gt;contains&lt;/code&gt; call:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean hasEmptyString(List&amp;lt;String&amp;gt; list) {
    // Quick-fix is applied
    return list.contains("");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TryStatementWithMultipleResources" defaultSeverity="INFORMATION" displayName="'try' statement with multiple resources can be split" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;try&lt;/code&gt; statements with multiple resources that can be automatically split into
  multiple try-with-resources statements.
&lt;p&gt;This conversion can be useful for further refactoring
(for example, for extracting the nested &lt;code&gt;try&lt;/code&gt; statement into a separate method). &lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try (FileInputStream in = new FileInputStream("in.txt");
     FileOutputStream out = new FileOutputStream("out.txt")) {
     /*read and write*/
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try (FileInputStream in = new FileInputStream("in.txt")) {
    try (FileOutputStream out = new FileOutputStream("out.txt")) {
      /*read and write*/
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="OptionalContainsCollection" defaultSeverity="WARNING" displayName="'Optional' contains array or collection" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;java.util.Optional&lt;/code&gt; or &lt;code&gt;com.google.common.base.Optional&lt;/code&gt; types with an array or collection type parameter.
&lt;p&gt;In such cases, it is more clear to just use an empty array or collection to indicate the absence of result.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Optional&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; foo() {
    return Optional.empty();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code could look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;Integer&amp;gt; foo() {
    return List.of();
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OptionalToIf" defaultSeverity="INFORMATION" displayName="'Optional' can be replaced with sequence of 'if' statements" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Optional&lt;/code&gt; call chains that can be replaced with a sequence of &lt;code&gt;if&lt;/code&gt; statements.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return Optional.ofNullable(name)
    .map(this::extractInitials)
    .map(initials -&gt; initials.toUpperCase(Locale.ENGLISH))
    .orElseGet(this::getDefault);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (name != null) {
    String initials = extractInitials(name);
    if (initials != null) return initials.toUpperCase(Locale.ENGLISH);
  }
  return getDefault();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifiableEqualsExpression" defaultSeverity="WARNING" displayName="Unnecessary 'null' check before 'equals()' call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons to &lt;code&gt;null&lt;/code&gt; that are followed by a call to &lt;code&gt;equals()&lt;/code&gt; with a constant argument.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (s != null &amp;&amp; s.equals("literal")) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if ("literal".equals(s)) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
    Use the inspection settings to report &lt;code&gt;equals()&lt;/code&gt; calls with a non-constant argument
    when the argument to &lt;code&gt;equals()&lt;/code&gt; is proven not to be &lt;code&gt;null&lt;/code&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnnecessaryFinalOnLocalVariableOrParameter" defaultSeverity="WARNING" displayName="Unnecessary 'final' on local variable or parameter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables or parameters unnecessarily declared &lt;code&gt;final&lt;/code&gt;.
&lt;p&gt;Some coding standards frown upon variables declared &lt;code&gt;final&lt;/code&gt; for reasons of terseness.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    Foo(Object o) {}

    void bar(final Object o) {
      new Foo(o);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    Foo(Object o) {}

    void bar(Object o) {
      new Foo(o);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to toggle the reporting for:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    local variables
  &lt;/li&gt;
  &lt;li&gt;
    parameters (including
    parameters of &lt;code&gt;catch&lt;/code&gt; blocks and enhanced &lt;code&gt;for&lt;/code&gt; statements)
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Also, you can configure the inspection to only report &lt;code&gt;final&lt;/code&gt; parameters of &lt;code&gt;abstract&lt;/code&gt; or interface
  methods, which may be considered extra unnecessary as such markings don't
  affect the implementation of these methods.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryQualifierForThis" defaultSeverity="WARNING" displayName="Unnecessary qualifier for 'this' or 'super'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary qualification of &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;super&lt;/code&gt;.
&lt;p&gt;
  Using a qualifier on &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;super&lt;/code&gt; to
  disambiguate a code reference may easily become unnecessary via automatic refactorings and should be deleted for clarity.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    void foo() {}
  }

  class Bar extends Foo {
    void bar() {
      Bar.super.foo();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    void foo() {}
  }

  class Bar extends Foo {
    void bar() {
      super.foo();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LocalCanBeFinal" defaultSeverity="WARNING" displayName="Local variable or parameter can be 'final'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports parameters or local variables that may have the &lt;code&gt;final&lt;/code&gt; modifier added to their declaration.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList();
  fill(list);
  return list;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  final ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList();
  fill(list);
  return list;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection's options to define whether parameters or local variables should be reported.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnnecessarilyQualifiedInnerClassAccess" defaultSeverity="INFORMATION" displayName="Unnecessarily qualified inner class access" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any references to inner classes that are unnecessarily qualified with the name
of the enclosing class.
&lt;p&gt;Such a qualification can be safely removed, which sometimes adds an import for the inner class.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
     X.Y foo;
     class Y{}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
     Y foo;
     class Y{}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore references for which an import is needed&lt;/b&gt; option to ignore references to inner classes, where
  removing the qualification adds an import.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ChainedMethodCall" defaultSeverity="WARNING" displayName="Chained method calls" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method calls whose target is another method call.
The quick-fix suggests to introduce a local variable.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
    int foo(File f) {
      return f.getName().length();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
    int foo(File f) {
      final String name = f.getName();
      return name.length();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the inspection options to toggle warnings for the following cases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;
      chained method calls in field initializers,
      for instance, &lt;code&gt;private final int i = new Random().nextInt();&lt;/code&gt;
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;
      chained method calls operating on the same type,
      for instance, &lt;code&gt;new StringBuilder().append("x: ").append(new X()).append("y: ").append(new Y()).toString();&lt;/code&gt;.
    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OptionalIsPresent" defaultSeverity="WARNING" displayName="Non functional style 'Optional.isPresent()' usage" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Optional&lt;/code&gt; expressions used as &lt;code&gt;if&lt;/code&gt; or conditional expression conditions,
that can be rewritten in a functional style.
The result is often shorter and easier to read.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (str.isPresent()) str.get().trim();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  str.ifPresent(String::trim);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifiableAnnotation" defaultSeverity="WARNING" displayName="Simplifiable annotation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports annotations that can be simplified to their single-element or marker shorthand form.
&lt;p&gt;
Problems reported:
&lt;ul&gt;
  &lt;li&gt;Redundant &lt;code&gt;value=&lt;/code&gt; in annotation name-value pairs
  &lt;li&gt;Redundant braces around array values that contain only a single value
  &lt;li&gt;Redundant whitespace between the @-sign and the name of annotations
  &lt;li&gt;Redundant whitespace between annotation names and parameter lists
  &lt;li&gt;Redundant parentheses in annotations without any parameters
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @interface Foo { String[] value(); }

  @ Foo({"foo"})
  public String name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @interface Foo { String[] value(); }

  @Foo("foo")
  public String name;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnqualifiedInnerClassAccess" defaultSeverity="WARNING" displayName="Unqualified inner class access" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports references to inner classes that are not qualified with the name
of the enclosing class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import foo.Foo.Bar;

  class Foo {
    class Bar {}
  }

  class Baz {
    void f(Bar bar) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    class Bar {}
  }

  class Baz {
    void f(Foo.Bar bar) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection settings to ignore references to inner classes within the same class,
  which therefore do not require an import.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryToStringCall" defaultSeverity="WARNING" displayName="Unnecessary call to 'toString()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;toString()&lt;/code&gt; that are used in the following cases:
&lt;ul&gt;
  &lt;li&gt;In string concatenations&lt;/li&gt;
  &lt;li&gt;In the &lt;code&gt;java.lang.StringBuilder#append()&lt;/code&gt; or &lt;code&gt;java.lang.StringBuffer#append()&lt;/code&gt; methods&lt;/li&gt;
  &lt;li&gt;In the methods of &lt;code&gt;java.io.PrintWriter&lt;/code&gt; or &lt;code&gt;java.io.PrintStream&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;in the methods &lt;code&gt;org.slf4j.Logger&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these cases, conversion to string will be handled by the underlying library methods,
  and the explicit call to &lt;code&gt;toString()&lt;/code&gt; is not needed.
  Removing redundant &lt;code&gt;toString()&lt;/code&gt; calls can occasionally even improve performance and reduce object allocations.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(this.toString())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(this)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Note that without the &lt;code&gt;toString()&lt;/code&gt; call, the code semantics might be different: if the expression is null,
  then the &lt;code&gt;null&lt;/code&gt; string will be used instead of throwing a &lt;code&gt;NullPointerException&lt;/code&gt;.&lt;/p&gt;
  &lt;p&gt;Use the &lt;b&gt;Report only when qualifier is known to be not-null&lt;/b&gt; option to avoid warnings for the values that could potentially be null.
  Removing the explicit &lt;code&gt;toString()&lt;/code&gt; in these cases will change the runtime semantics
  from throwing a &lt;code&gt;NullPointException&lt;/code&gt; to silently accepting the value when it is &lt;code&gt;null&lt;/code&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LiteralAsArgToStringEquals" defaultSeverity="WARNING" displayName="String literal may be 'equals()' qualifier" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;String.equals()&lt;/code&gt; or &lt;code&gt;String.equalsIgnoreCase()&lt;/code&gt; calls
with a string literal argument.
&lt;p&gt;Some coding standards specify that string literals should be the qualifier of &lt;code&gt;equals()&lt;/code&gt;, rather than
  argument, thus minimizing &lt;code&gt;NullPointerException&lt;/code&gt;-s.&lt;/p&gt;
&lt;p&gt;A quick-fix is available to exchange the literal and the expression.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean isFoo(String value) {
    return value.equals("foo");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean isFoo(String value) {
    return "foo".equals(value);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LambdaCanBeReplacedWithAnonymous" defaultSeverity="INFORMATION" displayName="Lambda can be replaced with anonymous class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions that can be replaced with anonymous classes.
&lt;p&gt;
  Expanding lambda expressions to anonymous classes may be useful if you need to implement other
  methods inside an anonymous class.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  s -&gt; System.out.println(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new Consumer&amp;lt;String&amp;gt;() {
  @Override
  public void accept(String s) {
    System.out.println(s);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LambdaBodyCanBeCodeBlock" defaultSeverity="INFORMATION" displayName="Lambda body can be code block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambdas whose body is an expression and suggests converting expression bodies to code blocks.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  n&amp;nbsp;-&amp;gt;&amp;nbsp;n&amp;nbsp;+&amp;nbsp;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n -&amp;gt; {
  return n + 1;
}&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EscapedSpace" defaultSeverity="WARNING" displayName="Non-terminal use of '\s' escape sequence" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;\s&lt;/code&gt; escape sequences anywhere except at text-block line endings or within a series of several escaped spaces.
Such usages can be confusing or a mistake, especially if the string is interpreted as a regular expression.
The &lt;code&gt;\s&lt;/code&gt; escape sequence is intended to encode a space at the end of text-block lines where normal spaces are trimmed.
In other locations, as well as in regular string or char literals, &lt;code&gt;\s&lt;/code&gt; is identical to an ordinary space character (&lt;code&gt;"&amp;nbsp;"&lt;/code&gt;).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (str.matches("\s+")) {...}
&lt;/code&gt;&lt;/pre&gt;
Here it's likely that &lt;code&gt;"\\s+"&lt;/code&gt; was intended (to match any whitespace character). If not, using &lt;code&gt;str.matches("&amp;nbsp;+")&lt;/code&gt;
would be less confusing.
&lt;p&gt;
  A quick-fix is provided that replaces &lt;code&gt;\s&lt;/code&gt; escapes with space characters.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;&amp;#39;\s&amp;#39; escape sequences&amp;#39;, which is available since Java 15.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2022.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PatternVariablesCanBeReplacedWithCast" defaultSeverity="INFORMATION" displayName="Using 'instanceof' with patterns" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;instanceof&lt;/code&gt; with patterns and suggests converting them to ordinary &lt;code&gt;instanceof&lt;/code&gt; with casts.
&lt;p&gt;This inspection makes it possible to move &lt;code&gt;instanceof&lt;/code&gt; with patterns to a codebase using an earlier Java version
  by applying the quick-fix.&lt;/p&gt;
&lt;p&gt;
  Note that the result can be not completely equivalent to the original &lt;code&gt;instanceof&lt;/code&gt; with patterns when
  a complex expression before &lt;code&gt;instanceof&lt;/code&gt; is used. In this case this expression will be reevaluated.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (object instanceof String txt &amp;&amp; txt.length() == 1) {
      System.out.println(txt);
  } else {
      return;
  }
  System.out.println(txt);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (object instanceof String &amp;&amp; ((String) object).length() ==1) {
      String txt = (String) object;
      System.out.println(txt);
  } else {
      return;
  }
  String txt = (String) object;
  System.out.println(txt);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2023.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CharsetObjectCanBeUsed" defaultSeverity="WARNING" displayName="Standard 'Charset' object can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods and constructors in which constant charset &lt;code&gt;String&lt;/code&gt; literal (for example, &lt;code&gt;"UTF-8"&lt;/code&gt;) can be replaced with
the predefined &lt;code&gt;StandardCharsets.UTF_8&lt;/code&gt; code.
&lt;p&gt;The code after the fix may work faster, because the charset lookup becomes unnecessary.
  Also, catching &lt;code&gt;UnsupportedEncodingException&lt;/code&gt; may become unnecessary as well. In this case,
  the catch block will be removed automatically.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
    byte[] bytes = "str".getBytes("UTF-8");
  } catch (UnsupportedEncodingException e) {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  byte[] bytes = "str".getBytes(StandardCharsets.UTF_8);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;The inspection is available in Java 7 and later.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SizeReplaceableByIsEmpty" defaultSeverity="WARNING" displayName="'size() == 0' can be replaced with 'isEmpty()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;.size()&lt;/code&gt; or &lt;code&gt;.length()&lt;/code&gt;
comparisons with a &lt;code&gt;0&lt;/code&gt; literal that can be replaced with a call to &lt;code&gt;.isEmpty()&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean emptyList = list.size() == 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean emptyList = list.isEmpty();
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignored classes&lt;/b&gt; table to add classes for which any &lt;code&gt;.size()&lt;/code&gt; or &lt;code&gt;.length()&lt;/code&gt; comparisons should not be replaced.
&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore expressions which would be replaced with &lt;code&gt;!isEmpty()&lt;/code&gt;&lt;/b&gt; option to ignore any expressions which would be replaced with &lt;code&gt;!isEmpty()&lt;/code&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallToStringConcatCanBeReplacedByOperator" defaultSeverity="WARNING" displayName="Call to 'String.concat()' can be replaced with '+'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.String.concat()&lt;/code&gt;.
&lt;p&gt;
  Such calls can be replaced with the &lt;code&gt;+&lt;/code&gt; operator for clarity and possible increased
  performance if the method was invoked on a constant with a constant argument.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String foo(String name) {
    return name.concat("foo");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String foo(String name) {
    return name + "foo";
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExtendsObject" defaultSeverity="WARNING" displayName="Class explicitly extends 'Object'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any classes that are explicitly declared to extend &lt;code&gt;java.lang.Object&lt;/code&gt;.
&lt;p&gt;Such declaration is redundant and can be safely removed.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass extends Object {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes the redundant &lt;code&gt;extends Object&lt;/code&gt; clause:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectsEqualsCanBeSimplified" defaultSeverity="INFORMATION" displayName="'Objects.equals()' can be replaced with 'equals()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Objects.equals(a, b)&lt;/code&gt; in which the first argument is statically known to be non-null.
&lt;p&gt;Such a call can be safely replaced with &lt;code&gt;a.equals(b)&lt;/code&gt; or &lt;code&gt;a == b&lt;/code&gt; if both arguments are primitives.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String defaultName = "default";
  boolean isDefault = Objects.equals(defaultName, name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String defaultName = "default";
  boolean isDefault = defaultName.equals(name);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;java.util.Objects API&amp;#39;, which is available since Java 7.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryBlockStatement" defaultSeverity="INFORMATION" displayName="Unnecessary code block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code blocks that are redundant to the semantics of the program and can
be replaced with their contents.
&lt;p&gt;The code blocks that are the bodies of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;,
&lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;for&lt;/code&gt; statements will not be reported by this
  inspection.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo() {
    { // unnecessary
      int result = call();
      analyze(result);
    } // unnecessary
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore branches of 'switch' statements&lt;/b&gt; option to ignore the code blocks that are used as branches of switch statements.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantLabeledSwitchRuleCodeBlock" defaultSeverity="WARNING" displayName="Labeled switch rule has redundant code block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports labeled rules of &lt;code&gt;switch&lt;/code&gt; statements or &lt;code&gt;switch&lt;/code&gt; expressions that have a redundant code block.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = switch (n) {
    case 1 -&gt; { yield Integer.toString(n); }
    default -&gt; "default";
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = switch (n) {
    case 1 -&gt; Integer.toString(n);
    default -&gt; "default";
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Enhanced &amp;#39;switch&amp;#39; blocks&amp;#39;, which is available since Java 14.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CStyleArrayDeclaration" defaultSeverity="WARNING" displayName="C-style array declaration" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports array declarations written in C-style syntax, where the array brackets
  are placed after a variable name or after a method parameter list.
Most code styles prefer Java-style array declarations, where the array brackets are placed after the type name.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public&lt;/b&gt; String process(String value[])[] {
    return value;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public&lt;/b&gt; String[] process(String[] value) {
    return value;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore C-style declarations in variables&lt;/b&gt; option to report C-style array declaration of method return types only.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReassignedVariable" defaultSeverity="TEXT ATTRIBUTES" displayName="Reassigned variable" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reassigned variables, which complicate reading and understanding the code.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int value = 2 * (height + width);
  System.out.println("perimeter: " + value);

  value = height * width;
  System.out.println("area: " + value);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MoveFieldAssignmentToInitializer" defaultSeverity="INFORMATION" displayName="Field assignment can be moved to initializer" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests replacing initialization of fields using assignment with initialization in the field declaration.
&lt;p&gt;Only reports if the field assignment is located in an instance or static initializer, and
  joining it with the field declaration is likely to be safe.
  In other cases, like assignment inside a constructor, the quick-fix is provided without highlighting,
  as the fix may change the semantics.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass {
    static final int intConstant;
    
    static {
      intConstant = 10;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
The quick fix moves the assigned value to the field initializer removing the class initializer if possible:
&lt;pre&gt;&lt;code&gt;
  class MyClass {
    static final int intConstant = 10;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;small&gt;Since 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JoinDeclarationAndAssignmentJava" defaultSeverity="INFORMATION" displayName="Assignment can be joined with declaration" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variable assignments that can be joined with a variable declaration.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int x;
  x = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix converts the assignment into an initializer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int x = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FillPermitsList" defaultSeverity="INFORMATION" displayName="Same file subclasses are missing from permits clause of a sealed class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;sealed&lt;/code&gt; classes without an explicit &lt;code&gt;permits&lt;/code&gt; list.
Sealed classes that only have subclasses in the same file are not required to have an explicit &lt;code&gt;permits&lt;/code&gt; list.
By default, this inspection does not highlight in the editor, but only provides a fix.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  sealed class A {}
  final class B extends A {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  sealed class A permits B {}
  final class B extends A {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Sealed classes&amp;#39;, which is available since Java 17.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessarilyQualifiedStaticUsage" defaultSeverity="WARNING" displayName="Unnecessarily qualified static access" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of static members unnecessarily qualified with the class name.
&lt;p&gt;
Qualification with the class is unnecessary when the static member is available in a surrounding class
or in a super class of a surrounding class. Such qualification may be safely removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    static void foo() {}
    static int x;

    void bar() {
      Foo.foo();
      System.out.println(Foo.x);
    }

    static void baz() { Foo.foo(); }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    static void foo() {}
    static int x;

    void bar() {
      foo();
      System.out.println(x);
    }

    static void baz() { foo(); }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to toggle the reporting for:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Static fields access:&lt;br&gt;&lt;code&gt;void bar() { System.out.println(Foo.x); }&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Calls to static methods:&lt;br&gt;&lt;code&gt;void bar() { Foo.foo(); }&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Also, you can configure the inspection to only report static member usage
  in a static context. In this case, only &lt;code&gt;static void baz() { Foo.foo(); }&lt;/code&gt; will be reported.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantExpression" defaultSeverity="INFORMATION" displayName="Constant expression can be evaluated" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constant expressions, whose value can be evaluated statically, 
  and suggests replacing them with their actual values.
  For example, you will be prompted to replace &lt;code&gt;2 + 2&lt;/code&gt; with &lt;code&gt;4&lt;/code&gt;,
  or &lt;code&gt;Math.sqrt(9.0)&lt;/code&gt; with &lt;code&gt;3.0&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryFullyQualifiedName" defaultSeverity="INFORMATION" displayName="Unnecessary fully qualified name" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fully qualified class names that can be shortened.
&lt;p&gt;The quick-fix shortens fully qualified names and adds import statements if necessary.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class ListWrapper {
    java.util.List&amp;lt;Integer&amp;gt; l;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util.List;
  class ListWrapper {
    List&amp;lt;Integer&amp;gt; l;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;

&lt;p&gt;
  Use the &lt;b&gt;Ignore in Java 9 module statements&lt;/b&gt; option to ignore fully qualified names inside the Java 9
  &lt;code&gt;provides&lt;/code&gt; and &lt;code&gt;uses&lt;/code&gt; module statements.
&lt;p&gt;
  In &lt;a href="settings://preferences.sourceCode.Java?JavaDoc%20Inner"&gt;Settings | Editor | Code Style | Java | Imports&lt;/a&gt;,
  use the following options to configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Insert imports for inner classes&lt;/b&gt; option if references to inner classes should be qualified with the outer class.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Use fully qualified class names in JavaDoc&lt;/b&gt; option to allow fully qualified names in Javadocs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingOctalEscape" defaultSeverity="WARNING" displayName="Confusing octal escape sequence" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string literals containing an octal escape sequence immediately followed by
a digit.
&lt;p&gt;Such strings may be confusing, and are often the result of errors in escape code creation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println("\1234"); // Octal escape sequence '\123' immediately followed by a digit
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessarySuperQualifier" defaultSeverity="WARNING" displayName="Unnecessary 'super' qualifier" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary &lt;code&gt;super&lt;/code&gt;
qualifiers in method calls and field references.
&lt;p&gt;
  A &lt;code&gt;super&lt;/code&gt; qualifier is unnecessary
  when the field or method of the superclass is not hidden/overridden in the calling class.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    void foo() {}
  }

  class Bar extends Foo {
    void bar() {
      super.foo();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    void foo() {}
  }

  class Bar extends Foo {
    void bar() {
      foo();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection settings to ignore qualifiers that help to distinguish superclass members access
  from the identically named members of the outer class.
&lt;p&gt;
&lt;p&gt;
  See also the following inspections:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;i&gt;Java | Visibility | Access to inherited field looks like access to element from surrounding code&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;Java | Visibility | Call to inherited method looks like call to local method&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeParameterExtendsObject" defaultSeverity="WARNING" displayName="Type parameter explicitly extends 'Object'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type parameters and wildcard type arguments that are explicitly declared to extend &lt;code&gt;java.lang.Object&lt;/code&gt;.
&lt;p&gt;Such 'extends' clauses are redundant as &lt;code&gt;java.lang.Object&lt;/code&gt; is a supertype for all classes.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class ClassA&amp;lt;T extends Object&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  If you need to preserve the 'extends Object' clause because of annotations, disable the
  &lt;b&gt;Ignore when java.lang.Object is annotated&lt;/b&gt; option.
  This might be useful, for example, when you use a nullness analyzer, and the 'extends Object' clause
  holds a &lt;code&gt;@Nullable&lt;/code&gt;/&lt;code&gt;@NotNull&lt;/code&gt; annotation.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class MyClass&amp;lt;T extends @NotNull Object&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryParentheses" defaultSeverity="INFORMATION" displayName="Unnecessary parentheses" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any instance of unnecessary parentheses.
&lt;p&gt;Parentheses are considered unnecessary if the evaluation order of an expression remains
  unchanged after you remove the parentheses.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int n = 3 + (9 * 8);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int n = 3 + 9 * 8;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore clarifying parentheses&lt;/b&gt; option to ignore parentheses that help clarify a binary
    expression. Parentheses are clarifying if the parenthesized expression is an
    &lt;code&gt;instanceof&lt;/code&gt; expression that is a part of a larger expression or has a different operator than the parent expression.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore parentheses around the condition of conditional expressions&lt;/b&gt; option to ignore any
    parentheses around the condition of conditional expressions. Some coding standards specify that all such
    conditions must be surrounded by parentheses.&lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore parentheses around single no formal type lambda parameter&lt;/b&gt; option to ignore parentheses
    around a single lambda parameter within a lambda expression.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayCreationWithoutNewKeyword" defaultSeverity="INFORMATION" displayName="Array creation without 'new' expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports array initializers without &lt;code&gt;new&lt;/code&gt; array expressions and suggests adding them.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int[] a = {42}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int[] a = new int[]{42}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SwitchLabeledRuleCanBeCodeBlock" defaultSeverity="INFORMATION" displayName="Labeled switch rule can have code block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports rules of &lt;code&gt;switch&lt;/code&gt; expressions or enhanced &lt;code&gt;switch&lt;/code&gt; statements with an expression body.
These can be converted to code blocks.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String message = switch (errorCode) {
    case 404 -&gt; "Not found!";
    ...
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String message = switch (errorCode) {
    case 404 -&gt; {
                yield "Not found!";
            }
    ...
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Enhanced &amp;#39;switch&amp;#39; blocks&amp;#39;, which is available since Java 14.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReturnSeparatedFromComputation" defaultSeverity="INFORMATION" displayName="'return' separated from the result computation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;return&lt;/code&gt; statements that return a local variable where the value of the variable is computed
somewhere else within the same method.
&lt;p&gt;The quick-fix inlines the returned variable by moving the return statement to the location in which the value
  of the variable is computed.
  When the returned value can't be inlined into the &lt;code&gt;return&lt;/code&gt; statement, 
  the quick-fix attempts to move the return statement as close to the computation of the returned value as possible.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int n = -1;
  for (int i = 0; i &amp;lt; a.length; i++) {
    if (a[i] == b) {
      n = i;
      break;
    }
  }
  return n;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int n = -1;
  for (int i = 0; i &amp;lt; a.length; i++) {
    if (a[i] == b) {
      return i;
    }
  }
  return n;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryCallToStringValueOf" defaultSeverity="WARNING" displayName="Unnecessary conversion to 'String'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary calls to static methods that convert their parameters to a string, e.g. &lt;code&gt;String.valueOf()&lt;/code&gt; or &lt;code&gt;Integer.toString()&lt;/code&gt;.
Such calls are unnecessary when used in string concatenations.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println("Number: " + Integer.toString(count));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println("Number: " + count);
&lt;/code&gt;&lt;/pre&gt;
Additionally such calls are unnecessary when used as arguments to library methods that do their own string conversion.
Some examples of library methods that do their own string conversion are:
&lt;ul&gt;
  &lt;li&gt;
    Classes &lt;code&gt;java.io.PrintWriter&lt;/code&gt;, &lt;code&gt;java.io.PrintStream&lt;/code&gt;
    &lt;ul&gt;&lt;li&gt;&lt;code&gt;print()&lt;/code&gt;, &lt;code&gt;println()&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Classes &lt;code&gt;java.lang.StringBuilder&lt;/code&gt;, &lt;code&gt;java.lang.StringBuffer&lt;/code&gt;
    &lt;ul&gt;&lt;li&gt;&lt;code&gt;append()&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
  &lt;/li&gt;

  &lt;li&gt;
    Class &lt;code&gt;org.slf4j.Logger&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;trace()&lt;/code&gt;, &lt;code&gt;debug()&lt;/code&gt;, &lt;code&gt;info()&lt;/code&gt;, &lt;code&gt;warn()&lt;/code&gt;, &lt;code&gt;error()&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Report calls that can be replaced with a concatenation with the empty string&lt;/b&gt;
  option to also report cases where concatenations with the empty string can be used instead of a call to &lt;code&gt;String.valueOf()&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ControlFlowStatementWithoutBraces" defaultSeverity="INFORMATION" displayName="Control flow statement without braces" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, or &lt;code&gt;for&lt;/code&gt; statements without braces.
Some code styles, e.g. the &lt;a href="https://google.github.io/styleguide/javaguide.html"&gt;Google Java Style guide&lt;/a&gt;,
require braces for all control statements.
&lt;p&gt;
  When adding further statements to control statements without braces, it is important not to forget adding braces.
  When commenting out a line of code, it is also necessary to be more careful when not using braces,
  to not inadvertently make the next statement part of the control flow statement.
  Always using braces makes inserting or commenting out a line of code safer.
&lt;p&gt;
  It's likely the &lt;a href="https://www.imperialviolet.org/2014/02/22/applebug.html"&gt;goto fail vulnerability&lt;/a&gt; would not have happened,
  if an always use braces code style was used.
  Control statements with braces make the control flow easier to see, without relying on, possibly incorrect, indentation.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Strange {
    void x(boolean one, boolean two) {
      if(one)
        if(two)
          foo();
      else
        bar();
    }

    void foo() {}
    void bar() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix wraps the statement body with braces:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Strange {
    void x(boolean one, boolean two) {
      if(one) {
        if(two) {
          foo();
        } else {
          bar();
        }
      }
    }

    void foo() {}
    void bar() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnqualifiedMethodAccess" defaultSeverity="WARNING" displayName="Instance method call not qualified with 'this'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to non-&lt;code&gt;static&lt;/code&gt; methods on the same instance that are not qualified with &lt;code&gt;this&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    void bar() {}

    void foo() {
      bar();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    void bar() {}

    void foo() {
      this.bar();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnqualifiedFieldAccess" defaultSeverity="WARNING" displayName="Instance field access not qualified with 'this'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports field access operations that are not qualified with &lt;code&gt;this&lt;/code&gt; or some other qualifier.
&lt;p&gt;
  Some coding styles mandate that all field access operations are qualified to prevent confusion with local
  variable or parameter access.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    int foo;

    void bar() {
      foo += 1;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    int foo;

    void bar() {
      this.foo += 1;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SingleElementAnnotation" defaultSeverity="INFORMATION" displayName="Non-normalized annotation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports annotations in a shorthand form and suggests rewriting them in a normal form with an attribute name.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @SuppressWarnings("foo")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @SuppressWarnings(value = "foo")
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Logging" path="JVM languages"><inspection shortName="LoggingPlaceholderCountMatchesArgumentCount" defaultSeverity="WARNING" displayName="Number of placeholders does not match number of arguments in logging call" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports SLF4J, Log4j2 and akka.event.LoggingAdapter logging calls, such as &lt;code&gt;logger.info("{}: {}", key)&lt;/code&gt; where the number of
&lt;code&gt;{}&lt;/code&gt; placeholders
in the logger message doesn't match the number of other arguments to the logging call.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection option to specify which implementation SLF4J uses.
  If &lt;strong&gt;Check automatically&lt;/strong&gt; is chosen, then &lt;code&gt;org.apache.logging.slf4j.Log4jLogger&lt;/code&gt; is searched in the classpath.
  If this file is founded or &lt;strong&gt;Yes&lt;/strong&gt; is chosen, then cases, when the last parameter with an exception type has a placeholder,
  will not be reported for SLFJ4 API.&lt;br/&gt;
For example:
&lt;pre&gt;&lt;code lang="java"&gt;
//this case will not be reported with "Yes" option
log.error("For id {}: {}", "1", new RuntimeException());
&lt;/code&gt;&lt;/pre&gt;
In this case 'new RuntimeException()' will be printed using 'toString()', (its stacktrace will not be printed):
&lt;pre&gt;&lt;code lang="text"&gt;
For id 1: java.lang.RuntimeException
&lt;/code&gt;&lt;/pre&gt;

Otherwise, it will be highlighted because the last placeholder is not used:
&lt;pre&gt;&lt;code lang="text"&gt;
For id 1: {}
java.lang.RuntimeException: null
&lt;/code&gt;&lt;/pre&gt;

&lt;strong&gt;No&lt;/strong&gt; option can be used to always highlight such cases when a placeholder is used for an exception
even if &lt;code&gt;org.apache.logging.slf4j.Log4jLogger&lt;/code&gt; is used as a backend.&lt;br/&gt;

This option works only for SLF4J.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoggingConditionDisagreesWithLogLevelStatement" defaultSeverity="WARNING" displayName="Log condition does not match logging call" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;em&gt;is log enabled for&lt;/em&gt; conditions of &lt;code&gt;if&lt;/code&gt; statements that
do not match the log level of the contained logging call.
&lt;p&gt;
For example:
&lt;pre&gt;&lt;code lang="java"&gt;
  if (LOG.isTraceEnabled()) {
    // debug level logged, but checked for trace level
    LOG.debug("some log message");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection understands the &lt;em&gt;java.util.logging&lt;/em&gt;, &lt;em&gt;Log4j&lt;/em&gt;, &lt;em&gt;Log4j2&lt;/em&gt;, &lt;em&gt;Apache Commons Logging&lt;/em&gt;
and the &lt;em&gt;SLF4J&lt;/em&gt; logging frameworks.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoggingStringTemplateAsArgument" defaultSeverity="WARNING" displayName="String template as argument to logging call" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string templates that are used as arguments to &lt;b&gt;SLF4J&lt;/b&gt; and &lt;b&gt;Log4j 2&lt;/b&gt; logging methods.
The method &lt;code&gt;org.apache.logging.log4j.Logger.log()&lt;/code&gt; and its overloads are supported only for &lt;b&gt;all log levels&lt;/b&gt; option.
String templates are evaluated at runtime even when the logging message is not logged; this can negatively impact performance.
It is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.
&lt;p&gt;&lt;b&gt;Example (for Kotlin):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
      val variable1 = getVariable()
      logger.info("variable1: $variable1")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;After the quick-fix is applied (for Kotlin):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
      val variable1 = getVariable()
      logger.info("variable1: {}", variable1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Note that the suggested replacement might not be equivalent to the original code, for example,
  when string templates contain method calls or assignment expressions.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Warn on&lt;/b&gt; list to ignore certain higher logging levels. Higher logging levels may be always enabled, and the arguments will always be evaluated.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Do not warn when only expressions with primitive types, their wrappers or String are included&lt;/b&gt; option to ignore
    string templates, which contain only expressions with primitive types, their wrappers or String.
    For example, it could be useful to prevent loading lazy collections.
    Note that, creating string even only with expressions with primitive types,
    their wrappers or String at runtime can negatively impact performance.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Do not warn when call only with an exception as argument after message argument&lt;/b&gt; option to ignore
    calls, which only contain an exception as an argument after the message argument.
    For example, it could be useful to adjust the inspection's behavior with a custom code style.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;New in 2023.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoggingSimilarMessage" defaultSeverity="WEAK WARNING" displayName="Non-distinguishable logging calls" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports SLF4J, Log4j2 logging calls in one class, such as &lt;code&gt;logger.info("message: {}", key)&lt;/code&gt; with similar log messages.
These calls can be non-distinguishable from each other, and this introduces difficulties to understand where a certain log message is coming from.
&lt;p&gt;&lt;b&gt;Example (for Java):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  private static void request1(String text) {
      log.info("Message: {}", text); //similar call
      doSomething1();
  }

  private static void request2(int i) {
      log.info("Message: {}", i); //similar call
      doSomething2();
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Minimum length of a similar sequence&lt;/b&gt; option to set the minimum length of similar sequences after which calls will be reported
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Do not report calls with the 'error' log level&lt;/b&gt; option to ignore messages with `error` log level and when there is an exception.
    It may be useful to hide the warnings, because call sites can still be located using stack traces
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;New in 2024.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoggingGuardedByCondition" defaultSeverity="INFORMATION" displayName="Logging calls guarded by log condition" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports logging calls surrounded with a guard condition.
This inspection can be used to adjust with a custom code style.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class TestObject {
    void test(Object object) {
      if(LOG.isDebugEnabled()){
        LOG.debug("some logging " + expensiveCalculation(1));
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class TestObject {
    void test(Object object) {
      LOG.debug("some logging " + expensiveCalculation(1));
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This inspection supports &lt;em&gt;Log4j2&lt;/em&gt; and the &lt;em&gt;SLF4J&lt;/em&gt; logging frameworks (except builders).
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2024.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LogStatementNotGuardedByLogCondition" defaultSeverity="INFORMATION" displayName="Logging call not guarded by log condition" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports logging calls that are not surrounded by a guard condition.
The evaluation of a call's arguments can be expensive.
Surrounding a logging call with a guard clause prevents that cost when logging
is disabled for the level used by the logging statement. This is especially useful for the
least serious level (trace, debug, finest) of logging calls, because those are
most often disabled in a production environment.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class TestObject {
    void test(Object object) {
      LOG.debug("some logging " + expensiveCalculation(1));
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class TestObject {
    void test(Object object) {
      if(LOG.isDebugEnabled()){
        LOG.debug("some logging " + expensiveCalculation(1));
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This inspection supports &lt;em&gt;Log4j2&lt;/em&gt; and the &lt;em&gt;SLF4J&lt;/em&gt; logging frameworks (except builders).
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2024.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Numeric issues" path="Java"><inspection shortName="ComparisonToNaN" defaultSeverity="WARNING" displayName="Comparison to 'Double.NaN' or 'Float.NaN'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any comparisons to &lt;code&gt;Double.NaN&lt;/code&gt; or &lt;code&gt;Float.NaN&lt;/code&gt;.
Such comparisons are never meaningful, as NaN is not equal to anything, including itself.
Use the &lt;code&gt;Double.isNaN()&lt;/code&gt; or &lt;code&gt;Float.isNaN()&lt;/code&gt; methods instead.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (x == Double.NaN) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (Double.isNaN(x)) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantMathCall" defaultSeverity="WARNING" displayName="Constant call to 'Math'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.Math&lt;/code&gt; or &lt;code&gt;java.lang.StrictMath&lt;/code&gt; methods that can be replaced with simple compile-time constants.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double v = Math.sin(0.0);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double v = 0.0;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PointlessArithmeticExpression" defaultSeverity="WARNING" displayName="Pointless arithmetic expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports pointless arithmetic expressions. Such expressions include adding or subtracting zero,
multiplying by zero or one, and division by one.
&lt;p&gt;Such expressions may be the result of automated refactorings and they are unlikely to be what the developer intended to do.&lt;/p&gt;
&lt;p&gt;The quick-fix simplifies such expressions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  void f(int a) {
    int x = a - a;
    int y = a + 0;
    int res = x / x;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(int a) {
    int x = 0;
    int y = a;
    int res = 1;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Note that in rare cases, the suggested replacement might not be completely equivalent to the original code
  for all possible inputs. For example, the inspection suggests replacing &lt;code&gt;x / x&lt;/code&gt; with &lt;code&gt;1&lt;/code&gt;.
  However, if &lt;code&gt;x&lt;/code&gt; is zero, the original code throws &lt;code&gt;ArithmeticException&lt;/code&gt; or results in &lt;code&gt;NaN&lt;/code&gt;.
  Also, if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;, then the result is also &lt;code&gt;NaN&lt;/code&gt;. It's very unlikely that such behavior is  intended.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BigDecimalMethodWithoutRoundingCalled" defaultSeverity="WARNING" displayName="Call to 'BigDecimal' method without a rounding mode argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;divide()&lt;/code&gt; or &lt;code&gt;setScale()&lt;/code&gt; without a rounding mode argument.
&lt;p&gt;Such calls can lead to an &lt;code&gt;ArithmeticException&lt;/code&gt; when the exact value cannot be represented in the result
  (for example, because it has a non-terminating decimal expansion).&lt;/p&gt;
&lt;p&gt;Specifying a rounding mode prevents the &lt;code&gt;ArithmeticException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  BigDecimal.valueOf(1).divide(BigDecimal.valueOf(3));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OctalLiteral" defaultSeverity="WARNING" displayName="Octal integer" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports octal integer literals. Some coding standards prohibit the
use of octal literals, as they may be easily confused with decimal literals.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int i = 015;
  int j = 0_777;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This inspection has two different quick-fixes.
  After the &lt;b&gt;Convert octal literal to decimal literal&lt;/b&gt; quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int i = 13;
  int j = 511;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the &lt;b&gt;Remove leading zero to make decimal&lt;/b&gt; quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int i = 15;
  int j = 777;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DivideByZero" defaultSeverity="WARNING" displayName="Division by zero" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports division by zero or remainder by zero.
Such expressions will produce an &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt; or &lt;code&gt;NaN&lt;/code&gt; result for doubles or floats,
and will throw an &lt;code&gt;ArithmeticException&lt;/code&gt; for integers.
&lt;p&gt;When the expression has a &lt;code&gt;NaN&lt;/code&gt; result, the fix suggests replacing the division expression with the &lt;code&gt;NaN&lt;/code&gt; constant.
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnaryPlus" defaultSeverity="WARNING" displayName="Unary plus" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of the &lt;code&gt;+&lt;/code&gt; unary operator. The unary plus is usually a null operation, and
its presence might represent a coding error. For example, in a combination with the increment operator (like in &lt;code&gt;+++&lt;/code&gt;)
or with the equal operator (like in &lt;code&gt;=+&lt;/code&gt;).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void unaryPlus(int i) {
    int x = + +i;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following quick fixes are suggested:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;Remove &lt;code&gt;+&lt;/code&gt; operators before the &lt;code&gt;i&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void unaryPlus(int i) {
    int x = i;
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Replace &lt;code&gt;+&lt;/code&gt; operators with the prefix increment operator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void unaryPlus(int i) {
    int x = ++i;
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to report unary pluses that are used together with a binary or another unary expression.
It means the inspection will not report situations when a unary plus expression is used in array
initializer expressions or as a method argument.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryUnaryMinus" defaultSeverity="WARNING" displayName="Unnecessary unary minus" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary unary minuses. Such expressions might be hard to understand and might contain errors.
&lt;p&gt;&lt;b&gt;For example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void unaryMinus(int i) {
    int x = - -i;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following quick fixes are suggested here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;Remove &lt;code&gt;-&lt;/code&gt; operators before the &lt;code&gt;i&lt;/code&gt; variable:&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;void unaryMinus(int i) {
    int x = i;
  }&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
 &lt;p&gt;Replace &lt;code&gt;-&lt;/code&gt; operators with the prefix decrement operator:&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;void unaryMinus(int i) {
    int x = --i;
  }&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Another example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void unaryMinus(int i) {
    i += - 8;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void unaryMinus(int i) {
    i -= 8;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegativeIntConstantInLongContext" defaultSeverity="WARNING" displayName="Negative int hexadecimal constant in long context" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports negative int hexadecimal constants in long context. Such constants are implicitly widened to
long, which means their higher bits will become 1 rather than 0 (e.g., 0xFFFF_FFFF will become 0xFFFF_FFFF_FFFF_FFFFL).
Unlikely this is intended, and even if it is, using an explicit long constant would be less confusing.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Warning: this is int constant -1 which is widened to long
  // becoming 0xFFFF_FFFF_FFFF_FFFFL.
  long mask = 0xFFFF_FFFF;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CachedNumberConstructorCall" defaultSeverity="WARNING" displayName="Number constructor call with primitive argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiations of new &lt;code&gt;Long&lt;/code&gt;,
&lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, or
&lt;code&gt;Byte&lt;/code&gt; objects that have a primitive &lt;code&gt;long&lt;/code&gt;,
&lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, or
&lt;code&gt;byte&lt;/code&gt;
argument.
&lt;p&gt;It is recommended that you use the static method &lt;code&gt;valueOf()&lt;/code&gt;
  introduced in Java 5. By default, this method caches objects for values between -128 and
  127 inclusive.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Integer i = new Integer(1);
  Long l = new Long(1L);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Integer i = Integer.valueOf(1);
  Long l = Long.valueOf(1L);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore new number expressions with a String argument&lt;/b&gt; option to ignore calls to number constructors with a &lt;code&gt;String&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Report only when constructor is @Deprecated&lt;/b&gt;  option to only report calls to deprecated constructors.
  &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt; and &lt;code&gt;Byte&lt;/code&gt; constructors are deprecated since JDK 9.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyComplexArithmeticExpression" defaultSeverity="WARNING" displayName="Overly complex arithmetic expression" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arithmetic expressions with the excessive number of terms. Such expressions might be hard to understand and might contain errors.
&lt;p&gt;Parameters, field references, and other primary expressions are counted as a term.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
  &lt;pre&gt;&lt;code&gt;int calc(int a, int b) {
        return a + a + a + b + b + b + b; // The line contains 7 terms and will be reported.
    }&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the field below to specify a number of terms allowed in arithmetic expressions.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonReproducibleMathCall" defaultSeverity="WARNING" displayName="Non-reproducible call to 'Math'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.Math&lt;/code&gt; methods, which results are not guaranteed to be reproduced precisely.
&lt;p&gt;In environments where reproducibility of results is required, &lt;code&gt;java.lang.StrictMath&lt;/code&gt;
  should be used instead.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="BadOddness" defaultSeverity="WARNING" displayName="Suspicious oddness check" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports odd-even checks of the following form: &lt;code&gt;x % 2 == 1&lt;/code&gt;.
Such checks fail when used with negative odd values.
Consider using &lt;code&gt;x % 2 != 0&lt;/code&gt; or &lt;code&gt;(x &amp; 1) == 1&lt;/code&gt; instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LossyConversionCompoundAssignment" defaultSeverity="WARNING" displayName="Possibly lossy implicit cast in compound assignment" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports compound assignments if the type of the right-hand operand is not assignment compatible with the type of the variable.
&lt;p&gt;
During such compound assignments, an implicit cast occurs, potentially resulting in lossy conversions.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  long c = 1;
  c += 1.2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  long c = 1;
  c += (long) 1.2;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2023.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IntegerDivisionInFloatingPointContext" defaultSeverity="WARNING" displayName="Integer division in floating-point context" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports integer divisions where the result is used as a floating-point number.
Such division is often an error and may have unexpected results
due to the truncation that happens in integer division.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  float x = 3.0F + 3 * 2 / 5;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  float x = 3.0F + ((float) (3 * 2)) /5;
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LongLiteralsEndingWithLowercaseL" defaultSeverity="WARNING" displayName="'long' literal ending with 'l' instead of 'L'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;long&lt;/code&gt; literals ending with lowercase 'l'. These
literals may be confusing, as the lowercase 'l' looks very similar to a literal '1' (one).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  long nights = 100l;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  long nights = 100L;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RemoveLiteralUnderscores" defaultSeverity="INFORMATION" displayName="Underscores in numeric literal" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports numeric literals with underscores and suggests removing them with a quick-fix.
This may be useful if you need to lower the language level.
&lt;p&gt;The quick-fix removes underscores from numeric literals. For example &lt;code&gt;1_000_000&lt;/code&gt; will be converted to &lt;code&gt;1000000&lt;/code&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;i&gt;Numeric literals with underscores&lt;/i&gt; appeared in Java 7.
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CharUsedInArithmeticContext" defaultSeverity="WARNING" displayName="'char' expression used in arithmetic context" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions of the &lt;code&gt;char&lt;/code&gt; type used in addition or subtraction expressions.
&lt;p&gt;Such code is not necessarily an issue but may result in bugs (for example,
  if a string is expected).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;int a = 'a' + 42;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied: &lt;code&gt;int a = (int) 'a' + 42;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;String&lt;/code&gt; context:
&lt;pre&gt;&lt;code&gt;int i1 = 1;
int i2 = 2;
System.out.println(i2 + '-' + i1 + &amp;quot; = &amp;quot; + (i2 - i1));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;code&gt;System.out.println(i2 + &amp;quot;-&amp;quot; + i1 + &amp;quot; = &amp;quot; + (i2 - i1));&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousLiteralUnderscore" defaultSeverity="WARNING" displayName="Suspicious underscore in number literal" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports decimal number literals that use the underscore numeric separator with groups where the number of digits is not three.
Such literals may contain a typo.
&lt;p&gt;This inspection will not warn on literals containing two consecutive underscores.
It is also allowed to omit underscores in the fractional part of &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; literals.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;int oneMillion = 1_000_0000;&lt;/code&gt;&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NumericOverflow" defaultSeverity="WARNING" displayName="Numeric overflow" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions that overflow during computation.
Usually, this happens by accident and indicates a bug. For example, a wrong type is used or a shift should be done in an opposite direction .
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  float a = 1.0f/0.0f;
  long b = 30 * 24 * 60 * 60 * 1000;
  long c = 1000L &amp;lt;&amp;lt; 62;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ImplicitNumericConversion" defaultSeverity="WARNING" displayName="Implicit numeric conversion" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implicit conversion between numeric types.
&lt;p&gt;Implicit numeric conversion is not a problem in itself but, if unexpected, may cause difficulties when tracing bugs.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  double m(int i) {
    return i * 10;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  double m(int i) {
    return (double) (i * 10);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore widening conversions&lt;/b&gt; option to ignore implicit conversion that cannot result in data loss
    (for example, &lt;code&gt;int&lt;/code&gt;-&amp;gt;&lt;code&gt;long&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore conversions from and to 'char'&lt;/b&gt; option to ignore conversion from and to &lt;code&gt;char&lt;/code&gt;. The inspection will
    still report conversion from and to floating-point numbers.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore conversion from constants and literals&lt;/b&gt; to make the inspection ignore conversion from literals and
    compile-time constants.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComparisonOfShortAndChar" defaultSeverity="WARNING" displayName="Comparison of 'short' and 'char' values" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports equality comparisons between &lt;code&gt;short&lt;/code&gt; and &lt;code&gt;char&lt;/code&gt; values.
&lt;p&gt;Such comparisons may cause subtle bugs because while both values are 2-byte long, &lt;code&gt;short&lt;/code&gt; values are
  signed, and &lt;code&gt;char&lt;/code&gt; values are unsigned.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
if (Character.MAX_VALUE == shortValue()) {} //never can be true
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FloatingPointEquality" defaultSeverity="WARNING" displayName="Floating-point equality comparison" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports floating-point values that are being compared using the &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; operator.
&lt;p&gt;Floating-point values are inherently inaccurate, and comparing them for exact equality is seldom the desired semantics.&lt;/p&gt;
&lt;p&gt;This inspection ignores comparisons with zero and infinity literals.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  void m(double d1, double d2) {
    if (d1 == d2) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InsertLiteralUnderscores" defaultSeverity="INFORMATION" displayName="Unreadable numeric literal" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports long numeric literals without underscores and suggests adding them. Underscores make such literals easier to read.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  1000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  1_000_000
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project of module is 7 or higher.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ConfusingFloatingPointLiteral" defaultSeverity="WARNING" displayName="Confusing floating-point literal" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any floating point numbers that don't have a decimal point, numbers before the decimal point,
or numbers after the decimal point.
&lt;p&gt;Such literals may be confusing, and violate several coding standards.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double d = .03;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double d = 0.03;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore floating point literals in scientific notation&lt;/b&gt; option to ignore floating point numbers in scientific notation.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BigDecimalEquals" defaultSeverity="WARNING" displayName="'equals()' called on 'BigDecimal'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;equals()&lt;/code&gt; calls that compare two &lt;code&gt;java.math.BigDecimal&lt;/code&gt; numbers.
This is normally a mistake, as two &lt;code&gt;java.math.BigDecimal&lt;/code&gt; numbers are only equal if
they are equal in both value and scale.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (new BigDecimal("2.0").equals(
    new BigDecimal("2.00"))) {} // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (new BigDecimal("2.0").compareTo(
    new BigDecimal("2.00")) == 0) {} // true
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OctalAndDecimalIntegersMixed" defaultSeverity="WARNING" displayName="Octal and decimal integers in same array" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports mixed octal and decimal integer literals in a single array initializer.
This situation might happen when you copy a list of numbers into an array initializer.
Some numbers in the array might be zero-padded and the compiler will interpret them as octal.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[] elapsed = {1, 13, 052};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix that removes a leading zero is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[] elapsed = {1, 13, 52};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it is an octal number (for example, after a variable inline), then you can use another quick-fix that converts octal to decimal:&lt;/p&gt;
&lt;code&gt;int[] elapsed = {1, 13, 42};&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnpredictableBigDecimalConstructorCall" defaultSeverity="WARNING" displayName="Unpredictable 'BigDecimal' constructor call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;BigDecimal&lt;/code&gt; constructors that accept a &lt;code&gt;double&lt;/code&gt; value.
These constructors produce &lt;code&gt;BigDecimal&lt;/code&gt; that is exactly equal to the supplied &lt;code&gt;double&lt;/code&gt; value.
However, because doubles are encoded in the IEEE 754 64-bit double-precision binary floating-point format, the exact value can be unexpected.
&lt;p&gt;For example, &lt;code&gt;new BigDecimal(0.1)&lt;/code&gt; yields a &lt;code&gt;BigDecimal&lt;/code&gt; object. Its value is
  &lt;small&gt;&lt;code&gt;0.1000000000000000055511151231257827021181583404541015625&lt;/code&gt;&lt;/small&gt;
  which is the nearest number to 0.1 representable as a double.
  To get &lt;code&gt;BigDecimal&lt;/code&gt; that stores the same value as written in the source code,
  use either &lt;code&gt;new BigDecimal("0.1")&lt;/code&gt; or &lt;code&gt;BigDecimal.valueOf(0.1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Constructor {
    void foo() {
      new BigDecimal(0.1);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Constructor {
    void foo() {
      new BigDecimal("0.1");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 16" path="Java/Java language level migration aids"><inspection shortName="PatternVariableCanBeUsed" defaultSeverity="WARNING" displayName="Pattern variable can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variable declarations that can be replaced with pattern variables, which are usually more compact.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (obj instanceof String) {
    String str = (String) obj;
    System.out.println(str);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can be replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (obj instanceof String str) {
    System.out.println(str);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Patterns in &amp;#39;instanceof&amp;#39;&amp;#39;, which is available since Java 16.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassCanBeRecord" defaultSeverity="WEAK WARNING" displayName="Class can be record class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that can be converted record classes.
&lt;p&gt;Record classes focus on modeling immutable data rather than extensible behavior.
Automatic implicit implementation of data-driven methods, such as &lt;code&gt;equals()&lt;/code&gt; and accessors, helps to reduce boilerplate code.&lt;/p&gt;
&lt;p&gt;
  Note that not every class can be a record class. Here are some of the restrictions:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The class must have no subclasses.&lt;/li&gt;
  &lt;li&gt;All non-static fields in the class must be final.&lt;/li&gt;
  &lt;li&gt;Initializers, generic constructors, and native methods must not be present.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full description of record classes, refer to the
  &lt;a href="https://docs.oracle.com/javase/specs/jls/se21/html/jls-8.html#jls-8.10"&gt;Java Language Specification&lt;/a&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Point {
    private final double x;
    private final double y;

    Point(double x, double y) {
      this.x = x;
      this.y = y;
    }

    double getX() {
      return x;
    }

    double getY() {
      return y;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  record Point(int x, int y) {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable the &lt;b&gt;Suggest renaming accessor methods&lt;/b&gt; option to rename &lt;code&gt;getX()&lt;/code&gt;/&lt;code&gt;isX()&lt;/code&gt; accessors to &lt;code&gt;x()&lt;/code&gt; automatically.&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;If members become more accessible&lt;/b&gt; option to specify what to do when conversion will make members more accessible:
&lt;ul&gt;
  &lt;li&gt;Choose &lt;b&gt;Do not suggest conversion&lt;/b&gt; option to not convert when members would become more accessible.&lt;/li&gt;
  &lt;li&gt;Choose &lt;b&gt;Show conflicts view&lt;/b&gt; option to show the affected members and ask to continue. In batch mode conversion will not be suggested.&lt;/li&gt;
  &lt;li&gt;Choose &lt;b&gt;Convert silently&lt;/b&gt; option to increase accessibility silently when needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use the &lt;b&gt;Suppress conversion if class is annotated by&lt;/b&gt; list to exclude classes from conversion when annotated by annotations matching the specified patterns.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Records&amp;#39;, which is available since Java 16.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="Groovy"><inspection shortName="GroovyLabeledStatement" defaultSeverity="WARNING" displayName="Labeled statement inspection" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports labels already used in parent workflow.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def list = ["foo"]
cycle:
for (element in list) {
  cycle: // confusing label repeat
  element.chars().forEach {
  }
}
&lt;/code&gt;
&lt;/pre&gt;


&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyAccessibility" defaultSeverity="WARNING" displayName="Inaccessible element" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports references which exceed access rights.
&lt;p&gt;Access to private members breaks encapsulation.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrPermitsClause" defaultSeverity="ERROR" displayName="Non-extending permitted subclasses" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports permitted classes that do not extend the sealed base class.
&lt;p&gt;Groovy does not require that all permitted classes should be available in compile-time and compiled along with base class. Compiler will not warn the user on dealing with non-extending permitted subclass, but it contradicts the nature of sealed classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A permits B {} // reports B
  class B {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyResultOfObjectAllocationIgnored" defaultSeverity="WARNING" displayName="Result of object allocation ignored" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports object allocation where the result of this operation is ignored.
&lt;p&gt;
  Such allocation expressions are legal Groovy, but are usually either inadvertent, or
  evidence of a complicated object initialization strategy.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyConstructorNamedArguments" defaultSeverity="WARNING" displayName="Named arguments of constructor call" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports named arguments of a default class constructor call which don't correspond to properties of this class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Person {
      def name
      def age
  }

  // 'firstName' property doesn't exist
  new Person(firstName: "John")
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyInfiniteLoopStatement" defaultSeverity="WARNING" displayName="Infinite loop statement" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; statements which
can only exit by throwing an exception. While such statements may be correct, they usually
happen by mistake.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
while(true) {
  Thread.sleep(1000)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyDocCheck" defaultSeverity="ERROR" displayName="Unresolved GroovyDoc reference" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references inside GroovyDoc comments.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyNonShortCircuitBoolean" defaultSeverity="WARNING" displayName="Non short-circuit boolean" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the non-short-circuit forms of boolean operators 'and' and 'or' ( &lt;code&gt;&amp;&lt;/code&gt;
and &lt;code&gt;|&lt;/code&gt; ).
&lt;p&gt;
  The non-short-circuit versions are occasionally useful, but
  their presence is often due to typos of the short-circuit forms ( &lt;code&gt;&amp;&amp;&lt;/code&gt;
  and &lt;code&gt;||&lt;/code&gt; ), and may lead to subtle bugs.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
if (a &amp; b) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
if (a &amp;&amp; b) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyRangeTypeCheck" defaultSeverity="WARNING" displayName="Incorrect range arguments" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports types used in ranges that do not have a &lt;code&gt;next()&lt;/code&gt; or &lt;code&gt;previous()&lt;/code&gt; method
or do not implement the &lt;code&gt;java.lang.Comparable&lt;/code&gt; interface.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyInArgumentCheck" defaultSeverity="WARNING" displayName="Incompatible 'in' argument types" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of membership operator &lt;code&gt;in&lt;/code&gt; with items and containers of incompatible types.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def list = [1, 2]
if ("foo" in list) {} // list of Integers can't contain String
&lt;/code&gt;
&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyDivideByZero" defaultSeverity="WARNING" displayName="Division by zero" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports divisions by zero or remainders by zero.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def a = 42
  a / 0 // warning
  a % 0.0 // warning
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrUnresolvedAccess" defaultSeverity="WEAK WARNING" displayName="Unresolved reference expression" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports reference expressions which cannot be resolved.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrEqualsBetweenInconvertibleTypes" defaultSeverity="WARNING" displayName="'equals()' between objects of inconvertible types" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;equals()&lt;/code&gt; where the target and argument are of incompatible types.
&lt;p&gt;While such a call might theoretically be useful, most likely it represents a bug.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    new HashSet&amp;lt;String&amp;gt;() == new TreeSet&amp;lt;Integer&amp;gt;())
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyInfiniteRecursion" defaultSeverity="WARNING" displayName="Infinite recursion" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods which must either recurse infinitely or throw an exception.
Methods reported by this inspection could not be finished correct.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
// this function always dive deeper
def fibonacci(int n) {
  return fibonacci(n-1) + fibonacci(n-2)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SecondUnsafeCall" defaultSeverity="WARNING" displayName="Second unsafe call" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports possible &lt;b&gt;NullPointerException&lt;/b&gt; during chain methods or properties call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  domain?.getZone().getName()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  domain?.getZone()?.getName()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyUntypedAccess" defaultSeverity="WARNING" displayName="Untyped reference expression" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports reference expressions whose type can't be determined.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrSwitchExhaustivenessCheck" defaultSeverity="WEAK WARNING" displayName="Exhaustiveness check for switch expressions" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports switch expressions that do not cover all possible outcomes of the matched expression.
&lt;p&gt;Groovy does not require that switch expression must be exhaustive. It acts as if an implicit &lt;code&gt;default -&gt; null&lt;/code&gt; branch is inserted.
  It may cause unexpected nulls if a developer forgets to insert necessary &lt;code&gt;case&lt;/code&gt; branches.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum A { X, Y }

  def foo(A a) {
    def x = switch (a) { // reports switch
      case A.X -&gt; ...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Logging" path="Java"><inspection shortName="NonStaticFinalLogger" defaultSeverity="WARNING" displayName="Non-constant logger" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports logger fields that are not declared &lt;code&gt;static&lt;/code&gt; and/or &lt;code&gt;final&lt;/code&gt;.
Ensuring that every class logger is effectively constant and bound to that class
simplifies the task of providing a unified logging implementation for an application.
&lt;p&gt;A quick-fix is provided to change the logger modifiers to &lt;code&gt;static final&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Significant {
    &lt;b&gt;private&lt;/b&gt; Logger LOG = Logger.getLogger(Critical.class);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Significant {
    &lt;b&gt;private static final&lt;/b&gt; Logger LOG = Logger.getLogger(Critical.class);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Logger class name&lt;/b&gt; table to specify logger class names. The inspection will report the fields that are not &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt; and are of the type equal to one of the specified class names.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoggerInitializedWithForeignClass" defaultSeverity="WEAK WARNING" displayName="Logger initialized with foreign class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Logger&lt;/code&gt; instances that are initialized with a &lt;code&gt;class&lt;/code&gt; literal from a different class than the &lt;code&gt;Logger&lt;/code&gt;
is contained in. This can easily happen when copy-pasting some code from another class and
may result in logging events under an unexpected category and cause filters to be applied incorrectly.
&lt;p&gt;A quick-fix is provided to replace the foreign class literal with one from the surrounding class.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Paramount {
    &lt;b&gt;protected static final&lt;/b&gt; Logger LOG = Logger.getLogger(Critical.class);

    // ... other fields and methods
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Paramount {
    &lt;b&gt;protected static final&lt;/b&gt; Logger LOG = Logger.getLogger(Paramount.class);

    // ... other fields and methods
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the table to specify the logger factory classes and logger factory methods recognized by this inspection.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore loggers initialized with a superclass&lt;/b&gt; option to ignore loggers that are initialized with a superclass of
  the class containing the logger.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore loggers in non-public classes&lt;/b&gt; to only warn on loggers in &lt;code&gt;public&lt;/code&gt; classes.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore loggers not initialized in a final field&lt;/b&gt; to only report loggers initialized in a final field, other cases will be ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringConcatenationArgumentToLogCall" defaultSeverity="WEAK WARNING" displayName="Non-constant string concatenation as argument to logging call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-constant string concatenations that are used as arguments to &lt;b&gt;SLF4J&lt;/b&gt; and &lt;b&gt;Log4j 2&lt;/b&gt; logging methods.
Non-constant concatenations are evaluated at runtime even when the logging message is not logged; this can negatively impact performance.
It is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Vital {
    &lt;b&gt;private static final&lt;/b&gt; Logger LOG = LoggerFactory.getLogger(Vital.class);

    &lt;b&gt;public void&lt;/b&gt; saveTheWorld(&lt;b&gt;int&lt;/b&gt; i, String s, &lt;b&gt;boolean&lt;/b&gt; b) {
      LOG.info("saveTheWorld(" + i + ", " + s + ", "  + b + ")");
      // todo
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Vital {
    &lt;b&gt;private static final&lt;/b&gt; Logger LOG = LoggerFactory.getLogger(Vital.class);

    &lt;b&gt;public void&lt;/b&gt; saveTheWorld(&lt;b&gt;int&lt;/b&gt; i, String s, &lt;b&gt;boolean&lt;/b&gt; b) {
      LOG.info("saveTheWorld({}, {}, {})", i, s, b);
      // todo
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Warn on&lt;/b&gt; list to ignore certain higher logging levels. Higher logging levels may be enabled even in production, and the arguments will always be evaluated.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassWithMultipleLoggers" defaultSeverity="WARNING" displayName="Class with multiple loggers" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that have multiple loggers declared.
Ensuring that every class has a single dedicated logger is an important step in providing a unified logging
implementation for an application.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Critical {
    &lt;b&gt;protected static final&lt;/b&gt; Logger LOG = Logger.getLogger(Critical.class);

    &lt;b&gt;protected static final&lt;/b&gt; Logger myLogger = Logger.getLogger(getClass());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify Logger class names.
Classes which declare multiple fields that have the type of one of the specified classes will be reported by this inspection.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicMethodWithoutLogging" defaultSeverity="WARNING" displayName="'public' method without logging" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any public methods that do not contain a logging statement. This inspection does not report
simple getters and setters.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Crucial {
    &lt;b&gt;private static final &lt;/b&gt;Logger LOG = LoggerFactory.getLogger(Crucial.class);
    &lt;b&gt;public void&lt;/b&gt; doImportantStuff() {
      // warning on this method
    }

    &lt;b&gt;public void&lt;/b&gt; doOtherStuff() {
      LOG.info("do other stuff");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the table below to specify Logger class names.
Public methods that do not use instance methods of the specified classes will be reported by this inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassWithoutLogger" defaultSeverity="WARNING" displayName="Class without logger" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes which do not have a declared logger.
&lt;p&gt;Ensuring that every class has a dedicated logger is an important step in providing a unified logging
  implementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; NoLoggerDeclared {

    &lt;b&gt;int&lt;/b&gt; calculateNthDigitOfPi(&lt;b&gt;int&lt;/b&gt; n) {
      // todo
      &lt;b&gt;return&lt;/b&gt; 1;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the table in the &lt;b&gt;Options&lt;/b&gt; section to specify logger class names.
Classes which do not declare a field with the type of one of the specified classes will be reported by this inspection.

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JavaBeans issues" path="Java"><inspection shortName="SuspiciousGetterSetter" defaultSeverity="WARNING" displayName="Suspicious getter/setter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports getter or setter methods that access a field that is not expected by its name.
For example, when &lt;code&gt;getY()&lt;/code&gt; returns the &lt;code&gt;x&lt;/code&gt; field. Usually, it might be a copy-paste error.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Point {
    private int x;
    private int y;

    public void setX(int x) { // Warning: setter 'setX()' assigns field 'y'
      this.y = x;
    }

    public int getY() { // Warning: getter 'getY()' returns field 'x'
      return x;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to report situations when a field in the class has a name that matches a name of a getter or a setter.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassWithoutNoArgConstructor" defaultSeverity="WARNING" displayName="Class without no-arg constructor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes without a constructor that takes no arguments (i.e. has no parameters).
No-arg constructors are necessary in some contexts. For example, if a class needs to be created using reflection.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Bean {
    private String name;

    public Bean(String name) {
      this.name = name;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to ignore classes without explicit constructors.
  The compiler provides a default no-arg constructor to such classes.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassWithoutConstructor" defaultSeverity="WARNING" displayName="Class without constructor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes without constructors.
&lt;p&gt;Some coding standards prohibit such classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldHasSetterButNoGetter" defaultSeverity="WARNING" displayName="Field has setter but no getter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields that have setter methods but no getter methods.
&lt;p&gt;
  In certain bean containers, when used within the Java beans specification, such fields might be difficult
  to work with.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PropertyValueSetToItself" defaultSeverity="WARNING" displayName="Property value set to itself" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls of setter methods with the same object getter as a value.
Usually, this code does nothing and probably was not intended.
&lt;p&gt;&lt;b&gt;For example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bean.setPayerId(bean.getPayerId());&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Potentially confusing code constructs" path="Groovy"><inspection shortName="GroovyResultOfIncrementOrDecrementUsed" defaultSeverity="WARNING" displayName="Result of increment or decrement used" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports increment or decrement expressions nested inside other expressions.
&lt;p&gt;
  Such expressions may be confusing, and violate the general design principle that a
  given construct should do precisely one thing.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyPointlessArithmetic" defaultSeverity="WARNING" displayName="Pointless arithmetic expression" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports pointless arithmetic expressions.
&lt;p&gt;
  Such expressions include adding or subtracting zero, multiplying by zero or one,
  division by one, and shift by zero. Such expressions may be the result of automated refactorings
  not completely followed through to completion, and in any case are unlikely to be what the developer
  intended to do.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a + 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyGStringKey" defaultSeverity="WARNING" displayName="GString map key" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports statements which use a &lt;code&gt;groovy.lang.GString&lt;/code&gt; object as a key to map.
In general &lt;code&gt;GString&lt;/code&gt; objects are mutable and probably should not be used as keys.
Also, a &lt;code&gt;GString&lt;/code&gt; entry cannot be accessed with a &lt;code&gt;java.lang.String&lt;/code&gt; object with same value.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def map = [:]
def key = 'foo'
map &amp;lt&amp;lt ["${key}": 'bar']
assert map[key] == null // confusing 'true' result of comparison
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GroovyDoubleNegation" defaultSeverity="WARNING" displayName="Double negation" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports double negation that can be simplified.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
if (!!functionCall()) {} // double negation
if (!(a != b)) {} // double negation
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
if (functionCall()) {}
if (a == b) {}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GroovyOctalInteger" defaultSeverity="WARNING" displayName="Octal integer" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports octal integer literals.
&lt;p&gt;
  Some coding standards prohibit the
  use of octal literals, as they may be easily confused with decimal literals.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyNestedSwitch" defaultSeverity="WARNING" displayName="Nested switch statement" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements that are nested inside other &lt;code&gt;switch&lt;/code&gt; statements.
Such nested switch statements are confusing, and may result in unexpected behaviour.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
switch (outer) {
  case 1:
    switch (inner) {
      case 1:
        print "inner 1"
        break
      default:
        print "inner default"
    }
    break
  default:
    print "default"
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GroovyEmptyStatementBody" defaultSeverity="WARNING" displayName="Statement with empty body" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; statements
with empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
if (condition) {}
while(true){}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrDeprecatedAPIUsage" defaultSeverity="WARNING" displayName="Deprecated API usage" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports references to deprecated classes, fields, and methods.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyPointlessBoolean" defaultSeverity="WARNING" displayName="Pointless boolean expression" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports pointless or pointlessly complicated boolean expressions.
&lt;p&gt;
  Such expressions include conjunction with true,
  disjunction with false,
  equality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be
  the result of automated refactorings
  not completely followed through to completion, and in any case are unlikely to be what the developer
  intended to do.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (someBool &amp;&amp; true) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (someBool) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyNegatedConditional" defaultSeverity="WARNING" displayName="Negated conditional expression" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditional expressions whose conditions are negated.
Flipping the order of the conditional expression branches will usually increase the clarity of such
statements.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
~condition ? "1" : "2"
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="NewInstanceOfSingleton" defaultSeverity="WARNING" displayName="New instance of class annotated with @groovy.lang.Singleton" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports new instance creation of classes annotated with &lt;code&gt;@groovy.lang.Singleton&lt;/code&gt;.
  Such constructions can lead to runtime exception &lt;b&gt;Can't instantiate singleton&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Singleton
  class Foo{
  }
  
  Foo foo = &lt;b&gt;new Foo()&lt;/b&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Singleton
  class Foo{
  }
  
  Foo foo = &lt;b&gt;Foo.instance&lt;/b&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyOverlyComplexArithmeticExpression" defaultSeverity="WARNING" displayName="Overly complex arithmetic expression" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arithmetic expressions with too many terms.
&lt;p&gt;
  Such expressions may be confusing and bug-prone.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the &lt;b&gt;Maximum number of terms&lt;/b&gt; field to specify the maximum number of terms allowed in an arithmetic expression.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrPackage" defaultSeverity="WARNING" displayName="Package mismatch" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files with a declared package that does not match the package expected. Also, reports files without &lt;code&gt;package&lt;/code&gt; statements if the class is not located directly in
the source root directory.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyNegatedIf" defaultSeverity="WARNING" displayName="Negated if condition expression" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements
which contain &lt;code&gt;else&lt;/code&gt; branches and whose conditions are negated.
Flipping the order of the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;
branches will usually increase the clarity of such statements.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
if (!condition) {
  return "1"
} else {
  return "2"
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyImplicitNullArgumentCall" defaultSeverity="WEAK WARNING" displayName="Implicit null argument" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls with no arguments to method that has exactly one parameter.
This is equivalent to call with &lt;code&gt;null&lt;/code&gt;, and that behavior is often confusing and unintended.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def foo(String s){}
foo() // this call is actually 'foo(null)' call
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnnecessaryQualifiedReference" defaultSeverity="WARNING" displayName="Unnecessary qualified reference" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports fully qualified references, which can be replaced with import.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def swingBuilder = new groovy.swing.SwingBuilder()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import groovy.swing.SwingBuilder
 
  def swingBuilder = new SwingBuilder()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ClashingTraitMethods" defaultSeverity="WARNING" displayName="Clashing trait methods" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes which implement two or more traits that contain methods with same signatures.
&lt;p&gt;The result of calling such methods might be unexpected.&lt;/p&gt;
&lt;p&gt;The quick-fix adds an explicit overriding method.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait T1 {
      def foo() {}
  }

  trait T2 {
      def foo() {}
  }

  class X implements T1, T2 {}

  // T2.foo() will be called
  new X().foo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X implements T1, T2 {
      @Override
      Object foo() {
          return T2.super.foo()
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ClashingGetters" defaultSeverity="WARNING" displayName="Clashing getters" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports boolean methods which can be accessed via the same property name.
&lt;p&gt;The result of accessing such property might be unexpected.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class X {
      boolean isFoo() { true }
      boolean getFoo() { false }
  }

  // getFoo() will be called
  new X().foo
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrReassignedInClosureLocalVar" defaultSeverity="WARNING" displayName="Local variable is reassigned in closure or anonymous class" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables assigned to expression with different type inside of closure or anonymous class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int sum = 0
  [1, 2, 3].each { sum += 'as' }
  println(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, the &lt;code&gt;integer&lt;/code&gt; variable &lt;b&gt;sum&lt;/b&gt; is reassigned to a &lt;code&gt;String&lt;/code&gt; expression.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyNestedConditional" defaultSeverity="WARNING" displayName="Nested conditional expression" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ternary conditional expressions that are nested inside other conditional expressions.
Such nested conditionals may be very confusing. "Elvis" expressions are counted as conditionals
for purpose of this inspection.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
return (condition ? "result" : null) ?: "fail"
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GroovyOverlyComplexBooleanExpression" defaultSeverity="WARNING" displayName="Overly complex boolean expression" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports boolean expressions with too many terms.
&lt;p&gt;
  Such expressions may be confusing and bug-prone.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the &lt;b&gt;Maximum number of terms&lt;/b&gt; field to specify the maximum number of terms allowed in a boolean expression.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Dockerfile" path=""><inspection shortName="DockerFileRunCommandMissingContinuation" defaultSeverity="ERROR" displayName="Missing continuation character for ''RUN'' command" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing continuation characters in &lt;code&gt;RUN&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;
  In the &lt;i&gt;shell&lt;/i&gt; form of &lt;code&gt;RUN&lt;/code&gt; command you should use a '\' (backslash)
  to continue a single &lt;code&gt;RUN&lt;/code&gt; instruction onto the next line.
  Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # the command below will fail
  RUN /bin/bash -c 'source $HOME/.bashrc;
      echo $HOME'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  RUN /bin/bash -c 'source $HOME/.bashrc; \
      echo $HOME'
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileAddOrCopyPaths" defaultSeverity="WARNING" displayName="Invalid destination for ''ADD''/''COPY'' commands" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid destination directories in &lt;code&gt;ADD&lt;/code&gt; and &lt;code&gt;COPY&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/engine/reference/builder/#add"&gt;Dockerfile specification&lt;/a&gt;,
  if multiple sources are specified, then the destination must be a directory, and it must end with a slash '/'.
  Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  ADD textA.txt textB.txt relativeDir
  ADD ["binaryA.jar", "binary2.jar", "destination"]
  COPY text3.txt text4.txt /absolute/path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ADD textA.txt textB.txt relativeDir/
  ADD ["binaryA.jar", "binary2.jar", "destination/"]
  COPY text3.txt text4.txt /absolute/path/
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileAssignments" defaultSeverity="ERROR" displayName="Invalid spaces in ''key=value'' pair" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports incorrect spacing for key-value pairs in &lt;code&gt;ARG&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt;, and &lt;code&gt;LABEL&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;
  While it is not explicitly specified in the &lt;a href="https://docs.docker.com/engine/reference/builder/#arg"&gt;Dockerfile specification&lt;/a&gt;,
  some combinations of spacing for key-value pairs are not allowed.
  Docker build will fail after reaching the problem instruction.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;ARG&lt;/code&gt; command does not allow any spaces around '='&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ENV&lt;/code&gt; and &lt;code&gt;LABEL&lt;/code&gt; do not allow spaces after '='&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  ARG answer = 42
  ARG version= "1.0.0"
  LABEL "maintained.by"= someone@gmail.com
  ENV JAVA_HOME= "/docker-java-home"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ARG answer=2
  ARG version="1.0.0"
  LABEL "maintained.by"=someone@gmail.com
  ENV JAVA_HOME="/docker-java-home"
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileEntrypointWithoutExec" defaultSeverity="WARNING" displayName="Missing 'exec' in entrypoint shell form" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing &lt;code&gt;exec&lt;/code&gt; in the shell form of ENTRYPOINT command.&lt;/p&gt;
&lt;p&gt;
  To ensure that &lt;code&gt;docker stop&lt;/code&gt; will signal any long running ENTRYPOINT executable correctly,
  it needs to be started with &lt;code&gt;exec&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://docs.docker.com/reference/dockerfile/#shell-form-entrypoint-example"&gt;Dockerfile reference&lt;/a&gt; for more information.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerJsonFormStringLiterals" defaultSeverity="WARNING" displayName="A single quoted string in JSON array format" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports a single quoted string in JSON array format.
&lt;/p&gt;
&lt;p&gt;
  JSON array form, must use double-quotes (") around words not single-quotes ('). Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  RUN ['/bin/bash', '-c', 'echo hello']
  ADD ['binaryA.jar', 'binary2.jar', 'destination/']
  COPY ['binaryA.jar', 'binary2.jar', 'destination/']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  RUN ["/bin/bash", "-c", "echo hello"]
  ADD ["binaryA.jar", "binary2.jar", "destination/"]
  COPY ["binaryA.jar", "binary2.jar", "destination/"]
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileArgumentCount" defaultSeverity="ERROR" displayName="Wrong number of arguments" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid number of arguments for the Dockerfile commands.&lt;/p&gt;
&lt;p&gt;
  Docker build will fail after reaching the instruction with an invalid number of arguments.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileDuplicatedStageName" defaultSeverity="ERROR" displayName="Duplicated stage name" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="251.27812.52" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports duplicated stage names in &lt;code&gt;FROM ... AS stage-name&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # the commands below will fail
  FROM ubuntu:latest AS stage1
  FROM ubuntu:latest AS stage1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Test frameworks" path="Java"><inspection shortName="SimplifiableAssertion" defaultSeverity="WARNING" displayName="Simplifiable assertion" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;code&gt;assert&lt;/code&gt; calls that can be replaced with simpler and equivalent calls.
&lt;table&gt;
  &lt;tr&gt;&lt;th&gt;Example&lt;/th&gt;&lt;th&gt;&amp;rarr;&lt;/th&gt;&lt;th&gt;Replacement&lt;/th&gt;&lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertEquals(&lt;b&gt;true&lt;/b&gt;, x());&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(x());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(y() != null);&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertNotNull(y());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(z == z());&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertSame(z, z());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(a.equals(a()));&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;assertEquals(a, a());&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;assertTrue(&lt;b&gt;false&lt;/b&gt;);&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;fail();&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantAssertArgument" defaultSeverity="WARNING" displayName="Constant assert argument" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constant arguments in &lt;code&gt;assertTrue()&lt;/code&gt;, &lt;code&gt;assertFalse()&lt;/code&gt;,
&lt;code&gt;assertNull()&lt;/code&gt;, and &lt;code&gt;assertNotNull()&lt;/code&gt; calls.
&lt;p&gt;
  Calls to these methods with
  constant arguments will either always succeed or always fail.
  Such statements can easily be left over after refactoring and are probably not intended.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  assertNotNull("foo");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MaskedAssertion" defaultSeverity="WARNING" displayName="Assertion is suppressed by 'catch'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;assert&lt;/code&gt; statements and test framework assertions that are suppressed by a surrounding catch block.
Such assertions will never fail, as the thrown &lt;code&gt;AssertionError&lt;/code&gt; will be caught and silently ignored.
&lt;p&gt;&lt;b&gt;Example 1:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void javaAssertion() {
    try {
      ...
      assert 1 == 2;
    } catch (AssertionError e) {
      // the assertion is silently ignored
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example 2:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Test
  void testWithAssertJ() {
    try {
      ...
      assertThat(1).as("test").isEqualTo(2);
    } catch (AssertionError e) {
      // the assertion is silently ignored
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example 3:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Test
  void testWithJunit() {
    try {
      ...
      assertEquals(1, 2);
    } catch (AssertionError e) {
      // the assertion is silently ignored
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MisorderedAssertEqualsArguments" defaultSeverity="WARNING" displayName="Misordered 'assertEquals()' arguments" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;assertEquals()&lt;/code&gt; that have the expected argument and the actual argument in the wrong order.
&lt;p&gt;
  For JUnit 3, 4, and 5 the correct order is &lt;code&gt;(expected, actual)&lt;/code&gt;.
  For TestNG the correct order is &lt;code&gt;(actual, expected)&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Such calls will behave fine for assertions that pass, but may give confusing error reports on failure.
  Use the quick-fix to flip the order of the arguments.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example (JUnit):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  assertEquals(actual, expected)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  assertEquals(expected, actual)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssertWithoutMessage" defaultSeverity="WARNING" displayName="Message missing on assertion" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;assertXXX()&lt;/code&gt; or &lt;code&gt;fail()&lt;/code&gt; without an error message string argument.
An error message on assertion failure may help clarify the test case's intent.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  assertTrue(checkValid());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assertTrue(checkValid(), "|");&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  The message argument is added before or after the existing arguments according to the assertions framework that you use.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Style issues" path="Kotlin"><inspection shortName="ReplaceSizeZeroCheckWithIsEmpty" defaultSeverity="WEAK WARNING" displayName="Size zero check can be replaced with 'isEmpty()'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;size == 0&lt;/code&gt; checks on &lt;code&gt;Collections/Array/String&lt;/code&gt; that should be replaced with &lt;code&gt;isEmpty()&lt;/code&gt;.
&lt;p&gt;Using &lt;code&gt;isEmpty()&lt;/code&gt; makes your code simpler.&lt;/p&gt;
&lt;p&gt;The quick-fix replaces the size check with &lt;code&gt;isEmpty()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() {
      val arrayOf = arrayOf(1, 2, 3)
      arrayOf.size == 0
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() {
      val arrayOf = arrayOf(1, 2, 3)
      arrayOf.isEmpty()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProtectedInFinal" defaultSeverity="WEAK WARNING" displayName="'protected' visibility is effectively 'private' in a final class" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;protected&lt;/code&gt; visibility used inside of a &lt;code&gt;final&lt;/code&gt; class.
In such cases &lt;code&gt;protected&lt;/code&gt; members are accessible only in the class itself, so they are effectively &lt;code&gt;private&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class FinalClass {
      &lt;b&gt;protected&lt;/b&gt; fun foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class FinalClass {
      &lt;b&gt;private&lt;/b&gt; fun foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AddOperatorModifier" defaultSeverity="INFORMATION" displayName="Function should have 'operator' modifier" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function that matches one of the operator conventions but lacks the &lt;code&gt;operator&lt;/code&gt; keyword.
&lt;p&gt;By adding the &lt;code&gt;operator&lt;/code&gt; modifier, you might allow function consumers to write idiomatic Kotlin code.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Complex(val real: Double, val imaginary: Double) {
      fun plus(other: Complex) =
          Complex(real + other.real, imaginary + other.imaginary)
  }

  fun usage(a: Complex, b: Complex) {
      a.plus(b)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix adds the &lt;code&gt;operator&lt;/code&gt; modifier keyword:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Complex(val real: Double, val imaginary: Double) {
      operator fun plus(other: Complex) =
          Complex(real + other.real, imaginary + other.imaginary)
  }

  fun usage(a: Complex, b: Complex) {
      a + b
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CascadeIf" defaultSeverity="WEAK WARNING" displayName="Cascade 'if' can be replaced with 'when'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements with three or more branches that can be replaced with the &lt;code&gt;when&lt;/code&gt; expression with a subject.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun translateNumber(n: Int): String {
    return if (n == 1) {
      "one"
    } else if (n == 2) {
      "two"
    } else {
      "???"
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix converts the &lt;code&gt;if&lt;/code&gt; expression to &lt;code&gt;when&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun translateNumber(n: Int): String {
    return when (n) {
      1 -&gt; {
        "one"
      }
      2 -&gt; {
        "two"
      }
      else -&gt; {
        "???"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JoinDeclarationAndAssignment" defaultSeverity="WEAK WARNING" displayName="If-Then foldable to '?.'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports property declarations that can be joined with the following assignment.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x: String
  x = System.getProperty("")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix joins the declaration with the assignment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x = System.getProperty("")
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;You can disable the option &lt;b&gt;Report with complex initialization of member properties&lt;/b&gt; to skip properties with complex initialization. This covers two cases:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;The property initializer is complex (it is a multiline or a compound/control-flow expression)&lt;/li&gt;
    &lt;li&gt;The property is first initialized and then immediately used in subsequent code (for example, to call additional initialization methods)&lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="NullableBooleanElvis" defaultSeverity="INFORMATION" displayName="Equality check can be used instead of elvis for nullable boolean check" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when an equality check should be used instead of the elvis operator.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun check(a: Boolean? == null) {
    if (a ?: false) throw IllegalStateException()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun check(a: Boolean? == null) {
    if (a == true) throw IllegalStateException()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnclearPrecedenceOfBinaryExpression" defaultSeverity="WARNING" displayName="Multiple operators with different precedence" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports binary expressions that consist of different operators without parentheses.
&lt;p&gt;Such expressions can be less readable due to different &lt;a href="https://kotlinlang.org/docs/reference/grammar.html#expressions"&gt;precedence rules&lt;/a&gt; of operators.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;
  fun foo(b: Boolean?, i: Int?) {
      val x = b ?: i == null // evaluated as `(b ?: i) == null`
      val y = i ?: 0 + 1 // evaluated as `i ?: (0 + 1)`
  }
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfThenToElvis" defaultSeverity="WEAK WARNING" displayName="If-Then foldable to '?:'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if-then&lt;/code&gt; expressions that can be folded into elvis (&lt;code&gt;?:&lt;/code&gt;) expressions.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun maybeFoo(): String? = "foo"

  var foo = maybeFoo()
  val bar = if (foo == null) "hello" else foo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix converts the &lt;code&gt;if-then&lt;/code&gt; expression into an elvis (&lt;code&gt;?:&lt;/code&gt;) expression:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun maybeFoo(): String? = "foo"

  var foo = maybeFoo()
  val bar = foo ?: "hello"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ImplicitThis" defaultSeverity="INFORMATION" displayName="Implicit 'this'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of implicit &lt;b&gt;this&lt;/b&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
      fun s() = ""

      fun test() {
          s()
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix specifies &lt;b&gt;this&lt;/b&gt; explicitly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
      fun s() = ""

      fun test() {
          this.s()
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="NestedLambdaShadowedImplicitParameter" defaultSeverity="WEAK WARNING" displayName="Nested lambda has shadowed implicit parameter" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested lambdas with shadowed implicit parameters.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo(listOfLists: List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;) {
  listOfLists.forEach {
    it.forEach {
      println(it)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo(listOfLists: List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;) {
  listOfLists.forEach {
    it.forEach { it1 -&amp;gt;
      println(it1)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ObjectLiteralToLambda" defaultSeverity="WEAK WARNING" displayName="Object literal can be converted to lambda" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous object literals implementing a Java interface with a single abstract method that can be converted into a call with a lambda expression.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class SomeService {
  val threadPool = Executors.newCachedThreadPool()
    
  fun foo() {
    threadPool.submit(object : Runnable {
      override fun run() {
        println("hello")
      }
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() {
    threadPool.submit { println("hello") }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SortModifiers" defaultSeverity="WEAK WARNING" displayName="Non-canonical modifier order" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports modifiers that do not follow the order recommended by the &lt;a href="https://kotlinlang.org/docs/coding-conventions.html#modifiers-order"&gt;style guide&lt;/a&gt;.
&lt;p&gt;&lt;b&gt;Sort modifiers&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  private inline fun correctOrder(f: () -&gt; Unit) {} // &amp;lt;== Ok

  infix private fun Int.wrongOrder(expr: Int) {} // &amp;lt;== wrong order, quick-fix amends the modifiers to "private infix"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SimplifyNegatedBinaryExpression" defaultSeverity="WEAK WARNING" displayName="Negated boolean expression can be simplified" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports negated boolean expressions that can be simplified.
&lt;p&gt;The quick-fix simplifies the boolean expression.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    fun test(n: Int) {
        !(0 == 1)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    fun test(n: Int) {
        0 != 1
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please note that this action may change code semantics if IEEE-754 NaN values are involved:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    fun main() {
        println(!(Double.NaN &amp;gt;= 0)) // true
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    fun main() {
        println(Double.NaN &amp;lt; 0) // false
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceGetOrSet" defaultSeverity="WEAK WARNING" displayName="Explicit 'get' or 'set' call" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports explicit calls to &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; functions which can be replaced by an indexing operator &lt;code&gt;[]&lt;/code&gt;.
&lt;p&gt;
    Kotlin allows custom implementations for the predefined set of operators on types.
    To overload an operator, you can mark the corresponding function with the &lt;code&gt;operator&lt;/code&gt; modifier:
    &lt;pre&gt;&lt;code&gt;
  operator fun get(index: Int) {}
  operator fun set(index: Int, value: Int) {}
    &lt;/code&gt;&lt;/pre&gt;

The functions above correspond to the indexing operator.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class Test {
      operator fun get(i: Int): Int = 0
  }

  fun test() {
      Test().get(0) // replaceable 'get()'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class Test {
      operator fun get(i: Int): Int = 0
  }

  fun test() {
      Test()[0]
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplaceSizeCheckWithIsNotEmpty" defaultSeverity="WEAK WARNING" displayName="Size check can be replaced with 'isNotEmpty()'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports size checks of &lt;code&gt;Collections/Array/String&lt;/code&gt; that should be replaced with &lt;code&gt;isNotEmpty()&lt;/code&gt;.
&lt;p&gt;Using &lt;code&gt;isNotEmpty()&lt;/code&gt; makes your code simpler.&lt;/p&gt;
&lt;p&gt;The quick-fix replaces the size check with &lt;code&gt;isNotEmpty()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() {
      val arrayOf = arrayOf(1, 2, 3)
      arrayOf.size &amp;gt; 0
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() {
      val arrayOf = arrayOf(1, 2, 3)
      arrayOf.isNotEmpty()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceIsEmptyWithIfEmpty" defaultSeverity="WEAK WARNING" displayName="'if' condition can be replaced with lambda call" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;isEmpty&lt;/code&gt;, &lt;code&gt;isBlank&lt;/code&gt;, &lt;code&gt;isNotEmpty&lt;/code&gt;, or &lt;code&gt;isNotBlank&lt;/code&gt; calls in an &lt;code&gt;if&lt;/code&gt; statement to assign a default value.
&lt;p&gt;The quick-fix replaces the &lt;code&gt;if&lt;/code&gt; condition with &lt;code&gt;ifEmpty&lt;/code&gt; or &lt;code&gt;ifBlank&lt;/code&gt; calls.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(list: List&amp;lt;Int&amp;gt;): List&amp;lt;Int&amp;gt; {
      return if (list.isEmpty()) {
          println()
          foo()
      } else {
          list
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(list: List&amp;lt;Int&amp;gt;): List&amp;lt;Int&amp;gt; {
      return list.ifEmpty {
          println()
          foo()
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the Kotlin language version of the project or module is 1.3 or higher.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrailingComma" defaultSeverity="WEAK WARNING" displayName="Trailing comma recommendations" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports trailing commas that do not follow the recommended &lt;a href="https://kotlinlang.org/docs/coding-conventions.html#trailing-commas"&gt;style guide&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MoveLambdaOutsideParentheses" defaultSeverity="WEAK WARNING" displayName="Lambda argument inside parentheses" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions in parentheses which can be moved outside.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun square(a: Int, b: (Int) -&amp;gt; Int) {
  b(a * a)
}

fun foo() {
  square(2, { it })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo() {
  square(2){ it }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifyBooleanWithConstants" defaultSeverity="WEAK WARNING" displayName="Boolean expression can be simplified" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports boolean expression parts that can be reduced to constants.
&lt;p&gt;The quick-fix simplifies the condition.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun use(arg: Boolean) {
      if (false == arg) {

      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun use(arg: Boolean) {
      if (!arg) {

      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FilterIsInstanceCallWithClassLiteralArgument" defaultSeverity="WEAK WARNING" displayName="'filterIsInstance' call with a class literal argument" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports calls of the Kotlin standard library function &lt;code&gt;filterIsInstance&lt;/code&gt; with a class literal argument. It is more idiomatic to use a version of this function with a reified type parameter, to avoid the &lt;code&gt;::class.java&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;Note: inspection is not reported for generic class literals because the &lt;code&gt;Class&lt;*, *&gt;&lt;/code&gt; syntax in the type argument list may be undesirable.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(list: List&amp;lt;*&gt;) {
      list.filterIsInstance(Int::class.java)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(list: List&amp;lt;*&gt;) {
      list.filterIsInstance&amp;lt;Int&gt;()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantRunCatching" defaultSeverity="WEAK WARNING" displayName="Redundant 'runCatching' call" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;runCatching&lt;/code&gt; calls that are immediately followed by &lt;code&gt;getOrThrow&lt;/code&gt;.
Such calls can be replaced with just &lt;code&gt;run&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() = runCatching { doSomething() }.getOrThrow()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() = run { doSomething() }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CanBeVal" defaultSeverity="WARNING" displayName="Local 'var' is never modified and can be declared as 'val'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables declared with the &lt;code&gt;var&lt;/code&gt; keyword that are never modified.
&lt;p&gt;Kotlin encourages to declare practically immutable variables using the &lt;code&gt;val&lt;/code&gt; keyword, ensuring that their value will never change.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      var primeNumbers = listOf(1, 2, 3, 5, 7, 11, 13)
      var fibonacciNumbers = listOf(1, 1, 2, 3, 5, 8, 13)
      print("Same numbers: " + primeNumbers.intersect(fibonacciNumbers))
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix replaces the &lt;code&gt;var&lt;/code&gt; keyword with &lt;code&gt;val&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      val primeNumbers = listOf(1, 2, 3, 5, 7, 11, 13)
      val fibonacciNumbers = listOf(1, 1, 2, 3, 5, 8, 13)
      print("Same numbers: " + primeNumbers.intersect(fibonacciNumbers))
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MemberVisibilityCanBePrivate" defaultSeverity="WEAK WARNING" displayName="Class member can have 'private' visibility" enabled="false" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations that can be made &lt;code&gt;private&lt;/code&gt; to follow the encapsulation principle.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Service(val url: String) {
    fun connect(): URLConnection = URL(url).openConnection()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied (considering there are no usages of &lt;code&gt;url&lt;/code&gt; outside of &lt;code&gt;Service&lt;/code&gt; class):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Service(private val url: String) {
    fun connect(): URLConnection = URL(url).openConnection()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MayBeConstant" defaultSeverity="WEAK WARNING" displayName="'protected' visibility is effectively 'private' in a final class" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports top-level &lt;code&gt;val&lt;/code&gt; properties in objects that might be declared as &lt;code&gt;const&lt;/code&gt;
for better performance and Java interoperability.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  object A {
      val foo = 1
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  object A {
      const val foo = 1
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplaceJavaStaticMethodWithKotlinAnalog" defaultSeverity="WEAK WARNING" displayName="Java methods should be replaced with Kotlin analog" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a Java method call that can be replaced with a Kotlin function, for example, &lt;code&gt;System.out.println()&lt;/code&gt;.
&lt;p&gt;Replacing the code gets rid of the dependency to Java and makes the idiomatic Kotlin code.&lt;/p&gt;
&lt;p&gt;The quick-fix replaces the Java method calls on the same Kotlin call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util.Arrays

  fun main() {
      val a = Arrays.asList(1, 3, null)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun main() {
      val a = listOf(1, 3, null)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantElseInIf" defaultSeverity="INFORMATION" displayName="Redundant 'else'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant &lt;code&gt;else&lt;/code&gt; in &lt;code&gt;if&lt;/code&gt; with &lt;code&gt;return&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(arg: Boolean): Int {
      if (arg) return 0
      else { // This else is redundant, code in braces could be just shifted left
          someCode()
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(arg: Boolean): Int {
      if (arg) return 0
      someCode()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="LiftReturnOrAssignment" defaultSeverity="WEAK WARNING" displayName="Return or assignment can be lifted out" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, and &lt;code&gt;try&lt;/code&gt; statements that can be converted to expressions
by lifting the &lt;code&gt;return&lt;/code&gt; statement or an assignment out.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(arg: Int): String {
      when (arg) {
          0 -&gt; return "Zero"
          1 -&gt; return "One"
          else -&gt; return "Multiple"
      }
  }
&lt;/code&gt;&lt;/pre&gt;
After the quick-fix is applied:
&lt;pre&gt;&lt;code&gt;
  fun foo(arg: Int): String {
      return when (arg) {
          0 -&gt; "Zero"
          1 -&gt; "One"
          else -&gt; "Multiple"
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you would like this inspection to highlight more complex code with multi-statement branches, uncheck the option "Report only if each branch is a single statement".&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SafeCastWithReturn" defaultSeverity="WEAK WARNING" displayName="Safe cast with 'return' should be replaced with 'if' type check" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports safe cast with &lt;code&gt;return&lt;/code&gt; that can be replaced with &lt;code&gt;if&lt;/code&gt; type check.
&lt;p&gt;Using corresponding functions makes your code simpler.&lt;/p&gt;
&lt;p&gt;The quick-fix replaces the safe cast with &lt;code&gt;if&lt;/code&gt; type check.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(x: Any) {
      x as? String ?: return
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(x: Any) {
      if (x !is String) return
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifiableCallChain" defaultSeverity="WARNING" displayName="Call chain on collection type can be simplified" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports two-call chains replaceable by a single call.
&lt;p&gt;It can help you to avoid redundant code execution.&lt;/p&gt;
&lt;p&gt;The quick-fix replaces the call chain with a single call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun main() {
      listOf(1, 2, 3).filter { it &amp;gt; 1 }.count()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun main() {
      listOf(1, 2, 3).count { it &amp;gt; 1 }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IntroduceWhenSubject" defaultSeverity="WEAK WARNING" displayName="'when' that can be simplified by introducing an argument" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;when&lt;/code&gt; expression that can be simplified by introducing a subject argument.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(obj: Any): String {
      return when {
          obj is String -&gt; "string"
          obj is Int -&gt; "int"
          else -&gt; "unknown"
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix introduces a subject argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(obj: Any): String {
      return when (obj) {
          is String -&gt; "string"
          is Int -&gt; "int"
          else -&gt; "unknown"
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="FoldInitializerAndIfToElvis" defaultSeverity="INFORMATION" displayName="If-Null return/break/... foldable to '?:'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; expression that checks variable being null or not right after initializing it that can be converted into an elvis operator in the initializer.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(foo: Int?, bar: Int): Int {
      var i = foo
      if (i == null) {
          return bar
      }
      return i
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix converts the &lt;code&gt;if&lt;/code&gt; expression with an initializer into an elvis expression:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(foo: Int?, bar: Int): Int {
      var i = foo ?: return bar
      return i
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplaceCollectionCountWithSize" defaultSeverity="WEAK WARNING" displayName="Collection count can be converted to size" enabled="false" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Collection&amp;lt;T&amp;gt;.count()&lt;/code&gt;.
&lt;p&gt;
    This function call can be replaced with &lt;code&gt;.size&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
    &lt;code&gt;.size&lt;/code&gt; form ensures that the operation is O(1) and won't allocate extra objects, whereas
    &lt;code&gt;count()&lt;/code&gt; could be confused with &lt;code&gt;Iterable&amp;lt;T&amp;gt;.count()&lt;/code&gt;, which is O(n) and allocating.
    &lt;br&gt;
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun foo() {
      var list = listOf(1,2,3)
      list.count() // replaceable 'count()'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun foo() {
      var list = listOf(1,2,3)
      list.size
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UseExpressionBody" defaultSeverity="INFORMATION" displayName="Expression body syntax is preferable here" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;return&lt;/code&gt; expressions (one-liners or &lt;code&gt;when&lt;/code&gt;) that can be replaced with expression body syntax.
&lt;p&gt;Expression body syntax is recommended by the &lt;a href="https://kotlinlang.org/docs/coding-conventions.html#functions"&gt;style guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Convert to expression body&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun sign(x: Int): Int {
      return when { // &amp;lt;== can be simplified
          x &amp;lt; 0 -&gt; -1
          x &gt; 0 -&gt; 1
          else -&gt; 0
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun sign(x: Int): Int = when {
      x &amp;lt; 0 -&gt; -1
      x &gt; 0 -&gt; 1
      else -&gt; 0
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ConvertSecondaryConstructorToPrimary" defaultSeverity="INFORMATION" displayName="Convert to primary constructor" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a secondary constructor that can be replaced with a more concise primary constructor.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class User {
      val name: String

      constructor(name: String) {
          this.name = name
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix converts code automatically:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class User(val name: String) {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="BooleanLiteralArgument" defaultSeverity="WEAK WARNING" displayName="Boolean literal argument without parameter name" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports call arguments with &lt;code&gt;Boolean&lt;/code&gt; type without explicit parameter names specified.
&lt;p&gt;
    When multiple boolean literals are passed sequentially, it's easy to forget parameter ordering that could lead to mistakes.
    Explicit parameter names allow for easier code reading and understanding.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun check(checkName: Boolean, checkAddress: Boolean, checkPhone: Boolean) {}

  fun usage() {
      check(true, false, true) // What does this mean?
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix adds missing parameter names:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun check(checkName: Boolean, checkAddress: Boolean, checkPhone: Boolean) {}

  fun usage() {
      check(checkName = true, checkAddress = false, checkPhone = true)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplaceCallWithBinaryOperator" defaultSeverity="WEAK WARNING" displayName="Can be replaced with binary operator" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports function calls that can be replaced with binary operators, in particular comparison-related ones.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun test(): Boolean {
      return 2.compareTo(1) &gt; 0 // replaceable 'compareTo()'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun test(): Boolean {
      return 2 &gt; 1
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UsePropertyAccessSyntax" defaultSeverity="WEAK WARNING" displayName="Accessor call that can be replaced with property access syntax" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Java &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; method calls that can be replaced with the Kotlin synthetic properties.
&lt;p&gt;&lt;b&gt;Use property access syntax&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Java:
  public class JavaClassWithGetter {
      private final String expr = "result";

      // ...

      public String getExpr() {
          return expr;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
  // Kotlin:
  fun test(j: JavaClassWithGetter) {
      // ...
      j.getExpr() // &amp;lt;== The quick-fix simplifies the expression to 'j.expr'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ConvertToStringTemplate" defaultSeverity="WEAK WARNING" displayName="String concatenation that can be converted to string template" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string concatenation that can be converted to a string template.
&lt;p&gt;Using string templates is recommended as it makes code easier to read.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      val capitals = mapOf("France" to "Paris", "Spain" to "Madrid")
      for ((country, capital) in capitals) {
          print(capital + " is a capital of " + country)
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      val capitals = mapOf("France" to "Paris", "Spain" to "Madrid")
      for ((country, capital) in capitals) {
          print("$capital is a capital of $country")
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplaceArrayOfWithLiteral" defaultSeverity="WEAK WARNING" displayName="'arrayOf' call can be replaced with array literal [...]" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;arrayOf&lt;/code&gt; calls that can be replaced with array literals &lt;code&gt;[...]&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  annotation class MyAnnotation(val strings: Array&amp;lt;String&amp;gt;)

  @MyAnnotation(arrayOf("alpha", "beta", "omega")) // replaceable 'arrayOf()'
  class MyClass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  annotation class MyAnnotation(val strings: Array&amp;lt;String&amp;gt;)

  @MyAnnotation(["alpha", "beta", "omega"])
  class MyClass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplaceAssociateFunction" defaultSeverity="WEAK WARNING" displayName="'associate' can be replaced with 'associateBy' or 'associateWith'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;associate()&lt;/code&gt; and &lt;code&gt;associateTo()&lt;/code&gt; that can be replaced with &lt;code&gt;associateBy()&lt;/code&gt; or &lt;code&gt;associateWith()&lt;/code&gt;.
&lt;p&gt;
    Both functions accept a transformer function applied to elements of a given sequence or collection (as a receiver).
    The pairs are then used to build the resulting &lt;code&gt;Map&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
    Given the transformer refers to &lt;code&gt;it&lt;/code&gt;, the &lt;code&gt;associate[To]()&lt;/code&gt; call can be replaced with more performant &lt;code&gt;associateBy()&lt;/code&gt;
    or &lt;code&gt;associateWith()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun getKey(i: Int) = 1L
  fun getValue(i: Int) = 1L

  fun test() {
      arrayOf(1).associate { getKey(it) to it }  // replaceable 'associate()'
      listOf(1).associate { it to getValue(it) } // replaceable 'associate()'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun getKey(i: Int) = 1L
  fun getValue(i: Int) = 1L

  fun test() {
      arrayOf(1).associateBy { getKey(it) }
      listOf(1).associateWith { getValue(it) }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Other" path="Scala/Collections"><inspection shortName="UnzipSingleElement" defaultSeverity="WARNING" displayName="Unzip for extracting a single element" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;unzip&lt;/code&gt; used to extract a single element.&lt;/p&gt;

&lt;p&gt;The quick-fix replaces it with &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Seq((1, 11), (2, 22)).unzip._1
Seq((1, 11, 111), (2, 22, 222)).unzip3._1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Seq((1, 11), (2, 22)).map(_._1)
Seq((1, 11, 111), (2, 22, 222)).map(_._1)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SortFilter" defaultSeverity="WARNING" displayName="Filter after sort" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; could be swapped for better performance.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.sortWith(lessThan).filter(p)
  seq.sortBy(f).filter(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.filter(p).sortWith(lessThan)
  seq.filter(p).sortBy(f)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Validity issues" path="Groovy"><inspection shortName="GroovyDuplicateSwitchBranch" defaultSeverity="WARNING" displayName="Duplicate switch case" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated expressions in &lt;code&gt;case&lt;/code&gt; labels for &lt;code&gt;switch&lt;/code&gt;
statements.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
switch (n) {
  case 1: //duplicate
    break
  case 1: //duplicate
    System.out.println("2")
    break
  default:
    System.out.println("default");
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GroovyUnreachableStatement" defaultSeverity="WARNING" displayName="Unreachable statement" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports statements that are unreachable. This can occur if the statement is after an infinite loop,
  &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, or &lt;code&gt;continue&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; foo (int n) {
      if (n &lt; 1) {
          return
          &lt;b&gt;print('This statement is unreachable')&lt;/b&gt;
      }
      while (true){
          print ('Hello, world!')
      }
      &lt;b&gt;print('This statement is unreachable too')&lt;/b&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Accessibility" path="HTML"><inspection shortName="HtmlRequiredTitleElement" defaultSeverity="WARNING" displayName="Missing required 'title' element" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;title&lt;/code&gt; element inside a &lt;code&gt;head&lt;/code&gt; section. Suggests adding a &lt;code&gt;title&lt;/code&gt; element. The title should describe the document. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H25.html"&gt;H25&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredLangAttribute" defaultSeverity="WARNING" displayName="Missing required 'lang' attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;lang&lt;/code&gt; (or &lt;code&gt;xml:lang&lt;/code&gt;) attribute in a &lt;code&gt;html&lt;/code&gt; tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H57.html"&gt;H57&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredTitleAttribute" defaultSeverity="INFORMATION" displayName="Missing required 'title' attribute" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing title attribute &lt;code&gt;frame&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;dl&lt;/code&gt;, and &lt;code&gt;a&lt;/code&gt; tags. Suggests adding a title attribute. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H33.html"&gt;H33&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H40.html"&gt;H40&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H64.html"&gt;H64&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredAltAttribute" defaultSeverity="WARNING" displayName="Missing required 'alt' attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;alt&lt;/code&gt; attribute in a &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;applet&lt;/code&gt; tag or in a &lt;code&gt;area&lt;/code&gt; element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H24.html"&gt;H24&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H35.html"&gt;H35&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H36.html"&gt;H36&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H37.html"&gt;H37&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlFormInputWithoutLabel" defaultSeverity="WARNING" displayName="Missing associated label" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a form element (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, or &lt;code&gt;select&lt;/code&gt;) without an associated label. Suggests creating a new label. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H44.html"&gt;H44&lt;/a&gt;.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredSummaryAttribute" defaultSeverity="INFORMATION" displayName="Missing required 'summary' attribute" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;summary&lt;/code&gt; attribute in a &lt;code&gt;table&lt;/code&gt; tag. Suggests adding a&lt;code&gt;summary&lt;/code&gt; attribute. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H73.html"&gt;H73&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="HTML" path=""><inspection shortName="HtmlNonExistentInternetResource" defaultSeverity="WARNING" displayName="Unresolved web link" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved web link. Works by making network requests in the background.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAttribute" defaultSeverity="WARNING" displayName="Unknown attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RequiredAttributes" defaultSeverity="WARNING" displayName="Missing required attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlMissingClosingTag" defaultSeverity="INFORMATION" displayName="Missing closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML element without a closing tag.
Some coding styles require that HTML elements have closing tags even where this is optional.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!&amp;lt;/p&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckValidXmlInScriptTagBody" defaultSeverity="ERROR" displayName="Malformed content of 'script' tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports contents of &lt;code&gt;script&lt;/code&gt; tags that are invalid XML.&lt;br&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlWrongAttributeValue" defaultSeverity="WARNING" displayName="Wrong attribute value" enabled="true" language="HtmlCompatible" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect HTML attribute value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlExtraClosingTag" defaultSeverity="WARNING" displayName="Redundant closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant closing tags on empty elements, for example, &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;br&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;&amp;lt;/br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckImageSize" defaultSeverity="WARNING" displayName="Mismatched image size" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attribute value of a &lt;code&gt;img&lt;/code&gt; tag
that is different from the actual width and height of the referenced image.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTarget" defaultSeverity="WARNING" displayName="Unresolved file in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file in a link.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownBooleanAttribute" defaultSeverity="WARNING" displayName="Incorrect boolean attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlDeprecatedAttribute" defaultSeverity="WARNING" displayName="Obsolete attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an obsolete HTML5 attribute.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTag" defaultSeverity="WARNING" displayName="Unknown tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML tag. Suggests configuring tags that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlPresentationalElement" defaultSeverity="INFORMATION" displayName="Presentational tag" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlDeprecatedTag" defaultSeverity="WARNING" displayName="Obsolete tag" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckEmptyScriptTag" defaultSeverity="WARNING" displayName="Empty tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty tags that do not work in some browsers.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script/&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script&gt;&amp;lt;/script&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAnchorTarget" defaultSeverity="WARNING" displayName="Unresolved fragment in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved last part of an URL after the &lt;code&gt;#&lt;/code&gt; sign.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style" path="Scala"><inspection shortName="scala2InSource3" defaultSeverity="WARNING" displayName="Scala 2 syntax with -Xsource:3" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports Scala 2 syntax that can be replaced with Scala 3 when using &lt;code&gt;-Xsource:3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Under the compiler flag &lt;code&gt;-Xsource:3&lt;/code&gt; the following Scala 3 constructs
  are already supported in &lt;code&gt;Scala 2.13.6&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;?&lt;/code&gt; instead of &lt;code&gt;_&lt;/code&gt; as wildcard marker in wildcard types&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;case&lt;/code&gt; in pattern bindings of &lt;code&gt;for&lt;/code&gt;-comprehensions&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;*&lt;/code&gt; instead of &lt;code&gt;_&lt;/code&gt; in imports&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;as&lt;/code&gt; soft-keyword instead of &lt;code&gt;=&amp;gt;&lt;/code&gt; in import aliases&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;open&lt;/code&gt; and &lt;code&gt;infix&lt;/code&gt; modifiers are allowed&lt;/li&gt;
  &lt;li&gt;New Scala 3 vararg splices syntax&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;&lt;/code&gt; instead of &lt;code&gt;with&lt;/code&gt; in compound types&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaStyle" defaultSeverity="WARNING" displayName="Scala style inspection" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports problems found by Scalastyle.&lt;/p&gt;

&lt;p&gt;Scalastyle examines your Scala code and indicates potential problems with it.&lt;/p&gt;

&lt;p&gt;Place the config file in &lt;code&gt;&amp;lt;project-root&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;project-root&amp;gt;/.idea&lt;/code&gt;, or &lt;code&gt;&amp;lt;project-root&amp;gt;/project&lt;/code&gt;.
&lt;p&gt;The name of the config file can be &lt;code&gt;scalastyle-config.xml&lt;/code&gt; or &lt;code&gt;scalastyle_config.xml&lt;/code&gt;.
    Config files for test sources can be overridden by &lt;code&gt;scalastyle-test-config.xml&lt;/code&gt; or &lt;code&gt;scalastyle_test_config.xml&lt;/code&gt;. &lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;The full documentation is available on the &lt;a href="http://www.scalastyle.org/"&gt;Scalastyle&lt;/a&gt; website.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Method metrics" path="Java"><inspection shortName="MultipleReturnPointsPerMethod" defaultSeverity="WARNING" displayName="Method with multiple return points" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose number of &lt;code&gt;return&lt;/code&gt; points exceeds the specified maximum.
Methods with too many &lt;code&gt;return&lt;/code&gt; points may be confusing
and hard to refactor.
&lt;p&gt;A &lt;code&gt;return&lt;/code&gt; point is either a &lt;code&gt;return&lt;/code&gt; statement or a falling through the bottom of a
  &lt;code&gt;void&lt;/code&gt; method or constructor.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The method below is reported if only two &lt;code&gt;return&lt;/code&gt; statements are allowed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void doSmth(User[] users) {
    for (User user : users) {
      if (cond1(user)) {
        user.setId(getId());
        return;
      } else if (cond2(user)) {
        if (cond3(user)) {
          user.setId(getId());
          return;
        }
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consider rewriting the method so it becomes easier to understand:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void doSmth(User[] users) {
    for (User user : users) {
      if (cond1(user) || cond2(user) &amp;&amp; cond3(user)) {
        user.setId(getId());
        return;
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Return point limit&lt;/b&gt; field to specify the maximum allowed number of &lt;code&gt;return&lt;/code&gt; points for a method.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore guard clauses&lt;/b&gt; option to ignore guard clauses.
    A guard clause is an &lt;code&gt;if&lt;/code&gt; statement that contains only a &lt;code&gt;return&lt;/code&gt; statement&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore for 'equals()' methods&lt;/b&gt; option to ignore &lt;code&gt;return&lt;/code&gt; points inside &lt;code&gt;equals()&lt;/code&gt; methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrownExceptionsPerMethod" defaultSeverity="WARNING" displayName="Method with too many exceptions declared" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that have too many types of exceptions in its &lt;code&gt;throws&lt;/code&gt; list.
&lt;p&gt;Methods with too many exceptions declared are a good sign that your error handling code is getting overly complex.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Exceptions thrown limit&lt;/b&gt; field to specify the maximum number of exception types a method is allowed to have in its &lt;code&gt;throws&lt;/code&gt; list.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParametersPerConstructor" defaultSeverity="WARNING" displayName="Constructor with too many parameters" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constructors whose number of parameters exceeds the specified maximum.
Such objects are hard to instantiate, especially if some parameters are optional.
Constructors with too many parameters may indicate that refactoring is necessary.
Consider applying the builder pattern, for example.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public BankAccount(long accountNumber,
                     String owner,
                     double balance,
                     double interestRate) {
    // fields initialization
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Parameter limit&lt;/b&gt; field to specify the maximum allowed number of parameters in a constructor.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore constructors with visibility&lt;/b&gt; list to specify whether the inspection should ignore constructors with specific visibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestingDepth" defaultSeverity="WARNING" displayName="Overly nested method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose body contain too deeply nested statements.
&lt;p&gt;Methods with too deep statement
  nesting may be confusing and are a good sign that refactoring may be necessary.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Nesting depth limit&lt;/b&gt; field to specify the maximum allowed nesting depth for a method.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreeNegationsPerMethod" defaultSeverity="WARNING" displayName="Method with more than three negations" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods with three or more negations.
Such methods may be confusing.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void doSmth(int a, int b, boolean flag1, boolean flag2) {
    if (!flag &amp;&amp; !flag2) {
      if (a != b) {
        doOther();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without negations, the method becomes easier to understand:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void doSmth(int a, int b, boolean flag1, boolean flag2) {
    if (flag1 || flag2 || a == b) return;
    doOther();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore negations in 'equals()' methods&lt;/b&gt; option to disable the inspection within &lt;code&gt;equals()&lt;/code&gt; methods.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore negations in 'assert' statements&lt;/b&gt; to disable the inspection within &lt;code&gt;assert&lt;/code&gt; statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonCommentSourceStatements" defaultSeverity="WARNING" displayName="Overly long method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose number of statements exceeds the specified maximum.
&lt;p&gt;Methods with too many statements may be confusing and are a good sign that refactoring is necessary.&lt;/p&gt;
&lt;p&gt;The following statements are not counted:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;empty statements (semicolons)&lt;/li&gt;
  &lt;li&gt;block statements&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;for&lt;/code&gt; loop initialization statements, that is, &lt;code&gt;int i = ...&lt;/code&gt; within a &lt;code&gt;for(int i = ...;...)&lt;/code&gt;
    statement&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;for&lt;/code&gt; loop update statements, that is, &lt;code&gt;i += 2&lt;/code&gt; within a &lt;code&gt;for(int i = ...;...; i += 2)&lt;/code&gt;
    statement&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Maximum statements per method&lt;/b&gt; field to specify the maximum allowed number of statements in a method.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CyclomaticComplexity" defaultSeverity="WARNING" displayName="Overly complex method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that have too many branch points.
&lt;p&gt;A branch point is one of the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;loop statement&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;if&lt;/code&gt; statement&lt;/li&gt;
  &lt;li&gt;ternary expression&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;catch&lt;/code&gt; section&lt;/li&gt;
  &lt;li&gt;expression with one or more &lt;code&gt;&amp;&amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; operators inside&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;switch&lt;/code&gt; block with non-default branches&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Methods with too high cyclomatic complexity may be confusing and hard to test.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Method complexity limit&lt;/b&gt; field to specify the maximum allowed cyclomatic complexity for a method.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyLongLambda" defaultSeverity="WARNING" displayName="Overly long lambda expression" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda expressions whose number of statements exceeds the specified maximum.
&lt;p&gt;Lambda expressions that are too long may be confusing, and it is often better to extract the statements into a separate method.&lt;p&gt;
&lt;p&gt;The following statements are not counted:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;empty statements (semicolons)&lt;/li&gt;
  &lt;li&gt;block statements&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;for&lt;/code&gt; loop initialization statements, that is, &lt;code&gt;int i = ...&lt;/code&gt; within a &lt;code&gt;for(int i = ...;...)&lt;/code&gt;
    statement&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;for&lt;/code&gt; loop update statements, that is, &lt;code&gt;i += 2&lt;/code&gt; within a &lt;code&gt;for(int i = ...;...; i += 2)&lt;/code&gt;
    statement&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the  &lt;b&gt;Non-comment source statements limit&lt;/b&gt; field to specify the maximum allowed number of statements in a lambda expression.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodCoupling" defaultSeverity="WARNING" displayName="Overly coupled method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that reference too many other classes.
Methods with too high coupling can be very fragile and should be probably split into smaller methods.
&lt;p&gt;Each referenced class is counted only once no matter how many times it is referenced.&lt;/p&gt;
  &lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Method coupling limit&lt;/b&gt; field to specify the maximum allowed coupling for a method.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Include couplings to java system classes&lt;/b&gt; option to count references to classes from &lt;code&gt;java&lt;/code&gt;or &lt;code&gt;javax&lt;/code&gt; packages.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Include couplings to library classes&lt;/b&gt; option to count references to third-party library classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParametersPerMethod" defaultSeverity="WARNING" displayName="Method with too many parameters" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose number of parameters exceeds the specified maximum.
Methods with too many parameters can be a good sign that a refactoring is necessary.
&lt;p&gt;Methods that have super methods are not reported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Parameter limit&lt;/b&gt; field to specify the maximum allowed number of parameters for a method.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodWithMultipleLoops" defaultSeverity="WARNING" displayName="Method with multiple loops" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that contain more than one loop statement.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The method below will be reported because it contains two loops:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void methodWithTwoLoops(int n1, int n2) {
    for (int i = 0; i &amp;lt; n1; i++) {
      System.out.println(i);
    }

    int j = 0;
    while (j &amp;lt; n2) {
      System.out.println(j);
      j++;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following method will also be reported because it contains a nested loop:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void methodWithNestedLoop(int n1, int n2) {
    for (int i = 0; i &amp;lt; n1; i++) {
      for (int j = 0; j &amp;lt; n2; j++) {
        System.out.println(i + j);
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="sbt" path=""><inspection shortName="SbtDependencyVersionInspection" defaultSeverity="WEAK WARNING" displayName="Newer stable version for library dependency is available" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports using of old library dependency version and suggests replacing it a newer stable version.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.7"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.8"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SbtReplaceProjectWithProjectIn" defaultSeverity="WARNING" displayName="Replace Project() with project.in()" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports using of &lt;code&gt;Project&lt;/code&gt; and suggests replacing it with &lt;code&gt;project.in&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val proj = Project("proj", path)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val proj = project.in(path)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Memory" path="Java"><inspection shortName="UnnecessaryEmptyArrayUsage" defaultSeverity="WARNING" displayName="Unnecessary zero length array usage" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports allocations of arrays with known lengths of zero when there is a constant for that in the class of the array's element type.
As zero-length arrays are immutable, you can save memory reusing the same array instance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Item {
    // Public zero-length array constant that can be reused 
    public static final Item[] EMPTY_ARRAY = new Item[0];
  }
  class EmptyNode {
    Item[] getChildren() {
      // Unnecessary zero-length array creation
      return new Item[0];
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class EmptyNode {
    Item[] getChildren() {
      return Item.EMPTY_ARRAY;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AnonymousInnerClassMayBeStatic" defaultSeverity="WARNING" displayName="Anonymous class may be a named 'static' inner class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous classes that may be safely replaced with &lt;code&gt;static&lt;/code&gt; inner classes.
An anonymous class may be a &lt;code&gt;static&lt;/code&gt; inner class if it doesn't explicitly reference its enclosing instance or local classes from its surrounding method.
&lt;p&gt;
A &lt;code&gt;static&lt;/code&gt; inner class does not keep an implicit reference to its enclosing instance.
This prevents a common cause of memory leaks and uses less memory per class instance.
&lt;/p&gt;
&lt;p&gt;
  Since Java 18, only serializable anonymous classes keep an implicit reference to their enclosing instance,
  if this reference is not used. Therefore, when the module language level is Java 18 or higher,
  this inspection reports serializable classes only.
&lt;/p&gt;
&lt;p&gt;The quick-fix extracts the anonymous class into a named &lt;code&gt;static&lt;/code&gt; inner class.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void sample() {
    Thread thread = new Thread(new Runnable() {
      @Override
      public void run() {
      }
    });
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void sample() {
    Thread thread = new Thread(new Task());
  }

  private static class Task implements Runnable {
    @Override
    public void run() {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ZeroLengthArrayInitialization" defaultSeverity="WARNING" displayName="Zero-length array allocation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports allocations of arrays with known lengths of zero.
&lt;p&gt;
  Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly
  allocate new ones. Such sharing may provide useful optimizations in the program runtime or footprint.
&lt;/p&gt;
&lt;p&gt;
  Note that the inspection does not report zero-length arrays allocated as static final fields,
  since those arrays are assumed to be used for implementing array sharing.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticCollection" defaultSeverity="WARNING" displayName="Static collection" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports static fields of a &lt;code&gt;Collection&lt;/code&gt; type. While it's
not necessarily a problem, static collections often cause memory leaks and are
therefore prohibited by some coding standards.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Example {
    static List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore weak static collections or maps&lt;/b&gt; option to ignore the fields of the &lt;code&gt;java.util.WeakHashMap&lt;/code&gt; type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SystemGC" defaultSeverity="WARNING" displayName="Call to 'System.gc()' or 'Runtime.gc()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;System.gc()&lt;/code&gt; or &lt;code&gt;Runtime.gc()&lt;/code&gt; calls.
While occasionally useful in testing, explicitly triggering garbage collection via &lt;code&gt;System.gc()&lt;/code&gt; is almost never recommended in production code and can result in serious performance issues.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReturnOfInnerClass" defaultSeverity="WARNING" displayName="Return of instance of anonymous, local or inner class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;return&lt;/code&gt; statements that return an instance of an anonymous, local, or inner class.
Such instances keep an implicit reference to the outer instance, which can prevent the outer instance from being garbage-collected.
Any caller of a method returning such an instance might cause a memory leak by holding on to the instance returned.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore returns from non-public methods&lt;/b&gt; option to ignore returns from &lt;code&gt;protected&lt;/code&gt; or package-private methods.
    Returns from &lt;code&gt;private&lt;/code&gt; methods are always ignored.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InnerClassMayBeStatic" defaultSeverity="WARNING" displayName="Inner class may be 'static'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inner classes that can be made &lt;code&gt;static&lt;/code&gt;.
&lt;p&gt;A &lt;code&gt;static&lt;/code&gt; inner class does not keep an implicit reference to its enclosing instance.
  When using Java 17 or before,
  this prevents a common cause of memory leaks and uses less memory per instance of the class.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Outer {
    &lt;b&gt;class&lt;/b&gt; Inner { // not static
      &lt;b&gt;public void&lt;/b&gt; foo() {
        bar("x");
      }

      &lt;b&gt;private void&lt;/b&gt; bar(String string) {}
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Outer {
    &lt;b&gt;static class&lt;/b&gt; Inner {
      &lt;b&gt;public void&lt;/b&gt; foo() {
        bar("x");
      }

      &lt;b&gt;private void&lt;/b&gt; bar(String string) {}
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringBufferField" defaultSeverity="WARNING" displayName="'StringBuilder' field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields of type &lt;code&gt;java.lang.StringBuffer&lt;/code&gt; or &lt;code&gt;java.lang.StringBuilder&lt;/code&gt;.
Such fields can grow without limit and are often the cause of memory leaks.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Example {
    private StringBuilder builder = new StringBuilder();

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Method" path="Java/Naming conventions"><inspection shortName="LambdaUnfriendlyMethodOverload" defaultSeverity="WARNING" displayName="Lambda-unfriendly method overload" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports overloaded methods that take functional interfaces with conflicting abstract method signatures.
&lt;p&gt;Such overloads introduce ambiguity and require callers to cast lambdas to a specific type or specify lambda parameter types explicitly.
  It is preferable to give the overloaded methods different names to eliminate ambiguity.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  interface MyExecutor {
    void execute(Supplier&amp;lt;?&amp;gt; supplier);
    void execute(Callable&amp;lt;?&amp;gt; callable);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Here, &lt;code&gt;Supplier&lt;/code&gt; and &lt;code&gt;Callable&lt;/code&gt; are functional interfaces
whose single abstract methods do not take any parameters and return a non-void value.
As a result, the type of the lambda cannot be inferred at the call site unless an explicit cast is used.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverloadedMethodsWithSameNumberOfParameters" defaultSeverity="WARNING" displayName="Overloaded methods with same number of parameters" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that are declared in the same class, have the same name, and the same number of parameters.
Such overloads cam be very confusing because it can be unclear which overload gets called.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    public static void execute(Runnable r) {}
    public static &amp;lt;T&amp;gt; void execute(RunnableFuture&amp;lt;T&amp;gt; c) {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to ignore overloaded methods whose parameter types are definitely incompatible.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MisspelledMethodName" defaultSeverity="WARNING" displayName="Method names differing only by case" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases in which multiple methods of a class have the names that differ only by
case. Such names may be very confusing.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  public int hashcode() { // reported, should be hashCode probably?
    return 0;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such methods is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore methods overriding/implementing a super method&lt;/b&gt; option to ignore methods overriding or implementing a method from
  the superclass.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BooleanMethodNameMustStartWithQuestion" defaultSeverity="WARNING" displayName="Boolean method name must start with question word" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports boolean methods whose names do not start with a question
word.
&lt;p&gt;Boolean methods that override library methods are ignored by this inspection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boolean empty(List&amp;lt;String&amp;gt; list) {
  return list.isEmpty();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such methods is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Boolean method name prefixes&lt;/b&gt; list to specify acceptable question words to start boolean method names with.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore methods with 'java.lang.Boolean' return type&lt;/b&gt; option to ignore methods with the &lt;code&gt;java.lang.Boolean&lt;/code&gt; return type. &lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore boolean methods in an @interface&lt;/b&gt; option to ignore boolean methods in annotation types (&lt;code&gt;@interface&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore methods overriding/implementing a super method&lt;/b&gt; to ignore methods the have supers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NewMethodNamingConvention" defaultSeverity="WARNING" displayName="Method naming convention" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;Instance methods that override library
  methods and constructors are ignored by this inspection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; if the inspection is enabled for static methods, and the minimum specified method name length is 4 (the default),
  the following static method produces a warning, because the length of its name is 3, which is less
  than 4: &lt;code&gt;public static int max(int a, int b)&lt;/code&gt;.
&lt;p&gt;A quick-fix that renames such methods is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the list in the &lt;b&gt;Options&lt;/b&gt; section to specify which methods should be checked. Deselect the checkboxes for the method types for which
  you want to skip the check. Specify &lt;b&gt;0&lt;/b&gt; in the length fields to skip the corresponding checks.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodNameSameAsClassName" defaultSeverity="WARNING" displayName="Method name same as class name" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that are named identically to their class.
While such naming is allowed by the Java language, by convention it is reserved for defining constructors.
Using it for methods is probably a mistake or bad practice.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass {
    int val;

    // Method MyClass named identically to its containing class.
    // Likely, 'void' was added by mistake.
    void MyClass(int val) {
      this.val = val;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When appropriate, a quick-fix converts the method to a constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass {
    int val;

    MyClass(int val) {
      this.val = val;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another quick-fix renames the method.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverloadedVarargsMethod" defaultSeverity="WARNING" displayName="Overloaded varargs method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports varargs methods with the same name as other methods in the class or in a superclass.
Overloaded methods that take a variable number of arguments can be very confusing
because it is often unclear which overload gets called.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    public void execute(Runnable... r) {} // warning
    public void execute(Runnable r1, Runnable r2) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to ignore overloaded methods whose parameter types are definitely incompatible.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodNameSameAsParentName" defaultSeverity="WARNING" displayName="Method name same as parent class name" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that have the same name as the superclass of the method's class, as
such a method name may be confusing.
&lt;p&gt;This inspection doesn't check interfaces or superclasses deep in the hierarchy.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {}
  class Child extends Parent {
     public Parent Parent() {
       return null;
     }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such methods is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonBooleanMethodNameMayNotStartWithQuestion" defaultSeverity="WARNING" displayName="Non-boolean method name must not start with question word" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-boolean methods whose names start with a question
word. Such method names may be confusing.
&lt;p&gt;Non-boolean methods that override library methods are ignored by this inspection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;
&lt;pre&gt;&lt;code&gt;
  public void hasName(String name) {
    assert names.contains(name);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such methods is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Boolean method name prefixes&lt;/b&gt; list to specify the question words that should be used only for boolean methods.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore methods with 'java.lang.Boolean' return type&lt;/b&gt; option to ignore methods with &lt;code&gt;java.lang.Boolean&lt;/code&gt; return type.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore methods overriding/implementing a super method&lt;/b&gt; option to ignore methods which have supers. &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Portability" path="Java"><inspection shortName="HardcodedFileSeparators" defaultSeverity="WARNING" displayName="Hardcoded file separator" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the forward (&lt;code&gt;/&lt;/code&gt;) or backward (&lt;code&gt;\&lt;/code&gt;) slash in a string or
character literal. These characters are commonly used as file separators, and portability may suffer if they are hardcoded.
&lt;p&gt;
  The inspection will not report backward slashes inside escape sequences and forward slashes immediately following the '&amp;lt;' character
  or immediately preceding the '&amp;gt;' character, as those often indicate XML or HTML tags rather than file names.
  Strings representing a &lt;code&gt;java.util.TimeZone&lt;/code&gt; ID, strings that are valid regular expressions,
  or strings that equal IANA-registered MIME media types will not be reported either.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new File("C:\\Users\\Name");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to include &lt;code&gt;example/*&lt;/code&gt; in the set of recognized media types.
  Normally, usage of the &lt;code&gt;example/*&lt;/code&gt; MIME media type outside of an example (e.g. in a &lt;code&gt;Content-Type&lt;/code&gt;
  header) is an error.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SystemGetenv" defaultSeverity="WARNING" displayName="Call to 'System.getenv()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;System.getenv()&lt;/code&gt;.
Calls to &lt;code&gt;System.getenv()&lt;/code&gt; are inherently unportable.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseOfJDBCDriverClass" defaultSeverity="WARNING" displayName="Use of concrete JDBC driver class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports uses of specific JDBC driver classes. Use of such classes will
bind your project to a specific database and driver, defeating the purpose of JDBC and
resulting in loss of portability.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.sql.Driver;

  abstract class Sample implements Driver {
    public void foo() {
        Sample sample;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseOfProcessBuilder" defaultSeverity="WARNING" displayName="Use of 'java.lang.ProcessBuilder' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports uses of &lt;code&gt;java.lang.ProcessBuilder&lt;/code&gt;,
which might be unportable between operating systems because
paths to executables, environment variables, command-line arguments and
their escaping might vary depending on the OS.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HardcodedLineSeparators" defaultSeverity="WARNING" displayName="Hardcoded line separator" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports linefeed (&lt;code&gt;\n&lt;/code&gt;) and carriage return (&lt;code&gt;\r&lt;/code&gt;) character escape sequences used in string literals,
character literals or text blocks. These characters are commonly used as line separators, and portability may suffer if they are hardcoded.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String count = "first\nsecond\rthird";
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SystemExit" defaultSeverity="WARNING" displayName="Call to 'System.exit()' or related methods" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;System.exit()&lt;/code&gt;, &lt;code&gt;Runtime.exit()&lt;/code&gt;,
and &lt;code&gt;Runtime.halt()&lt;/code&gt;.
&lt;p&gt;
  Invoking &lt;code&gt;System.exit()&lt;/code&gt; or &lt;code&gt;Runtime.exit()&lt;/code&gt;
  calls the shutdown hooks and terminates the currently running Java
  virtual machine. Invoking &lt;code&gt;Runtime.halt()&lt;/code&gt; forcibly
  terminates the JVM without causing shutdown hooks to be started.
  Each of these methods should be used with extreme caution. Calls
  to these methods make the calling code unportable to most
  application servers.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to ignore calls in main methods.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseOfAWTPeerClass" defaultSeverity="WARNING" displayName="Use of AWT peer class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports uses of AWT peer classes. Such classes represent
native windowing system widgets, and will be non-portable between different windowing
systems.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.awt.peer.ButtonPeer;

  abstract class Sample implements ButtonPeer {
    public void foo() {
        Sample sample;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseOfSunClasses" defaultSeverity="WARNING" displayName="Use of 'sun.*' classes" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports uses of classes from the &lt;code&gt;sun.*&lt;/code&gt; hierarchy.
Such classes are non-portable between different JVMs.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RuntimeExec" defaultSeverity="WARNING" displayName="Call to 'Runtime.exec()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Runtime.exec()&lt;/code&gt; or any of its variants.
Calls to &lt;code&gt;Runtime.exec()&lt;/code&gt; are inherently unportable.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NativeMethods" defaultSeverity="WARNING" displayName="Native method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods declared &lt;code&gt;native&lt;/code&gt;. Native methods are inherently unportable.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path="Java"><inspection shortName="LoadLibraryWithNonConstantString" defaultSeverity="WARNING" displayName="Call to 'System.loadLibrary()' with non-constant string" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.System.loadLibrary()&lt;/code&gt;, &lt;code&gt;java.lang.System.load()&lt;/code&gt;, &lt;code&gt;java.lang.Runtime.loadLibrary()&lt;/code&gt;
and &lt;code&gt;java.lang.Runtime.load()&lt;/code&gt;
which take a dynamically-constructed string as the name of the library.
&lt;p&gt;
  Constructed library name strings are a common source of security breaches.
  By default, this inspection ignores compile-time constants.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(int i) {
    System.loadLibrary("foo" + i);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the inspection settings to consider any &lt;code&gt;static final&lt;/code&gt; fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  private static final String LIBRARY = getUserInput();
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JDBCPrepareStatementWithNonConstantString" defaultSeverity="WARNING" displayName="Call to 'Connection.prepare*()' with non-constant string" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.sql.Connection.prepareStatement()&lt;/code&gt;, &lt;code&gt;java.sql.Connection.prepareCall()&lt;/code&gt;, or any of their
variants which take a dynamically-constructed string as the statement to prepare.
&lt;p&gt;
  Constructed SQL statements are a common source of
  security breaches. By default, this inspection ignores compile-time constants.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String bar() { return "bar"; }

  Connection connection = DriverManager.getConnection("", "", "");
  connection.("SELECT * FROM user WHERE name='" + bar() + "'");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
Use the inspection settings to consider any &lt;code&gt;static&lt;/code&gt; &lt;code&gt;final&lt;/code&gt; fields as constants. Be careful, because strings like the
following will be ignored when the option is enabled:
&lt;pre&gt;&lt;code&gt;
  static final String SQL = "SELECT * FROM user WHERE name='" + getUserInput() + "'";
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SystemSetSecurityManager" defaultSeverity="WARNING" displayName="Call to 'System.setSecurityManager()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;System.setSecurityManager()&lt;/code&gt;.
&lt;p&gt;While often benign, any call to &lt;code&gt;System.setSecurityManager()&lt;/code&gt; should be closely examined in any security audit.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicStaticCollectionField" defaultSeverity="WARNING" displayName="'public static' collection field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports modifiable &lt;code&gt;public&lt;/code&gt; &lt;code&gt;static&lt;/code&gt; Collection fields.
&lt;p&gt;Even though they are often used to store collections of constant values, these fields nonetheless represent a security
  hazard, as their contents may be modified even if the field is declared as &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public static final List&amp;lt;String&amp;gt; EVENTS = new ArrayList&amp;lt;&amp;gt;();
  &lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the table in the &lt;b&gt;Options&lt;/b&gt; section to specify methods returning unmodifiable collections.
  &lt;code&gt;public&lt;/code&gt; &lt;code&gt;static&lt;/code&gt; collection fields initialized with these methods will not be reported.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SystemProperties" defaultSeverity="WARNING" displayName="Access of system properties" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that accesses system properties using one of the following methods:
&lt;ul&gt;
  &lt;li&gt;
    &lt;code&gt;System.getProperties()&lt;/code&gt;, &lt;code&gt;System.setProperty()&lt;/code&gt;,
    &lt;code&gt;System.setProperties()&lt;/code&gt;, &lt;code&gt;System.clearProperties()&lt;/code&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;Integer.getInteger()&lt;/code&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;Boolean.getBoolean()&lt;/code&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
While accessing the system properties is not a security risk in itself, it is often found in malicious code.
Code that accesses system properties should be closely examined in any security audit.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SerializableDeserializableClassInSecureContext" defaultSeverity="WARNING" displayName="Serializable class in secure context" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that may be serialized or deserialized.
&lt;p&gt;
  A class may be serialized if it supports the &lt;code&gt;Serializable&lt;/code&gt; interface,
  and its &lt;code&gt;readObject()&lt;/code&gt; and &lt;code&gt;writeObject()&lt;/code&gt; methods are not defined to always
  throw an exception. Serializable classes may be dangerous in code intended for secure use.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class DeserializableClass implements Serializable { // the class doesn't contain 'writeObject()' method throwing an exception
    private int sensitive = 736326;

    private void readObject(ObjectInputStream in) {
        throw new Error();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class DeserializableClass implements Serializable {
    private int sensitive = 736326;

    private void readObject(ObjectInputStream in) {
        throw new Error();
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        throw new java.io.NotSerializableException("DeserializableClass");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
    &lt;code&gt;Serializable&lt;/code&gt; from a superclass but are not intended for serialization.
    Note that it still may be more secure to add &lt;code&gt;readObject()&lt;/code&gt; and &lt;code&gt;writeObject()&lt;/code&gt; methods
    which always throw an exception, instead of ignoring those classes.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore serializable anonymous classes.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnsecureRandomNumberGeneration" defaultSeverity="WARNING" displayName="Insecure random number generation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of &lt;code&gt;java.lang.Random&lt;/code&gt; or
&lt;code&gt;java.lang.Math.random()&lt;/code&gt;.
&lt;p&gt;
  In secure environments,
  &lt;code&gt;java.secure.SecureRandom&lt;/code&gt; is a better choice, since is offers cryptographically secure
  random number generation.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  long token = new Random().nextLong();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CustomSecurityManager" defaultSeverity="WARNING" displayName="Custom 'SecurityManager'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports user-defined subclasses of &lt;code&gt;java.lang.SecurityManager&lt;/code&gt;.
&lt;p&gt;
  While not necessarily representing a security hole, such classes should be thoroughly
  and professionally inspected for possible security issues.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class CustomSecurityManager extends SecurityManager {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CustomClassloader" defaultSeverity="WARNING" displayName="Custom 'ClassLoader' is declared" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports user-defined subclasses of &lt;code&gt;java.lang.ClassLoader&lt;/code&gt;.
&lt;p&gt;
  While not necessarily representing a security hole, such classes should be thoroughly
  inspected for possible security issues.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DesignForExtension" defaultSeverity="WARNING" displayName="Design for extension" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods which are not &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;final&lt;/code&gt; or &lt;code&gt;abstract&lt;/code&gt;, and whose bodies
are not empty.
&lt;p&gt;
  Coding in a style that avoids such methods protects the contracts of classes from being broken by their subclasses. The
  benefit of this style is that subclasses cannot corrupt the state of the superclass by forgetting to call the super method. The cost is
  that
  subclasses are limited in their flexibility, in particular they cannot prevent execution of code in the superclass. Use the quick-fix to
  add
  the missing modifiers.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    public boolean equals(Object o) { return true; }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    public final boolean equals(Object o) { return true; }
  }
&lt;/code&gt;&lt;/pre&gt;
This inspection is intended for code that is going to be used in secure environments, and is probably not appropriate for less restrictive environments.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassLoaderInstantiation" defaultSeverity="WARNING" displayName="'ClassLoader' instantiation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiations of the &lt;code&gt;java.lang.ClassLoader&lt;/code&gt; class.
&lt;p&gt;While often benign, any instantiations of &lt;code&gt;ClassLoader&lt;/code&gt; should be closely examined in any security audit.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Class&amp;lt;?&amp;gt; loadExtraClass(String name) throws Exception {
      try(URLClassLoader loader =
          new URLClassLoader(new URL[]{new URL("extraClasses/")})) {
        return loader.loadClass(name);
      }
    }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RuntimeExecWithNonConstantString" defaultSeverity="WARNING" displayName="Call to 'Runtime.exec()' with non-constant string" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.Runtime.exec()&lt;/code&gt; which take a dynamically-constructed string as the command to execute.
&lt;p&gt;
  Constructed execution strings are a common source of security breaches.
  By default, this inspection ignores compile-time constants.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String i = getUserInput();
  Runtime runtime = Runtime.getRuntime();
  runtime.exec("foo" + i); // reports warning
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the inspection settings to consider any &lt;code&gt;static&lt;/code&gt; &lt;code&gt;final&lt;/code&gt; fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
&lt;pre&gt;&lt;code&gt;
  static final String COMMAND = "ping " + getDomainFromUserInput() + "'";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicStaticArrayField" defaultSeverity="WARNING" displayName="'public static' array field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;public&lt;/code&gt; &lt;code&gt;static&lt;/code&gt; array fields.
&lt;p&gt;
  Such fields are often used to store arrays of constant values. Still, they represent a security
  hazard, as their contents may be modified, even if the field is declared &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public static String[] allowedPasswords = {"foo", "bar"};
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JDBCExecuteWithNonConstantString" defaultSeverity="WARNING" displayName="Call to 'Statement.execute()' with non-constant string" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.sql.Statement.execute()&lt;/code&gt; or any
of its variants which take a dynamically-constructed string as the query to execute.
&lt;p&gt;Constructed SQL statements are a common source of security breaches.
  By default, this inspection ignores compile-time constants.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ResultSet execute(Statement statement, String name) throws SQLException {
    return statement.executeQuery("select * from " + name); // reports warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the inspection options to consider any &lt;code&gt;static&lt;/code&gt; &lt;code&gt;final&lt;/code&gt; fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
&lt;pre&gt;&lt;code&gt;
  private static final String SQL = "SELECT * FROM user WHERE name='" + getUserInput() + "'";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CloneableClassInSecureContext" defaultSeverity="WARNING" displayName="Cloneable class in secure context" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes which may be cloned.
&lt;p&gt;
  A class
  may be cloned if it supports the &lt;code&gt;Cloneable&lt;/code&gt; interface,
  and its &lt;code&gt;clone()&lt;/code&gt; method is not defined to immediately
  throw an error. Cloneable classes may be dangerous in code intended for secure use.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;code&gt;class SecureBean implements Cloneable {}&lt;/code&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;&lt;code&gt;class SecureBean {}&lt;/code&gt;
&lt;p&gt;
When the class extends an existing cloneable class or implements a cloneable interface,
  then after the quick-fix is applied, the code may look like: 
&lt;pre&gt;&lt;code&gt;class SecureBean extends ParentBean {
    @Override
    protected SecureBean clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonFinalClone" defaultSeverity="WARNING" displayName="Non-final 'clone()' in secure context" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;clone()&lt;/code&gt; methods without the &lt;code&gt;final&lt;/code&gt; modifier.
&lt;p&gt;
  Since &lt;code&gt;clone()&lt;/code&gt; can be used to instantiate objects without using a constructor, allowing the &lt;code&gt;clone()&lt;/code&gt;
  method to be overridden may result in corrupted objects, and even in security exploits. This may be prevented by making the
  &lt;code&gt;clone()&lt;/code&gt; method or the enclosing class itself &lt;code&gt;final&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main implements Cloneable {
    @Override
    protected Object clone() throws CloneNotSupportedException {
      return super.clone();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 5" path="Java/Java language level migration aids"><inspection shortName="UnnecessaryUnboxing" defaultSeverity="WARNING" displayName="Unnecessary unboxing" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unboxing, that is explicit unwrapping of wrapped primitive values.
&lt;p&gt;Unboxing is unnecessary as of Java 5 and later, and can safely be removed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Integer i = Integer.valueOf(42).intValue();&lt;/code&gt; &amp;rarr; &lt;code&gt;Integer i = Integer.valueOf(42);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;int k = Integer.valueOf(42).intValue();&lt;/code&gt; &amp;rarr; &lt;code&gt;int k = Integer.valueOf(42);&lt;/code&gt;
    &lt;p&gt;(reports only when the &lt;b&gt;Only report truly superfluously unboxed expressions&lt;/b&gt; option is not checked)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Only report truly superfluously unboxed expressions&lt;/b&gt; option to only report truly superfluous unboxing,
  where an unboxed value is immediately boxed either implicitly or explicitly.
  In this case, the entire unboxing-boxing step can be removed. The inspection doesn't report simple explicit unboxing.&lt;/p&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodCanBeVariableArityMethod" defaultSeverity="INFORMATION" displayName="Method can have varargs parameter" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that can be converted to variable arity methods.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void process(String name, Object[] objects);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void process(String name, Object... objects);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Variable arity methods&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RawUseOfParameterizedType" defaultSeverity="WARNING" displayName="Raw use of parameterized class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports generic classes with omitted type parameters. Such &lt;i&gt;raw&lt;/i&gt; use of generic types is valid
in Java, but it defeats the purpose of type parameters and may mask bugs. This inspection mirrors the
&lt;code&gt;rawtypes&lt;/code&gt; warning of &lt;code&gt;javac&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
//warning: Raw use of parameterized class 'List'
List list = new ArrayList&amp;lt;String&amp;gt;();
//list of strings was created but integer is accepted as well
list.add(1);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
//no warning as it's impossible to provide type arguments during array creation
IntFunction&amp;lt;List&amp;lt;?&amp;gt;[]&gt; fun = List[]::new;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore construction of new objects&lt;/b&gt; option to ignore raw types used in object construction.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore type casts&lt;/b&gt; option to ignore raw types used in type casts.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore where a type parameter would not compile&lt;/b&gt; option to ignore the cases when a type parameter fails to compile
    (for example, when creating an array or overriding a library method).&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore parameter types of overriding methods&lt;/b&gt; option to ignore type parameters used in parameters of overridden methods.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore when automatic quick-fix is not available&lt;/b&gt; option to ignore the cases when a quick-fix is not available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Generics&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IndexOfReplaceableByContains" defaultSeverity="WARNING" displayName="'String.indexOf()' expression can be replaced with 'contains()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons with &lt;code&gt;String.indexOf()&lt;/code&gt; calls
that can be replaced with a call to the &lt;code&gt;String.contains()&lt;/code&gt; method.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;boolean&lt;/b&gt; b = "abcd".indexOf('e') &gt;= 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;boolean&lt;/b&gt; b = "abcd".contains('e');
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BigDecimalLegacyMethod" defaultSeverity="WARNING" displayName="'BigDecimal' legacy method called" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;BigDecimal.divide()&lt;/code&gt; or &lt;code&gt;BigDecimal.setScale()&lt;/code&gt; that use integer constants to specify the rounding mode.
Since JDK 1.5, consider using methods that take the &lt;code&gt;RoundingMode&lt;/code&gt; &lt;code&gt;enum&lt;/code&gt; parameter instead.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new BigDecimal("42").setScale(2, BigDecimal.ROUND_FLOOR);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new BigDecimal("42").setScale(2, RoundingMode.FLOOR);&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WhileCanBeForeach" defaultSeverity="WARNING" displayName="'while' loop can be replaced with enhanced 'for' loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;while&lt;/code&gt; loops that iterate
over collections and can be replaced with enhanced &lt;code&gt;for&lt;/code&gt; loops (foreach iteration syntax).
&lt;!--  'foreach' still used in this description so that the inspection continues to be found using this keyword --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Iterator it = c.iterator();
  while(it.hasNext()) {
    Object obj = it.next();
    System.out.println(obj);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can be replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (Object obj : c) {
    System.out.println(obj);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;For-each loops&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForCanBeForeach" defaultSeverity="WARNING" displayName="'for' loop can be replaced with enhanced for loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;for&lt;/code&gt; loops that iterate over collections or arrays, 
and can be automatically replaced with an enhanced &lt;code&gt;for&lt;/code&gt; loop (foreach iteration syntax).
&lt;!--  'foreach' still used in this description so that the inspection continues to be found using this keyword --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (Iterator&amp;lt;String&amp;gt; iterator = list.iterator(); iterator.hasNext(); ) {
    String item = iterator.next();
    System.out.println(item);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (String item : list) {
    System.out.println(item);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Report indexed 'java.util.List' loops&lt;/b&gt; option to find loops involving &lt;code&gt;list.get(index)&lt;/code&gt; calls.
  Generally, these loops can be replaced with enhanced &lt;code&gt;for&lt;/code&gt; loops,
  unless they modify an underlying list in the process, for example, by calling &lt;code&gt;list.remove(index)&lt;/code&gt;.
  If the latter is the case, the enhanced &lt;code&gt;for&lt;/code&gt; loop may throw &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.
  Also, in some cases, &lt;code&gt;list.get(index)&lt;/code&gt; loops may work a little bit faster.&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Do not report iterations over untyped collections&lt;/b&gt; option to ignore collections without type parameters.
  This prevents the creation of enhanced &lt;code&gt;for&lt;/code&gt; loop variables of the &lt;code&gt;java.lang.Object&lt;/code&gt; type and the insertion of casts
  where the loop variable is used.&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;For-each loops&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CollectionsFieldAccessReplaceableByMethodCall" defaultSeverity="WARNING" displayName="Reference to empty collection field can be replaced with method call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;java.util.Collections&lt;/code&gt; fields: &lt;code&gt;EMPTY_LIST&lt;/code&gt;, &lt;code&gt;EMPTY_MAP&lt;/code&gt;
or &lt;code&gt;EMPTY_SET&lt;/code&gt;. These field usages may be replaced with the following method
calls: &lt;code&gt;emptyList()&lt;/code&gt;, &lt;code&gt;emptyMap()&lt;/code&gt;, or &lt;code&gt;emptySet()&lt;/code&gt;.
Such method calls prevent unchecked warnings by the compiler because the type parameters can be inferred.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;Integer&amp;gt; emptyList = Collections.EMPTY_LIST;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;Integer&amp;gt; emptyList = Collections.emptyList();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher.&lt;/p&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringBufferReplaceableByStringBuilder" defaultSeverity="WARNING" displayName="'StringBuffer' may be 'StringBuilder'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables declared as &lt;code&gt;StringBuffer&lt;/code&gt; and suggests replacing them with &lt;code&gt;StringBuilder&lt;/code&gt;.
&lt;code&gt;StringBuilder&lt;/code&gt; is a non-thread-safe replacement for &lt;code&gt;StringBuffer&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryBoxing" defaultSeverity="WARNING" displayName="Unnecessary boxing" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports explicit boxing, that is wrapping of primitive values in objects.
&lt;p&gt;Explicit manual boxing is unnecessary as of Java 5 and later, and can safely be removed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Integer i = new Integer(1);&lt;/code&gt; &amp;rarr; &lt;code&gt;Integer i = Integer.valueOf(1);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;int i = Integer.valueOf(1);&lt;/code&gt; &amp;rarr; &lt;code&gt;int i = 1;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Only report truly superfluously boxed expressions&lt;/b&gt; option to report only truly superfluous boxing,
  where a boxed value is immediately unboxed either implicitly or explicitly.
In this case, the entire boxing-unboxing step can be removed. The inspection doesn't report simple explicit boxing.
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 21" path="Java/Java language level migration aids"><inspection shortName="DeconstructionCanBeUsed" defaultSeverity="WARNING" displayName="Record pattern can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports patterns that can be replaced with record patterns.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  record Point(int x, int y) {
    static void printSum(Object obj) {
      if (obj instanceof Point p) {
        int x = p.x();
        int y = p.y();
        System.out.println(x + y);
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  record Point(int x, int y) {
    static void printSum(Object obj) {
      if (obj instanceof Point(int x, int y)) {
        System.out.println(x + y);
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Pattern guards and record patterns&amp;#39;, which is available since Java 21.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2023.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExplicitToImplicitClassMigration" defaultSeverity="WARNING" displayName="Explicit class declaration can be converted into implicitly declared class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ordinary classes, which can be converted into implicitly declared classes
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Sample {
      public static void main(String[] args) {
          System.out.println("Hello, world!");
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public static void main(String[] args) {
      System.out.println("Hello, world!");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Implicitly declared classes&amp;#39;, which is available since Java 21-preview.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2024.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringTemplateMigration" defaultSeverity="WARNING" displayName="String template can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;String&lt;/code&gt; concatenations that can be simplified by replacing them with a string template.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String name = "Bob";
  String greeting = "Hello, " + name + ". You are " + 29 + " years old.";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String name = "Bob";
  String greeting = STR."Hello, \{name}. You are 29 years old.";
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;String templates&amp;#39;, which is available since Java 21-preview.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2023.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ImplicitToExplicitClassBackwardMigration" defaultSeverity="INFORMATION" displayName="Implicitly declared class can be replaced with ordinary class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implicitly declared classes and suggests replacing them with regular classes.
&lt;p&gt;&lt;b&gt;Example (in file Sample.java):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public static void main() {
      System.out.println("Hello, world!");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
public class Sample {
    public static void main() {
        System.out.println("Hello, world!");
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Implicitly declared classes&amp;#39;, which is available since Java 21-preview.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2024.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SequencedCollectionMethodCanBeUsed" defaultSeverity="WARNING" displayName="SequencedCollection method can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports collection API method calls that can be simplified using &lt;code&gt;SequencedCollection&lt;/code&gt; methods.
&lt;p&gt;The following conversions are supported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;list.add(0, element)&lt;/code&gt; &amp;rarr; &lt;code&gt;list.addFirst(element);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;list.get(0)&lt;/code&gt; &amp;rarr; &lt;code&gt;list.getFirst();&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;list.get(list.size() - 1)&lt;/code&gt; &amp;rarr; &lt;code&gt;list.getLast();&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;list.remove(0)&lt;/code&gt; &amp;rarr; &lt;code&gt;list.removeFirst();&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;list.remove(list.size() - 1)&lt;/code&gt; &amp;rarr; &lt;code&gt;list.removeLast();&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;collection.iterator().next()&lt;/code&gt; &amp;rarr; &lt;code&gt;collection.getFirst();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Sequenced Collections&amp;#39;, which is available since Java 21.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2023.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringTemplateReverseMigration" defaultSeverity="INFORMATION" displayName="String template can be concatenated string" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string template expressions using the &lt;code&gt;STR&lt;/code&gt; processor and offers a quick-fix to 
migrate back to a plain string concatenation.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String name = "Bob";
  String greeting = STR."Hello, \{name}. You are 29 years old.";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String name = "Bob";
  String greeting = "Hello, " + name + ". You are 29 years old.";
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;

&lt;p&gt;&lt;small&gt;New in 2024.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Test frameworks" path="JVM languages"><inspection shortName="TestInProductSource" defaultSeverity="WARNING" displayName="Test in product source" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports test classes and test methods that are located in production source trees.
This most likely a mistake and can result in test code being shipped into production.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TestOnlyProblems" defaultSeverity="WARNING" displayName="Test-only usage in production code" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;@TestOnly&lt;/code&gt;- and &lt;code&gt;@VisibleForTesting&lt;/code&gt;-annotated methods and classes that are used in production code. Also reports
usage of applying &lt;code&gt;@TestOnly&lt;/code&gt; &lt;code&gt;@VisibleForTesting&lt;/code&gt; to the same element.

&lt;p&gt;The problems are not reported if such method or class is referenced from:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Code under the &lt;b&gt;Test Sources&lt;/b&gt; folder
  &lt;li&gt;A test class (JUnit/TestNG)
  &lt;li&gt;Another &lt;code&gt;@TestOnly&lt;/code&gt;-annotated method
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example (in production code):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
  @TestOnly
  fun foo() { ... }

  fun main () {
    foo()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TestCaseWithConstructor" defaultSeverity="WARNING" displayName="TestCase with non-trivial constructors" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports test cases with initialization logic in their constructors.
If a constructor fails, the &lt;code&gt;@After&lt;/code&gt; annotated or &lt;code&gt;tearDown()&lt;/code&gt; method won't be called.
This can leave the test environment partially initialized, which can adversely affect other tests.
Instead, initialization of test cases should be done in a &lt;code&gt;setUp()&lt;/code&gt; or &lt;code&gt;@Before&lt;/code&gt; annotated method.
&lt;p&gt;Bad example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class ImportantTest {
    private File file;

    public ImportantTest() throws IOException {
      file = File.createTempFile("xyz", ".tmp");
    }

    // ... tests go here
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssertBetweenInconvertibleTypes" defaultSeverity="WARNING" displayName="'assertEquals()' between objects of inconvertible types" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to assertion methods where the "expected" and "actual" arguments are of incompatible types.
&lt;p&gt;Such calls often indicate that there is a bug in the test.
  This inspection checks the relevant JUnit, TestNG, and AssertJ methods.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  assertEquals("1", 1);
  assertNotSame(new int[0], 0);

  // weak warning, may just test the equals() contract
  assertThat(foo).as("user type").isNotEqualTo(bar);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TestCaseWithNoTestMethods" defaultSeverity="WARNING" displayName="Test class without tests" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;abstract&lt;/code&gt; test cases without any test methods. Such test cases usually indicate unfinished code or could be a
refactoring leftover that should be removed.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class CrucialTest {
    @Before
    public void setUp() {
      System.out.println("setting up");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TestMethodWithoutAssertion" defaultSeverity="WARNING" displayName="Test method without assertions" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports test methods that do not contain any assertions. Such methods may indicate either incomplete or weak test cases.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  &lt;b&gt;public class&lt;/b&gt; ExtensiveTest {

    @Test
    &lt;b&gt;public void&lt;/b&gt; testAlive() {
      System.out.println("nothing");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
      Use the table to specify the combinations of fully qualified class name and method name regular expression
      that should qualify as assertions. Class names also match subclasses.
  &lt;/li&gt;
  &lt;li&gt;
      Use the &lt;b&gt;'assert' keyword is considered an assertion&lt;/b&gt; option to specify if the Java &lt;code&gt;assert&lt;/code&gt; statements using the &lt;code&gt;assert&lt;/code&gt; keyword should be considered an assertion.
  &lt;/li&gt;
  &lt;li&gt;
      Use the &lt;b&gt;Ignore test methods which declare exceptions&lt;/b&gt; option to ignore the test methods that declare exceptions.
      This can be useful when you have tests that will throw an exception on failure and thus don't need any assertions.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TestFailedLine" defaultSeverity="WARNING" displayName="Failed line in test" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports failed method calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
  @Test
  fun foo() {
    assertEquals(1, 0) // highlighted
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Data flow" path="Java"><inspection shortName="ConstantValueVariableUse" defaultSeverity="WARNING" displayName="Use of variable whose value is known to be constant" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any usages of variables which are known to be constant.
&lt;p&gt;This is the case if the (read) use of the variable is surrounded by an
&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;for&lt;/code&gt;
statement with an &lt;code&gt;==&lt;/code&gt; condition which compares the variable with a constant.
  In this case, the use of a variable which is known to be constant can be replaced with
  an actual constant.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    private static void foo(double number) {
        if (number == 1.0) {
            f(number);
        }
    }
    private static void f(double number) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    private static void foo(double number) {
        if (number == 1.0) {
            f(1.0);
        }
    }
    private static void f(double number) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegativelyNamedBooleanVariable" defaultSeverity="WARNING" displayName="Negatively named boolean variable" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports negatively named variables, for example: &lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;hidden&lt;/code&gt;, or &lt;code&gt;isNotChanged&lt;/code&gt;.
&lt;p&gt;Usually, inverting the &lt;code&gt;boolean&lt;/code&gt; value and removing the negation from the name makes the code easier to understand.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    boolean disabled = false;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BooleanVariableAlwaysNegated" defaultSeverity="WARNING" displayName="Boolean variable is always inverted" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports boolean variables or fields which are always negated
when their value is used.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
      void m() {
        boolean b = true; //boolean variable 'b' is always inverted
        System.out.println(!b);
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TooBroadScope" defaultSeverity="INFORMATION" displayName="Scope of variable is too broad" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any variable declarations that can be moved to a smaller scope.
&lt;p&gt;This inspection is especially
useful for &lt;i&gt;Pascal style&lt;/i&gt; declarations at the beginning of a method. Additionally variables with too broad a
  scope are also often left behind after refactorings.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  StringBuilder sb = new StringBuilder();
  System.out.println();
  sb.append(1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println();
  StringBuilder sb = new StringBuilder();
  sb.append(1);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Only report variables that can be moved into inner blocks&lt;/b&gt; option to report only those variables that can be moved inside deeper code blocks.
    For example, when the option is enabled, the movement will not be suggested for the &lt;code&gt;sb&lt;/code&gt; variable above.
    However, it will be suggested for the following code:
&lt;pre&gt;&lt;code&gt;
  StringBuilder sb = new StringBuilder(a);
  if (flag) {
    sb.append(1);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Report variables with a new expression as initializer
    (potentially unsafe)&lt;/b&gt; option to report variables that are initialized with a new expression. This makes the inspection potentially
    unsafe when the constructor has non-local side effects. For example, when the option is enabled, the movement will be
    suggested for the &lt;code&gt;foo&lt;/code&gt; variable:
&lt;pre&gt;&lt;code&gt;
  class Foo {
    static List&amp;lt;Foo&amp;gt; fooList = new ArrayList&amp;lt;&amp;gt;();
    String bar;

    Foo(String bar) {
        this.bar = bar;
        fooList.add(this);
    }

    public static void main(String[] args) {
      // movement is possible even though is unsafe
      Foo foo = new Foo("bar");
      System.out.println(fooList.size());
      System.out.println(foo.bar);
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BooleanMethodIsAlwaysInverted" defaultSeverity="WARNING" displayName="Boolean method is always inverted" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports methods with a &lt;code&gt;boolean&lt;/code&gt; return type that are always negated when called.
&lt;p&gt;A quick-fix is provided to invert and optionally rename the method.
  For performance reasons, not all problematic methods may be highlighted in the editor.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C {
    boolean alwaysTrue() {
      return true;
    }

    void f() {
      if (!alwaysTrue()) {
        return;
      }
    }
    boolean member = !alwaysTrue();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C {
    boolean alwaysFalse() {
      return false;
    }

    void f() {
      if (alwaysFalse()) {
        return;
      }
    }
    boolean member = alwaysFalse();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnnecessaryLocalVariable" defaultSeverity="WARNING" displayName="Redundant local variable" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary local variables that add nothing to the comprehensibility of a method, including:
&lt;ul&gt;
  &lt;li&gt;Local variables that are immediately returned.&lt;/li&gt;
  &lt;li&gt;Local variables that are immediately assigned to another variable and then not used.&lt;/li&gt;
  &lt;li&gt;Local variables that always have the same value as another local variable or parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean yes() {
    boolean b = true;
    return b;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean yes() {
    return true;
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore immediately returned or thrown variables&lt;/b&gt; option to ignore immediately returned or thrown variables.
    Some coding styles suggest using such variables for clarity and ease of debugging.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore variables which have an annotation&lt;/b&gt; option to ignore annotated variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReuseOfLocalVariable" defaultSeverity="INFORMATION" displayName="Reuse of local variable" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables that are "reused" overwriting their
values with new values unrelated to their original use.
&lt;p&gt;Such a local variable reuse may be confusing,
as the intended semantics of the local variable may vary with each use. It may also be
prone to bugs if due to the code changes, the values that have been considered overwritten actually
appear to be alive. It is a good practice to keep variable lifetimes as short as possible, and not
  to reuse local variables for the sake of brevity.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    void x() {
        String s = "one";
        System.out.println("s = " + s);
        s = "two"; //reuse of local variable 's'
        System.out.println("s = " + s);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LawOfDemeter" defaultSeverity="WARNING" displayName="Law of Demeter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;a href="https://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt; violations.
&lt;p&gt;
The Law of Demeter is not really a law, but specifies a style guideline: never call a method on an object received from another call.
The code that follows this guideline is easier to maintain, adapt, and refactor, has less coupling between methods, less duplication,
and better information hiding. On the other hand, you may need to write many wrapper methods to meet this guideline.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean pay(Customer c, Invoice invoice) {
    int dollars = c.getWallet().contents; // violation
    if (dollars &gt;= invoice.getAmount()) {
      Wallet w = c.getWallet();
      w.subtract(invoice.getAmount()); // violation
      return true;
    }
    return false;
  }
&lt;/code&gt;&lt;/pre&gt;
The above example might be better implemented as a method &lt;code&gt;payInvoice(Invoice invoice)&lt;/code&gt; in &lt;code&gt;Customer&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore calls to library methods and access to library fields&lt;/b&gt; option to ignore Law of Demeter violations
that can't be fixed without changing a library.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Verbose or redundant code constructs" path="Java"><inspection shortName="CastCanBeRemovedNarrowingVariableType" defaultSeverity="WARNING" displayName="Too weak variable type leads to unnecessary cast" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type casts that can be removed if the variable type is narrowed to the cast type.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Object x = "  string  ";
  System.out.println(((String)x).trim());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Here, changing the type of &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt; makes the cast redundant. The suggested quick-fix updates the variable type and
removes all redundant casts on that variable:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String x = "  string  ";
  System.out.println(x.trim());
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantCast" defaultSeverity="WARNING" displayName="Redundant type cast" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary cast expressions.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  static Object toObject(String s) {
    return (Object) s;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to ignore clarifying casts e.g., casts in collection calls where &lt;code&gt;Object&lt;/code&gt; is expected:
&lt;pre&gt;&lt;code&gt;
  static void removeFromList(List&amp;lt;String&amp;gt; l, Object o) {
    l.remove((String)o);
  } 
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantJavaTimeOperations" defaultSeverity="WARNING" displayName="Redundant operation on 'java.time' object" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports redundant operation on 'java.time' object redundant:
&lt;ul&gt;
  &lt;li&gt;creation of date/time objects from the JDK &lt;code&gt;java.time&lt;/code&gt; package
    when simpler method calls can be used or creation can be avoided.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.time&lt;/code&gt; method calls with &lt;code&gt;java.time.temporal.ChronoField&lt;/code&gt; and
    &lt;code&gt;java.time.temporal.ChronoUnit&lt;/code&gt; as arguments when these calls can be replaced with
    calls of more specific methods.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.time&lt;/code&gt; comparisons with &lt;code&gt;compareTo()&lt;/code&gt; calls that can be replaced with
    &lt;code&gt;isAfter()&lt;/code&gt;, &lt;code&gt;isBefore()&lt;/code&gt; or &lt;code&gt;isEqual()&lt;/code&gt; calls.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;
- Before:
&lt;pre&gt;&lt;code&gt;
LocalDateTime now = LocalDateTime.now();
return LocalDateTime.from(now);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
LocalDateTime now = LocalDateTime.now();
return now;
&lt;/code&gt;&lt;/pre&gt;
- Before:
&lt;pre&gt;&lt;code&gt;
LocalTime localTime = LocalTime.now();
int minute = localTime.get(ChronoField.MINUTE_OF_HOUR);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
LocalTime localTime = LocalTime.now();
int minute = localTime.getMinute();
&lt;/code&gt;&lt;/pre&gt;
- Before:
&lt;pre&gt;&lt;code&gt;
  LocalDate date1 = LocalDate.now();
  LocalDate date2 = LocalDate.now();
  boolean t = date1.compareTo(date2) &gt; 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  LocalDate date1 = LocalDate.now();
  LocalDate date2 = LocalDate.now();
  boolean t = date1.isAfter(date2);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2024.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelOnContinueStatement" defaultSeverity="WARNING" displayName="Unnecessary label on 'continue' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;continue&lt;/code&gt; statements with unnecessary
labels.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  LABEL:
  while (a &amp;gt; b) {
    System.out.println("Hello");
    //the code below is the last statement in a loop,
    //so unnecessary label and continue can be removed
    continue LABEL;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionCoveredByFurtherCondition" defaultSeverity="WARNING" displayName="Condition is covered by further condition" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditions that become redundant as they are completely covered by a subsequent condition.
&lt;p&gt;For example, in the &lt;code&gt;value != -1 &amp;&amp; value &gt; 0&lt;/code&gt; condition, the first part is redundant:
if it's false, then the second part is also false.
Or in a condition like &lt;code&gt;obj != null &amp;&amp; obj instanceof String&lt;/code&gt;,
  the null-check is redundant as &lt;code&gt;instanceof&lt;/code&gt; operator implies non-nullity.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantLengthCheck" defaultSeverity="WARNING" displayName="Redundant array length check" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary array length checks followed by array iteration. When array length is zero,
the iteration will be skipped anyway, so there's no need to check length explicitly.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(String[] array) {
    if (array.length != 0) { // unnecessary check
      for (String str : array) {
        System.out.println(str);
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is suggested to unwrap or remove the length check:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(String[] array) {
    for (String str : array) {
      System.out.println(str);
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OnlyOneElementUsed" defaultSeverity="WARNING" displayName="Only one element is used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lists, arrays, and strings where exactly one element is queried right upon the creation.
Such expressions may appear after refactoring and usually could be replaced with an accessed element.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(new int[] {1,2,3,4,5}[2]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(3);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantArrayCreation" defaultSeverity="WARNING" displayName="Redundant array creation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arrays that are created specifically to be passed as a varargs parameter.
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Arrays.asList(new String[]{"Hello", "world"})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The quick-fix replaces the array initializer with individual arguments:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Arrays.asList("Hello", "world")&lt;/code&gt;&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CastCanBeReplacedWithVariable" defaultSeverity="INFORMATION" displayName="Cast can be replaced with variable" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type cast operations that can be replaced with existing local or pattern variables with the same value.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(Object obj) {
    String s = (String) obj;
    System.out.println(((String) obj).trim());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(Object obj) {
    String s = (String) obj;
    System.out.println(s.trim());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExplicitArrayFilling" defaultSeverity="WARNING" displayName="Explicit array filling" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports loops that can be replaced with &lt;code&gt;Arrays.setAll()&lt;/code&gt; or &lt;code&gt;Arrays.fill()&lt;/code&gt; calls.
&lt;p&gt;This inspection suggests replacing loops with &lt;code&gt;Arrays.setAll()&lt;/code&gt; if the language level of the project or module is 8 or higher.
  Replacing loops with &lt;code&gt;Arrays.fill()&lt;/code&gt; is possible with any language level.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (int i=0; i&amp;lt;array.length; i++) {
     array[i] = calc(i);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Arrays.setAll(array, this::calc);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifyOptionalCallChains" defaultSeverity="WARNING" displayName="Optional call chain can be simplified" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;Optional&lt;/b&gt; call chains that can be simplified. Here are several examples of possible simplifications:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;optional.map(x -&gt; true).orElse(false)&lt;/code&gt; &amp;rarr; &lt;code&gt;optional.isPresent()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;optional.map(x -&gt; Optional.of(x.trim())).orElseGet(Optional::empty)&lt;/code&gt; &amp;rarr; &lt;code&gt;optional.map(String::trim)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;optional.map(x -&gt; (String)x).orElse(null)&lt;/code&gt; &amp;rarr; &lt;code&gt;(String) optional.orElse(null)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Optional.ofNullable(optional.orElse(null))&lt;/code&gt; &amp;rarr; &lt;code&gt;optional&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;val = optional.orElse(null); val != null ? val : defaultExpr &lt;/code&gt; &amp;rarr; &lt;code&gt;optional.orElse(defaultExpr)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;val = optional.orElse(null); if(val != null) expr(val) &lt;/code&gt; &amp;rarr; &lt;code&gt;optional.ifPresent(val -&gt; expr(val))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnreachableCatch" defaultSeverity="WARNING" displayName="Unreachable catch section" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports catch sections which are never executed, even if allowed by the Java Language Specification.
&lt;p&gt;
  While unreachable catch sections are normally disallowed by Java compiler and reported as compilation errors, 
  the analysis mandated by the Java language is not complete for some cases.
  This inspection provides enhanced analysis and reports some unreachable catch sections which are not reported by the compiler.
  Such sections are redundant and could be safely removed.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void method() {
    try { 
      throw new FileNotFoundException(); 
    }
    catch (FileNotFoundException e) { 
      
    }
    catch (IOException e) {
      // this catch is allowed by specification
      // but never executed
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix is provided, which removes the redundant catch section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void method() {
    try { 
      throw new FileNotFoundException(); 
    }
    catch (FileNotFoundException e) { 
      
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2025.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryDefault" defaultSeverity="WARNING" displayName="Unnecessary 'default' for enum 'switch' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports enum &lt;code&gt;switch&lt;/code&gt; statements or expression with &lt;code&gt;default&lt;/code&gt; branches which can never be taken,
because all possible values are covered by a &lt;code&gt;case&lt;/code&gt; branch.
&lt;p&gt;Such elements are redundant, especially for &lt;code&gt;switch&lt;/code&gt; expressions, because they don't compile when all
  enum constants are not covered by a &lt;code&gt;case&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;
  The language level needs to be configured to 14 to report &lt;code&gt;switch&lt;/code&gt; expressions.
&lt;/p&gt;
&lt;p&gt;The provided quick-fix removes &lt;code&gt;default&lt;/code&gt; branches.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum E { A, B }
  int foo(E e) {
    return switch (e) {
      case A -&amp;gt; 1;
      case B -&amp;gt; 2;
      default -&amp;gt; 3;
    };
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum E { A, B }
  int foo(E e) {
    return switch (e) {
      case A -&amp;gt; 1;
      case B -&amp;gt; 2;
    };
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Only report switch expressions&lt;/b&gt; option to report only redundant &lt;code&gt;default&lt;/code&gt; branches in switch expressions.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExcessiveLambdaUsage" defaultSeverity="WARNING" displayName="Excessive lambda usage" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if a trivial lambda expression is used in cases in which there's an alternative method that behaves in the same way, but accepts a concrete value
instead of a lambda.
&lt;p&gt;This inspection helps simplify the code.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Optional.orElseGet(() -&gt; null)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Optional.orElse(null)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantFileCreation" defaultSeverity="WARNING" displayName="Redundant 'File' instance creation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;File&lt;/code&gt; creation in one of the following constructors when only &lt;code&gt;String&lt;/code&gt; path can be used: &lt;code&gt;FileInputStream&lt;/code&gt;, &lt;code&gt;FileOutputStream&lt;/code&gt;,
&lt;code&gt;FileReader&lt;/code&gt;, &lt;code&gt;FileWriter&lt;/code&gt;, &lt;code&gt;PrintStream&lt;/code&gt;, &lt;code&gt;PrintWriter&lt;/code&gt;, &lt;code&gt;Formatter&lt;/code&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
InputStream is = new FileInputStream(new File("in.txt"));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
InputStream is = new FileInputStream("in.txt");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="StringOperationCanBeSimplified" defaultSeverity="WARNING" displayName="Redundant 'String' operation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant calls to &lt;code&gt;String&lt;/code&gt; constructors and methods like &lt;code&gt;toString()&lt;/code&gt; or &lt;code&gt;substring()&lt;/code&gt;
that can be replaced with a simpler expression.
&lt;p&gt;For example, calls to these methods can be safely removed in code
  like &lt;code&gt;"string".substring(0)&lt;/code&gt;, &lt;code&gt;"string".toString()&lt;/code&gt;, or
  &lt;code&gt;new StringBuilder().toString().substring(1,3)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(new String("message"));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println("message");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Note that the quick-fix removes the redundant constructor call, and this may affect &lt;code&gt;String&lt;/code&gt; referential equality.
  If you need to preserve it, even though it is considered bad practice, suppress the warning or use the inspection setting to ignore
  redundant &lt;code&gt;String&lt;/code&gt; constructor calls.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Do not report String constructor calls&lt;/b&gt; option below to not report code like the example above.
  This will avoid changing the outcome of String comparisons with &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; after applying
  the quick-fix in code that uses &lt;code&gt;new String()&lt;/code&gt; calls to guarantee a different object identity.
&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Do not report single argument substring() calls&lt;/b&gt; option below to not report code like the following.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  stringBuilder.append(string.substring(5));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which can be replaced with the following.
&lt;pre&gt;&lt;code&gt;
  stringBuilder.append(string, 5, string.length());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LombokSetterMayBeUsed" defaultSeverity="WARNING" displayName="Lombok @Setter may be used" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports standard setter method that can be replaced by the lombok &lt;code&gt;@Setter&lt;/code&gt; annotation.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util.Date;

  public class MyClass {
    /**
     * The process date.
     */
    private Date processDate;

    /**
     * Sets the date.
     *
     * @param The date
     */
    public void setProcessDate(Date param) {
      processDate = param;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix/cleanup is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import lombok.Setter;
  import java.util.Date;

  @Setter
  public class MyClass {
    /**
     * The process date.
     * -- SETTER --
     * Sets the date.
     *
     * @param The date
     */
    private Date processDate;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It only reports when the lombok library is configured. To unlombok, see the lombok site.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2023.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantCollectionOperation" defaultSeverity="WARNING" displayName="Redundant 'Collection' operation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessarily complex collection operations which have simpler alternatives.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(String[] array, Collection&amp;lt;String&amp;gt; collection) {
    String[] strings = Arrays.asList(array).subList(0, 10).toArray(new String[0]);
    boolean contains = collection.containsAll(Collections.singletonList("x"));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(String[] array, Collection&amp;lt;String&amp;gt; collection) {
    String[] strings = Arrays.copyOf(array, 10);
    boolean contains = collection.contains("x");
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonStrictComparisonCanBeEquality" defaultSeverity="WEAK WARNING" displayName="Non-strict inequality '&gt;=' or '&lt;=' can be replaced with '=='" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inequality conditions that, according to data flow analysis, can be satisfied only for a single operand value.
Such conditions could be replaced with equality conditions to make the code clearer.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (x &gt;= 10) {
    ...
    if (x &lt;= 10) { // can be replaced with 'x == 10'
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObviousNullCheck" defaultSeverity="WARNING" displayName="Null-check method is called with obviously non-null argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if a null-checking method (for example, &lt;code&gt;Objects.requireNonNull&lt;/code&gt; or &lt;code&gt;Assert.assertNotNull&lt;/code&gt;) is
called on a value that is obviously non-null (for example, a newly created object). Such a check is redundant and may indicate
a programming error.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  final String greeting = Objects.requireNonNull("Hi!");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  final String greeting = "Hi!";
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;New in 2017.2&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantStreamOptionalCall" defaultSeverity="WARNING" displayName="Redundant step in 'Stream' or 'Optional' call chain" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;Stream&lt;/code&gt; or &lt;code&gt;Optional&lt;/code&gt; calls like &lt;code&gt;map(x -&amp;gt; x)&lt;/code&gt;, &lt;code&gt;filter(x -&amp;gt; true)&lt;/code&gt; or
redundant &lt;code&gt;sorted()&lt;/code&gt; or &lt;code&gt;distinct()&lt;/code&gt; calls.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Note that a mapping operation in code like &lt;code&gt;streamOfIntegers.map(Integer::valueOf)&lt;/code&gt;
  works as &lt;code&gt;requireNonNull()&lt;/code&gt; check:
  if the stream contains &lt;code&gt;null&lt;/code&gt;, it throws a &lt;code&gt;NullPointerException&lt;/code&gt;, thus it's not absolutely redundant.
  Disable the &lt;b&gt;Report redundant boxing in Stream.map()&lt;/b&gt; option if you do not want such cases to be reported.&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantClassCall" defaultSeverity="WARNING" displayName="Redundant 'isInstance()' or 'cast()' call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant calls of &lt;code&gt;java.lang.Class&lt;/code&gt; methods.
&lt;p&gt;For example, &lt;code&gt;Xyz.class.isInstance(object)&lt;/code&gt; can be replaced with &lt;code&gt;object instanceof Xyz&lt;/code&gt;.
The instanceof check is preferred: even though the performance will probably be the same as these methods are intrinsics,
they better indicate a static check.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantCompareCall" defaultSeverity="WARNING" displayName="Redundant 'compare()' method call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons in which the &lt;code&gt;compare&lt;/code&gt; method is superfluous.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean result = Integer.compare(a, b) == 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean result = a == b;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantEscapeInRegexReplacement" defaultSeverity="WARNING" displayName="Redundant escape in regex replacement string" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant escapes in the replacement string of regex methods.
It is allowed to escape any character in a regex replacement string,
but only for the &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; characters is escaping necessary.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  string.replaceAll("a", "\\b");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  string.replaceAll("a", "b");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryBreak" defaultSeverity="WARNING" displayName="Unnecessary 'break' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any unnecessary &lt;code&gt;break&lt;/code&gt; statements.
&lt;p&gt;An &lt;code&gt;break&lt;/code&gt; statement is unnecessary if no other statements are executed after it has been removed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  switch (e) {
    case A -&amp;gt; {
        System.out.println("A");
        break; // reports 'break' statement is unnecessary
    }
    default -&amp;gt; {
        System.out.println("Default");
        break; // reports 'break' statement is unnecessary
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryStringEscape" defaultSeverity="WARNING" displayName="Unnecessarily escaped character" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessarily escaped characters in &lt;code&gt;String&lt;/code&gt; and optionally &lt;code&gt;char&lt;/code&gt; literals.
&lt;p&gt;Escaped tab characters &lt;code&gt;\t&lt;/code&gt; are not reported, because tab characters are invisible.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = "\'Scare\' quotes";
  String t = """
    All you need is\n\tLove\n""";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = "'Scare' quotes";
  String t = """
    All you need is
    \tLove
  """;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelOnBreakStatement" defaultSeverity="WARNING" displayName="Unnecessary label on 'break' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;break&lt;/code&gt; statements with unnecessary labels. Such labels do not change the
control flow but make the code difficult to follow.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  label:
  for(int i = 0; i &amp;lt; 10; i++) {
    if (shouldBreak()) break label;
    //doSmth
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  label:
  for(int i = 0; i &amp;lt; 10; i++) {
    if (shouldBreak()) break;
    //doSmth
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifyCollector" defaultSeverity="WARNING" displayName="Simplifiable collector" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports collectors that can be simplified.
&lt;p&gt;In particular, some cascaded &lt;code&gt;groupingBy()&lt;/code&gt; collectors can be expressed by using a
  simpler &lt;code&gt;toMap()&lt;/code&gt; collector, which is also likely to be more performant.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Collectors.groupingByConcurrent(String::length, Collectors.collectingAndThen(Collectors.maxBy(String::compareTo), Optional::get));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Collectors.toConcurrentMap(String::length, Function.identity(), BinaryOperator.maxBy(String::compareTo));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringBufferReplaceableByString" defaultSeverity="WARNING" displayName="'StringBuilder' can be replaced with 'String'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;StringBuffer&lt;/code&gt;, &lt;code&gt;StringBuilder&lt;/code&gt;, or &lt;code&gt;StringJoiner&lt;/code&gt;
which can be replaced with a single &lt;code&gt;String&lt;/code&gt; concatenation.
&lt;p&gt;Using &lt;code&gt;String&lt;/code&gt; concatenation
  makes the code shorter and simpler.&lt;/p&gt;
&lt;p&gt;
This inspection only reports when the suggested replacement does not result in significant
performance drawback on modern JVMs. In many cases, &lt;code&gt;String&lt;/code&gt; concatenation may perform better.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  StringBuilder result = new StringBuilder();
  result.append("i = ");
  result.append(i);
  result.append(";");
  return result.toString();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String result = "i = " + i + ";";
  return result;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LombokGetterMayBeUsed" defaultSeverity="WARNING" displayName="Lombok @Getter may be used" enabled="true" language="JAVA" pluginId="Lombook Plugin" pluginVersion="251.27812.12" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports standard getter method that can be replaced by the lombok &lt;code&gt;@Getter&lt;/code&gt; annotation.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util.Date;

  public class MyClass {
    /**
     * The process date.
     */
    private Date processDate;

    /**
     * Returns the date.
     *
     * @return The date
     */
    public Date getProcessDate() {
      return processDate;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix/cleanup is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import lombok.Getter;
  import java.util.Date;

  @Getter
  public class MyClass {
    /**
     * The process date.
     * -- GETTER --
     * Returns the date.
     *
     * @return The date
     */
    private Date processDate;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It only reports when the lombok library is configured. To unlombok, see the lombok site.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2023.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceOnLiteralHasNoEffect" defaultSeverity="WARNING" displayName="Replacement operation has no effect" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to the &lt;code&gt;String&lt;/code&gt; methods &lt;code&gt;replace()&lt;/code&gt;, &lt;code&gt;replaceAll()&lt;/code&gt; or &lt;code&gt;replaceFirst()&lt;/code&gt;
that have no effect. Such calls can be guaranteed to have no effect when the qualifier and search string are compile-time constants
and the search string is not found in the qualifier. This is redundant and may indicate an error.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // replacement does nothing
  "hello".replace("$value$", value);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantUnmodifiable" defaultSeverity="WARNING" displayName="Redundant usage of unmodifiable collection wrappers" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant calls to unmodifiable collection wrappers from the
&lt;code&gt;Collections&lt;/code&gt; class.
&lt;p&gt;If the argument that is passed to an unmodifiable
  collection wrapper is already immutable, such a wrapping becomes redundant.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; x = Collections.unmodifiableList(Collections.singletonList("abc"));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; x = Collections.singletonList("abc");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to detect the methods that return unmodifiable collections, the
inspection uses the &lt;code&gt;org.jetbrains.annotations.Unmodifiable&lt;/code&gt;
and &lt;code&gt;org.jetbrains.annotations.UnmodifiableView&lt;/code&gt; annotations.
Use them to extend the inspection to your own unmodifiable collection
  wrappers.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantEmbeddedExpression" defaultSeverity="WARNING" displayName="Redundant embedded expression in string template" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant embedded expressions in &lt;code&gt;STR&lt;/code&gt; templates, such as trivial literals or empty expressions.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(STR."Hello \{"world"}");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(STR."Hello world");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;String templates&amp;#39;, which is available since Java 21-preview.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2023.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantTypeArguments" defaultSeverity="WARNING" displayName="Redundant type arguments" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to parametrized methods with explicit argument types
that can be omitted since they will be unambiguously inferred by the compiler.
&lt;p&gt;
  Using redundant type arguments is unnecessary and makes the code less readable.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; list = Arrays.&amp;lt;String&amp;gt;asList("Hello", "World");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is provided to remove redundant type arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; list = Arrays.asList("Hello", "World");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SimplifyStreamApiCallChains" defaultSeverity="WARNING" displayName="Stream API call chain can be simplified" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports stream API call chains that can be simplified.
Simplification will often avoid some temporary object creation during collection traversal.
&lt;p&gt;
  The inspection replaces the following call chains:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;collection.stream().forEach()&lt;/code&gt; &amp;rarr; &lt;code&gt;collection.forEach()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;collection.stream().collect(toList/toSet/toCollection())&lt;/code&gt; &amp;rarr; &lt;code&gt;new CollectionType&amp;lt;&amp;gt;(collection)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;collection.stream().toArray()&lt;/code&gt; &amp;rarr; &lt;code&gt;collection.toArray()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Arrays.asList().stream()&lt;/code&gt; &amp;rarr; &lt;code&gt;Arrays.stream()&lt;/code&gt; or &lt;code&gt;Stream.of()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;IntStream.range(0, array.length).mapToObj(idx -&gt; array[idx])&lt;/code&gt; &amp;rarr; &lt;code&gt;Arrays.stream(array)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;IntStream.range(0, list.size()).mapToObj(idx -&gt; list.get(idx))&lt;/code&gt; &amp;rarr; &lt;code&gt;list.stream()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Collections.singleton().stream()&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.of()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Collections.emptyList().stream()&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.empty()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.filter().findFirst().isPresent()&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.anyMatch()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(counting())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.count()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(maxBy())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.max()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(mapping())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.map().collect()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(reducing())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.reduce()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.collect(summingInt())&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.mapToInt().sum()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.mapToObj(x -&gt; x)&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.boxed()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.map(x -&gt; {...; return x;})&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.peek(x -&gt; ...)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;!stream.anyMatch()&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.noneMatch()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;!stream.anyMatch(x -&gt; !(...))&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.allMatch()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.map().anyMatch(Boolean::booleanValue)&lt;/code&gt; &amp;rarr; &lt;code&gt;stream.anyMatch()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;IntStream.range(expr1, expr2).mapToObj(x -&gt; array[x])&lt;/code&gt; &amp;rarr; &lt;code&gt;Arrays.stream(array, expr1, expr2)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Collection.nCopies(count, ...)&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.generate().limit(count)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;stream.sorted(comparator).findFirst()&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.min(comparator)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;optional.orElseGet(() -&gt; { throw new ...; })&lt;/code&gt; &amp;rarr; &lt;code&gt;optional.orElseThrow()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Note that the replacement semantics may have minor differences in some cases. For example,
  &lt;code&gt;Collections.synchronizedList(...).stream().forEach()&lt;/code&gt; is not synchronized while
  &lt;code&gt;Collections.synchronizedList(...).forEach()&lt;/code&gt; is synchronized.
  Also, &lt;code&gt;collect(Collectors.maxBy())&lt;/code&gt; returns an empty &lt;code&gt;Optional&lt;/code&gt; if the resulting element is
  &lt;code&gt;null&lt;/code&gt; while &lt;code&gt;Stream.max()&lt;/code&gt; throws &lt;code&gt;NullPointerException&lt;/code&gt; in this case.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantComparatorComparing" defaultSeverity="WARNING" displayName="Comparator method can be simplified" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Comparator&lt;/code&gt; combinator constructs that can be simplified.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  c.thenComparing(Comparator.comparing(function));

  Comparator.comparing(Map.Entry::getKey);

  Collections.max(list, Comparator.reverseOrder());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fixes are applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  c.thenComparing(function)

  Map.Entry.comparingByKey()

  Collections.min(list, Comparator.naturalOrder());
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExcessiveRangeCheck" defaultSeverity="WARNING" displayName="Excessive range check" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports condition chains in which a value range is checked and these condition chains can be simplified to a single check.
&lt;p&gt;The quick-fix replaces a condition chain with a simplified expression:&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  x &gt; 2 &amp;&amp; x &amp;lt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  x == 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  arr.length == 0 || arr.length &gt; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  arr.length != 1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ManualMinMaxCalculation" defaultSeverity="WARNING" displayName="Manual min/max calculation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases where the minimum or the maximum of two numbers can be calculated using
a &lt;code&gt;Math.max()&lt;/code&gt; or &lt;code&gt;Math.min()&lt;/code&gt; call, instead of doing it manually.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public int min(int a, int b) {
    return b &amp;lt; a ? b : a;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public int min(int a, int b) {
    return Math.min(a, b);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Disable for float and double&lt;/b&gt; option to disable this inspection for &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; types.
  This is useful because the quick-fix may slightly change the semantics for &lt;code&gt;float&lt;/code&gt;/
  &lt;code&gt;double&lt;/code&gt; types when handling &lt;code&gt;NaN&lt;/code&gt;. Nevertheless, in most cases this will actually fix
  a subtle bug where &lt;code&gt;NaN&lt;/code&gt; is not taken into account.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateExpressions" defaultSeverity="WEAK WARNING" displayName="Multiple occurrences of the same expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer)
if the result of the expression can be reused.
&lt;p&gt;
  The expression is reported if it's free of side effects and its result is always the same (in terms of &lt;code&gt;Object.equals()&lt;/code&gt;).
  The examples of such expressions are &lt;code&gt;a + b&lt;/code&gt;, &lt;code&gt;Math.max(a, b)&lt;/code&gt;, &lt;code&gt;a.equals(b)&lt;/code&gt;,
  &lt;code&gt;s.substring(a,b)&lt;/code&gt;. To make sure the result is always the same, it's verified that the variables used in the expression don't
  change their values between the occurrences of the expression.&lt;/p&gt;
&lt;p&gt;
  Such expressions may contain methods of immutable classes like &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;BigDecimal&lt;/code&gt;, and so on,
  and of utility classes like &lt;code&gt;Objects&lt;/code&gt;, &lt;code&gt;Math&lt;/code&gt; (except &lt;code&gt;random()&lt;/code&gt;).
  The well-known methods, such as &lt;code&gt;Object.equals()&lt;/code&gt;, &lt;code&gt;Object.hashCode()&lt;/code&gt;, &lt;code&gt;Object.toString()&lt;/code&gt;,
  &lt;code&gt;Comparable.compareTo()&lt;/code&gt;, and &lt;code&gt;Comparator.compare()&lt;/code&gt; are OK as well because they normally don't have
  any observable side effects.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Expression complexity threshold&lt;/b&gt; option to specify the minimal expression complexity threshold. Specifying bigger
  numbers will remove reports on short expressions.
&lt;/p&gt;
&lt;p&gt;
  &lt;code&gt;Path.of&lt;/code&gt; and &lt;code&gt;Paths.get&lt;/code&gt; calls are treated as equivalent calls if they have the same arguments. These calls
  are always reported no matter how complex their arguments are. This behaviour can be tweaked using different complexity threshold.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2018.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateBranchesInSwitch" defaultSeverity="WEAK WARNING" displayName="Duplicate branches in 'switch'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements or expressions that contain the same code in different branches
and suggests merging the duplicate branches.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;switch&lt;/b&gt; (n) {
    &lt;b&gt;case&lt;/b&gt; 1:
      System.out.println(n);
      &lt;b&gt;break&lt;/b&gt;;
    &lt;b&gt;case&lt;/b&gt; 2:
      System.out.println(n);
      &lt;b&gt;break&lt;/b&gt;;
    &lt;b&gt;default&lt;/b&gt;:
      System.out.println("default");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;switch&lt;/b&gt; (n) {
    &lt;b&gt;case&lt;/b&gt; 1:
    &lt;b&gt;case&lt;/b&gt; 2:
      System.out.println(n);
      &lt;b&gt;break&lt;/b&gt;;
    &lt;b&gt;default&lt;/b&gt;:
      System.out.println("default");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryContinue" defaultSeverity="WARNING" displayName="Unnecessary 'continue' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;continue&lt;/code&gt; statements if they are the last reachable statements in the loop.
These &lt;code&gt;continue&lt;/code&gt; statements are unnecessary and can be safely removed.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (String element: elements) {
    System.out.println();
    continue;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (String element: elements) {
    System.out.println();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The inspection doesn't analyze JSP files.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore in then branch of 'if' statement with 'else' branch&lt;/b&gt; option to ignore
  &lt;code&gt;continue&lt;/code&gt; statements when they are placed in a &lt;code&gt;then&lt;/code&gt; branch of a complete
  &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; statement.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (String element: elements) {
    if(element.isEmpty()) {
      continue;
    } else {
      //...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialStringConcatenation" defaultSeverity="WARNING" displayName="Concatenation with empty string" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty string operands in string concatenations.
Concatenation with the empty string can be used to convert
non-&lt;code&gt;String&lt;/code&gt; objects or primitives into &lt;code&gt;String&lt;/code&gt;s,
but it can be clearer to use a &lt;code&gt;String.valueOf()&lt;/code&gt; method call.
&lt;p&gt;
  A quick-fix is suggested to simplify the concatenation.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(int x, int y) {
    String s = "" + x + " ; " + y;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(int x, int y) {
    String s = x + " ; " + y;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Report only where empty strings can be removed without other changes&lt;/b&gt;
  option to ignore cases cases where removing the empty string
  will require adding a &lt;code&gt;String.valueOf()&lt;/code&gt; conversion of another operand.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MappingBeforeCount" defaultSeverity="WARNING" displayName="Mapping call before count()" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;Stream&lt;/code&gt; API calls like &lt;code&gt;map()&lt;/code&gt;, or &lt;code&gt;boxed()&lt;/code&gt;
right before the &lt;code&gt;count()&lt;/code&gt; call.
&lt;p&gt;
  Such calls don't change the final count, so could be removed. It's possible that the code relies on
  a side effect from the lambda inside such a mapping call. However, relying on side effects inside
  the stream chain is extremely bad practice. There are no guarantees that the call will not be 
  optimized out in future Java versions.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // map() call is redundant
  long count = list.stream().filter(s -&gt; !s.isEmpty()).map(s -&gt; s.trim()).count();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2024.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryReturn" defaultSeverity="WARNING" displayName="Unnecessary 'return' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;return&lt;/code&gt; statements at the end of constructors and methods returning
&lt;code&gt;void&lt;/code&gt;. These statements are redundant and may be safely removed.
&lt;p&gt;This inspection does not report in JSP files.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; message() {
    System.out.println("Hello World");
    &lt;b&gt;return&lt;/b&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; message() {
    System.out.println("Hello World");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore in then branch of 'if' statement with 'else' branch&lt;/b&gt; option to ignore &lt;code&gt;return&lt;/code&gt; statements in the then branch of &lt;code&gt;if&lt;/code&gt; statements
which also have an &lt;code&gt;else&lt;/code&gt; branch.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Proofreading" path=""><inspection shortName="GrazieInspection" defaultSeverity="GRAMMAR_ERROR" displayName="Grammar" enabled="true" language="" pluginId="tanvd.grazi" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;
Reports grammar mistakes in your text. You can configure the inspection in
&lt;a href="settings://reference.settingsdialog.project.grazie"&gt;Settings | Editor | Natural Languages | Grammar and Style&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="SpellCheckingInspection" defaultSeverity="TYPO" displayName="Typo" enabled="true" language="" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;&lt;body&gt;Reports typos and misspellings in your code, comments, and literals and fixes them with one click.&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="AiaStyle" defaultSeverity="TYPO" displayName="Style" enabled="true" language="" pluginId="com.intellij.ml.llm" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Check the writing style defined in:
&lt;ul&gt;
    &lt;li&gt;
        Grazie rule files (e.g. &lt;code&gt;.grazie.en.yaml&lt;/code&gt; for English)
        for this project or its specific subdirectories.
        To create such a file, invoke &lt;b&gt;New&lt;/b&gt; menu on any (e.g. root) directory of the project.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;i&gt;Style&lt;/i&gt; rules in &lt;i&gt;Editor | Natural languages | Rules&lt;/i&gt; settings
    &lt;/li&gt;
&lt;/ul&gt;

This inspection only returns results via &lt;b&gt;Code | Analyze Code | Run Inspection By Name...&lt;/b&gt; or in offline analysis.
Editor highlighting of style issues is performed independently of this inspection's settings.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LanguageDetectionInspection" defaultSeverity="WEAK WARNING" displayName="Natural language detection" enabled="true" language="" pluginId="tanvd.grazi" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;Detects natural languages and suggests enabling corresponding grammar and spelling checks.&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection></group><group name="Performance" path="Java"><inspection shortName="CallToSimpleGetterInClass" defaultSeverity="WARNING" displayName="Call to simple getter from within class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to a simple property getter from within the property's class.
&lt;p&gt;
  A simple property getter is defined as one which simply returns the value of a field,
  and does no other calculations. Such simple getter calls can be safely inlined using the quick-fix.
  Some coding standards also suggest against the use of simple getters for code clarity reasons.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Salient {
    private String name;

    public String getName() {
      return name;
    }

    @Override
    public String toString() {
      return getName();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Salient {
    private String name;

    public String getName() {
      return name;
    }

    @Override
    public String toString() {
      return name;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the following options to configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Whether to only report getter calls on &lt;code&gt;this&lt;/code&gt;, not on objects of the same type passed in as a parameter.&lt;/li&gt;
  &lt;li&gt;Whether to ignore non-&lt;code&gt;private&lt;/code&gt; getters.&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LengthOneStringsInConcatenation" defaultSeverity="INFORMATION" displayName="Single character string concatenation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports concatenation with string literals that consist of one character.
&lt;p&gt;These literals may be replaced with equivalent character literals, gaining some performance enhancement.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String hello = hell + "o";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String hello = hell + 'o';
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectInstantiationInEqualsHashCode" defaultSeverity="WARNING" displayName="Object instantiation inside 'equals()' or 'hashCode()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports construction of (temporary) new objects inside &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt;, &lt;code&gt;compareTo()&lt;/code&gt;, and
&lt;code&gt;Comparator.compare()&lt;/code&gt; methods.
&lt;p&gt;
  Besides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a
  &lt;code&gt;foreach&lt;/code&gt; statement.
  This can cause performance problems, for example, when objects are added to a &lt;code&gt;Set&lt;/code&gt; or &lt;code&gt;Map&lt;/code&gt;,
  where these methods will be called often.
&lt;/p&gt;
&lt;p&gt;
  The inspection will not report when the objects are created in a &lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;assert&lt;/code&gt; statement.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Person {
    private String name;
    private int age;

    public boolean equals(Object o) {
      return Arrays.equals(new Object[] {name, age}, new Object[] {((Foo)o).name, ((Foo)o).age});
    }

    public int hashCode() {
      return (name + age).hashCode();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  In this example, two additional arrays are created inside &lt;code&gt;equals()&lt;/code&gt;, usages of &lt;code&gt;age&lt;/code&gt; field require boxing,
  and &lt;code&gt;name + age&lt;/code&gt; implicitly creates a new string.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CollectionsMustHaveInitialCapacity" defaultSeverity="WARNING" displayName="Collection without initial capacity" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attempts to instantiate a new &lt;code&gt;Collection&lt;/code&gt; object without specifying
an initial capacity.
&lt;p&gt;
  If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing
  to specify initial capacities for collections may result in performance issues if space needs to be reallocated and
  memory copied when the initial capacity is exceeded.
  This inspection checks allocations of classes listed in the inspection's settings.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new HashMap&amp;lt;String, String&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the following options to configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;List collection classes that should be checked.&lt;/li&gt;
  &lt;li&gt;Whether to ignore field initializers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AutoBoxing" defaultSeverity="WARNING" displayName="Auto-boxing" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions that are affected by autoboxing conversion (automatic wrapping of primitive values as objects).
Try not to use objects instead of primitives. It might significantly affect performance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Integer x = 42;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix makes the conversion explicit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Integer x = Integer.valueOf(42);&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;i&gt;AutoBoxing&lt;/i&gt; appeared in Java 5.
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TailRecursion" defaultSeverity="INFORMATION" displayName="Tail recursion" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports tail recursion, that is, when a method calls itself as its last action before returning.
&lt;p&gt;
  Tail recursion can always be replaced by looping, which will be considerably faster.
  Some JVMs perform tail-call optimization, while others do not. Thus, tail-recursive solutions may have considerably different
  performance characteristics on different virtual machines.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int factorial(int val, int runningVal) {
    if (val == 1) {
      return runningVal;
    } else {
      return factorial(val - 1, runningVal * val);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int factorial(int val, int runningVal) {
    while (true) {
      if (val == 1) {
        return runningVal;
      } else {
        runningVal = runningVal * val;
        val = val - 1;
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallToSimpleSetterInClass" defaultSeverity="WARNING" displayName="Call to simple setter from within class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to a simple property setter from within the property's class.
&lt;p&gt;
  A simple property setter is defined as one which simply assigns the value of its parameter to a field,
  and does no other calculations. Such simple setter calls can be safely inlined.
  Some coding standards also suggest against the use of simple setters for code clarity reasons.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
  private int index;
    public Foo(int idx) {
       setIndex(idx);
    }
    public void setIndex(int idx) {
       index = idx;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    private int index;
    public Foo(int idx) {
      index = idx;
    }
    public void setIndex(int idx) {
      index = idx;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the following options to configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Whether to only report setter calls on &lt;code&gt;this&lt;/code&gt;, not on objects of the same type passed in as a parameter.&lt;/li&gt;
  &lt;li&gt;Whether to ignore non-&lt;code&gt;private&lt;/code&gt; setters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WrapperTypeMayBePrimitive" defaultSeverity="WARNING" displayName="Wrapper type may be primitive" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables of wrapper type that are mostly used as primitive types.
&lt;p&gt;In some cases, boxing can be source of significant performance penalty, especially in loops.&lt;/p&gt;
&lt;p&gt;Heuristics are applied to estimate the number of boxing operations. For example, conversions inside loops are considered
  as much more numerous.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public void example() {
    Integer value = 12;
    needBox(value);
    for (int i = 0; i &amp;lt; 10; i++) {
      // Loop usages considered as happening more often
      needPrimitive(value);
    }
  }

  void needPrimitive(int value) {}
  void needBox(Integer value) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public void example() {
    int value = 12;
    needBox(value);
    for (int i = 0; i &amp;lt; 10; i++) {
      // Loop usages considered as happening more often
      needPrimitive(value);
    }
  }

  void needPrimitive(int value) {}
  void needBox(Integer value) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2018.2&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CollectionAddAllCanBeReplacedWithConstructor" defaultSeverity="WARNING" displayName="Redundant 'Collection.addAll()' call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Collection.addAll()&lt;/code&gt; and &lt;code&gt;Map.putAll()&lt;/code&gt; calls immediately after an instantiation of a collection using a no-arg constructor.
&lt;p&gt;Such constructs can be replaced with a single call to a parametrized constructor, which simplifies the code. Also, for some collections the replacement
  might be more performant.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Set&amp;lt;String&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
  set.addAll(Arrays.asList("alpha", "beta", "gamma"));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Set&amp;lt;String&amp;gt; set = new HashSet&amp;lt;&amp;gt;(Arrays.asList("alpha", "beta", "gamma"));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The JDK collection classes are supported by default.
  Additionally, you can specify other classes using the &lt;b&gt;Classes to check&lt;/b&gt; panel.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstantiatingObjectToGetClassObject" defaultSeverity="WARNING" displayName="Instantiating object to get 'Class' object" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that instantiates a class to get its class object.
&lt;p&gt;It is more performant to access the class object
  directly by name.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Class&amp;lt;?&amp;gt; c = new Sample().getClass();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Class&amp;lt;?&amp;gt; c = Sample.class;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceInefficientStreamCount" defaultSeverity="WARNING" displayName="Inefficient Stream API call chains ending with count()" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Stream API call chains ending with a &lt;code&gt;count()&lt;/code&gt; operation, that are optimizable.
&lt;p&gt;
  The following call chains can be replaced by this inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Collection.stream().count()&lt;/code&gt; &amp;rarr; &lt;code&gt;Collection.size()&lt;/code&gt;. In Java 8 &lt;code&gt;Collection.stream().count()&lt;/code&gt;
    actually iterates over the collection elements to count them, while &lt;code&gt;Collection.size()&lt;/code&gt; is much faster for most of the collections.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Stream.flatMap(Collection::stream).count()&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.mapToLong(Collection::size).sum()&lt;/code&gt;. Similarly,
    there's no need to iterate over all the nested collections. Instead, their sizes could be summed up.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Stream.filter(o -&gt; ...).count() &gt; 0&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.anyMatch(o -&gt; ...)&lt;/code&gt;. Unlike the original call,
    &lt;code&gt;anyMatch()&lt;/code&gt; may stop the computation as soon as a matching element is found.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Stream.filter(o -&gt; ...).count() == 0&lt;/code&gt; &amp;rarr; &lt;code&gt;Stream.noneMatch(o -&gt; ...)&lt;/code&gt;. Similar to the above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Note that if the replacement involves a short-circuiting operation like &lt;code&gt;anyMatch()&lt;/code&gt;, there could be a visible behavior change,
  if the intermediate stream operations produce side effects. In general, side effects should be avoided in Stream API calls.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectAllocationInLoop" defaultSeverity="WARNING" displayName="Object allocation in loop" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports object or array allocations inside loops. While not
necessarily a problem, an object allocation inside a loop is a great place to look for memory leaks
and performance issues.
&lt;p&gt;
  The inspection reports the following constructs:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Explicit allocations via &lt;code&gt;new&lt;/code&gt; operator&lt;/li&gt;
  &lt;li&gt;Methods known to return new object&lt;/li&gt;
  &lt;li&gt;Instance-bound method references&lt;/li&gt;
  &lt;li&gt;Lambdas that capture variables or &lt;code&gt;this&lt;/code&gt; reference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Explicit allocation
  for (Status status : Status.values()) {
    declarationsMap.put(status, new ArrayList&amp;lt;&amp;gt;());
  }

  // Lambda captures variable
  String message = "Engine running.";
  for (Engine engine : engines) {
      if (!isRunning(engine)) {
          logger.warn(() -&gt; {
              return String.format(message);
          });
      }
  }

  // Instance-bound method reference
  for(Node node : nodes) {
    descriptor = node.getDescription();
    descriptor.ifPresent(dynamicTestExecutor::execute);
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringReplaceableByStringBuffer" defaultSeverity="WARNING" displayName="Non-constant 'String' can be replaced with 'StringBuilder'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables declared as &lt;code&gt;java.lang.String&lt;/code&gt; that are
repeatedly appended to. Such variables could be declared more efficiently as &lt;code&gt;java.lang.StringBuffer&lt;/code&gt;
or &lt;code&gt;java.lang.StringBuilder&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = "";
  for (int i = 0; i &amp;lt; names.length; i++) {
    String name = names[i] + (i == names.length - 1 ? "" : " ");
    s = s + name;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Such a loop can be replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  StringBuilder s = new StringBuilder();
  for (int i = 0; i &amp;lt; names.length; i++) {
    String name = names[i] + (i == names.length - 1 ? "" : " ");
    s.append(name);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or even with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String s = String.join(" ", names);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to make this inspection only report when the variable is appended to in a loop.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SlowAbstractSetRemoveAll" defaultSeverity="WARNING" displayName="Call to 'set.removeAll(list)' may work slowly" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.util.Set.removeAll()&lt;/code&gt; with a &lt;code&gt;java.util.List&lt;/code&gt; argument.
&lt;p&gt;
  Such a call can be slow when the size of the argument is greater than or equal to the size of the set,
  and the set is a subclass of &lt;code&gt;java.util.AbstractSet&lt;/code&gt;.
  In this case, &lt;code&gt;List.contains()&lt;/code&gt; is called for each element in the set, which will perform a linear search.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public void check(String... ss) {
    // possible O(n^2) complexity
    mySet.removeAll(List.of(ss));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public void check(String... ss) {
    // O(n) complexity
    List.of(ss).forEach(mySet::remove);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MapReplaceableByEnumMap" defaultSeverity="WARNING" displayName="'Map' can be replaced with 'EnumMap'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiations of &lt;code&gt;java.util.Map&lt;/code&gt; objects
whose key types are enumerated classes. Such &lt;code&gt;java.util.Map&lt;/code&gt; objects
can be replaced with &lt;code&gt;java.util.EnumMap&lt;/code&gt; objects.
&lt;p&gt;
  &lt;code&gt;java.util.EnumMap&lt;/code&gt; implementations can be much more efficient
  because the underlying data structure is a simple array.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Map&amp;lt;MyEnum, String&amp;gt; myEnums = new HashMap&amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Map&amp;lt;MyEnum, String&amp;gt; myEnums = new EnumMap&amp;lt;&amp;gt;(MyEnum.class);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KeySetIterationMayUseEntrySet" defaultSeverity="WARNING" displayName="Iteration over 'keySet()' can be optimized" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports iterations over the &lt;code&gt;keySet()&lt;/code&gt; of a &lt;code&gt;java.util.Map&lt;/code&gt; instance,
where the iterated keys are used to retrieve the values from the map.
&lt;p&gt;
  Such iteration may be more efficient when replaced with an iteration over the
  &lt;code&gt;entrySet()&lt;/code&gt; or &lt;code&gt;values()&lt;/code&gt; (if the key is not actually used).
&lt;/p&gt;
&lt;p&gt;
  Similarly, &lt;code&gt;keySet().forEach(key -&amp;gt; ...)&lt;/code&gt;
  can be replaced with &lt;code&gt;forEach((key, value) -&amp;gt; ...)&lt;/code&gt; if values are retrieved
  inside a lambda.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (Object key : map.keySet()) {
   Object val = map.get(key);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (Object val : map.values()) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="BooleanConstructor" defaultSeverity="WARNING" displayName="Boolean constructor call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports creation of &lt;code&gt;Boolean&lt;/code&gt; objects.
&lt;p&gt;
  Constructing new &lt;code&gt;Boolean&lt;/code&gt; objects is rarely necessary,
  and may cause performance problems if done often enough. Also, &lt;code&gt;Boolean&lt;/code&gt;
  constructors are deprecated since Java 9 and could be removed or made
  inaccessible in future Java versions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Boolean b1 = new Boolean(true);
  Boolean b2 = new Boolean(str);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Boolean b1 = Boolean.TRUE;
  Boolean b2 = Boolean.valueOf(str);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ManualArrayCopy" defaultSeverity="WARNING" displayName="Manual array copy" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports manual copying of array contents that can be replaced with a call to &lt;code&gt;System.arraycopy()&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (int i = 0; i &amp;lt; array.length; i++) {
    newArray[i] = array[i];
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.arraycopy(array, 0, newArray, 0, array.length);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldMayBeStatic" defaultSeverity="WARNING" displayName="Field can be made 'static'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instance variables that can safely be made &lt;code&gt;static&lt;/code&gt;. A field
can be static if it is declared &lt;code&gt;final&lt;/code&gt; and initialized with a constant.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public final String str = "sample";
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection does not report final fields that can be implicitly written. Use the "Annotations" button to modify 
  the list of annotations that assume implicit field write.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LengthOneStringInIndexOf" defaultSeverity="WARNING" displayName="Single character string argument in 'String.indexOf()' call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports single character strings being used as an argument in &lt;code&gt;String.indexOf()&lt;/code&gt; and
&lt;code&gt;String.lastIndexOf()&lt;/code&gt; calls.
&lt;p&gt;A quick-fix is suggested to replace such string literals with equivalent character literals, gaining some performance enhancement.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return s.indexOf("x");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  return s.indexOf('x');
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringEqualsEmptyString" defaultSeverity="WARNING" displayName="'String.equals()' can be replaced with 'String.isEmpty()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;equals()&lt;/code&gt; being called to compare a &lt;code&gt;String&lt;/code&gt; with an empty string.
In this case, using &lt;code&gt;.isEmpty()&lt;/code&gt; is better as it shows you exactly what you're checking.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void checkString(String s){
    if ("".equals(s)) throw new IllegalArgumentException();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void checkString(String s){
    if (s != null &amp;&amp; s.isEmpty()) throw new IllegalArgumentException();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;code&gt;"".equals(str)&lt;/code&gt; returns false when &lt;code&gt;str&lt;/code&gt; is null. For safety, this inspection's quick-fix inserts an explicit
  null-check when
  the &lt;code&gt;equals()&lt;/code&gt; argument is nullable. Use the option to make the inspection ignore such cases.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectEqualsCanBeEquality" defaultSeverity="INFORMATION" displayName="'equals()' call can be replaced with '=='" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;equals()&lt;/code&gt; that can be replaced by &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; expressions without a change in semantics.
&lt;p&gt;These calls can be replaced when they are used to compare &lt;code&gt;final&lt;/code&gt; classes that don't have their own &lt;code&gt;equals()&lt;/code&gt; implementation but use the default &lt;code&gt;Object.equals()&lt;/code&gt;.
This replacement may result in better performance.&lt;/p&gt;
&lt;p&gt;There is a separate inspection for &lt;code&gt;equals()&lt;/code&gt; calls on &lt;code&gt;enum&lt;/code&gt; values: 'equals()' called on Enum value.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;!--&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;--&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ManualArrayToCollectionCopy" defaultSeverity="WARNING" displayName="Manual array to collection copy" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that uses a loop to copy the contents of an array into a collection.
&lt;p&gt;
  A shorter and potentially faster (depending on the collection implementation) way to do this is using &lt;code&gt;Collection.addAll(Arrays.asList())&lt;/code&gt; or &lt;code&gt;Collections.addAll()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;Only loops without additional statements inside are reported.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void addAll(List&amp;lt;String&amp;gt; list, String[] arr) {
    for (int i = 0; i &amp;lt; arr.length; i++) {
      String s = arr[i];
      list.add(s);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void addAll(List&amp;lt;String&amp;gt; list, String[] arr) {
    Collections.addAll(list, arr);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExplicitArgumentCanBeLambda" defaultSeverity="INFORMATION" displayName="Explicit argument can be lambda" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method calls that accept a non-trivial expression and can be replaced with an equivalent method call
which accepts a lambda instead.
&lt;p&gt;
Converting an expression to a lambda ensures that the expression won't be evaluated
if it's not used inside the method. For example, &lt;code&gt;optional.orElse(createDefaultValue())&lt;/code&gt; can be converted
to &lt;code&gt;optional.orElseGet(this::createDefaultValue)&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BoxingBoxedValue" defaultSeverity="WARNING" displayName="Boxing of already boxed value" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports boxing of already boxed values.
&lt;p&gt;
  This is a redundant
  operation since any boxed value will first be auto-unboxed before boxing the
  value again. If done inside an inner loop, such code may cause performance
  problems.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Integer value = 1;
  method(Integer.valueOf(value));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Integer value = 1;
  method(value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AutoUnboxing" defaultSeverity="WARNING" displayName="Auto-unboxing" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions that are affected by unboxing conversion (automatic unwrapping of objects into primitive values).
Try not to use objects instead of primitives. It might significantly affect the performance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int x = new Integer(42);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix makes the conversion explicit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int x = new Integer(42).intValue();&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;i&gt;AutoUnboxing&lt;/i&gt; appeared in Java 5.
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SetReplaceableByEnumSet" defaultSeverity="WARNING" displayName="'Set' can be replaced with 'EnumSet'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiations of &lt;code&gt;java.util.Set&lt;/code&gt; objects whose content types are enumerated classes. Such &lt;code&gt;Set&lt;/code&gt; objects
can be replaced with &lt;code&gt;java.util.EnumSet&lt;/code&gt; objects.
&lt;p&gt;
  &lt;code&gt;EnumSet&lt;/code&gt; implementations can be much more efficient compared to
  other sets, as the underlying data structure is a bit vector. Use the quick-fix to replace the initializer with a call to
  &lt;code&gt;EnumSet.noneOf()&lt;/code&gt;. This quick-fix is not available when the type of the variable is a sub-class of &lt;code&gt;Set&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum MyEnum { FOO, BAR; }

  Set&amp;lt;MyEnum&amp;gt; enums = new HashSet&amp;lt;MyEnum&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum MyEnum { FOO, BAR; }

  Set&amp;lt;MyEnum&amp;gt; enums = EnumSet.noneOf(MyEnum.class);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArraysAsListWithZeroOrOneArgument" defaultSeverity="WARNING" displayName="Call to 'Arrays.asList()' with too few arguments" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Arrays.asList()&lt;/code&gt; with at most one argument.
&lt;p&gt;
  Such calls could be replaced
  with &lt;code&gt;Collections.singletonList()&lt;/code&gt;, &lt;code&gt;Collections.emptyList()&lt;/code&gt;,
  or &lt;code&gt;List.of()&lt;/code&gt; on JDK 9 and later, which will save some memory.&lt;/p&gt;
&lt;p&gt;In particular, &lt;code&gt;Collections.emptyList()&lt;/code&gt; and &lt;code&gt;List.of()&lt;/code&gt; with no arguments
  always return a shared instance,
  while &lt;code&gt;Arrays.asList()&lt;/code&gt; with no arguments creates a new object every time it's called.&lt;/p&gt;
&lt;p&gt;Note: the lists returned by &lt;code&gt;Collections.singletonList()&lt;/code&gt; and &lt;code&gt;List.of()&lt;/code&gt; are immutable,
while the list returned &lt;code&gt;Arrays.asList()&lt;/code&gt; allows calling the &lt;code&gt;set()&lt;/code&gt; method.
This may break the code in rare cases.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; empty = Arrays.asList();
  List&amp;lt;String&amp;gt; one = Arrays.asList("one");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;String&amp;gt; empty = Collections.emptyList();
  List&amp;lt;String&amp;gt; one = Collections.singletonList("one");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringBufferMustHaveInitialCapacity" defaultSeverity="WARNING" displayName="'StringBuilder' without initial capacity" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attempts to instantiate a new &lt;code&gt;StringBuffer&lt;/code&gt; or
&lt;code&gt;StringBuilder&lt;/code&gt; object without specifying its initial capacity.
&lt;p&gt;
  If no initial capacity is specified, a default capacity is used, which will rarely be optimal.
  Failing to specify the initial capacity for &lt;code&gt;StringBuffer&lt;/code&gt; may result
  in performance issues if space needs to be reallocated and memory copied
  when the initial capacity is exceeded.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Capacity is not specified
  var sb = new StringBuilder();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ToArrayCallWithZeroLengthArrayArgument" defaultSeverity="WARNING" displayName="'Collection.toArray()' call style" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Collection.toArray()&lt;/code&gt; calls that are not in the preferred style, and suggests applying the preferred style.
&lt;p&gt;There are two styles to convert a collection to an array:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A pre-sized array, for example, &lt;code&gt;c.toArray(new String[c.size()])&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;An empty array, for example,  &lt;code&gt;c.toArray(new String[0])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In older Java versions, using a pre-sized array was recommended, as the reflection
  call necessary to create an array of proper size was quite slow.&lt;/p&gt;
&lt;p&gt;However, since late updates of OpenJDK 6, this call was intrinsified, making
  the performance of the empty array version the same, and sometimes even better, compared
  to the pre-sized version. Also, passing a pre-sized array is dangerous for a concurrent or
  synchronized collection as a data race is possible between the &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;toArray&lt;/code&gt;
  calls. This may result in extra &lt;code&gt;null&lt;/code&gt;s at the end of the array if the collection was concurrently
  shrunk during the operation.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the inspection options to select the preferred style.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ListRemoveInLoop" defaultSeverity="WARNING" displayName="'List.remove()' called in loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;List.remove(index)&lt;/code&gt; called in a loop that can be replaced with &lt;code&gt;List.subList().clear()&lt;/code&gt;.
&lt;p&gt;The replacement
  is more efficient for most &lt;code&gt;List&lt;/code&gt; implementations when many elements are deleted.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void removeRange(List&amp;lt;String&amp;gt; list, int from, int to) {
    for (int i = from; i &amp;lt; to; i++) {
        list.remove(from);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void removeRange(List&amp;lt;String&amp;gt; list, int from, int to) {
    if (to &amp;gt; from) {
      list.subList(from, to).clear();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  The quick-fix adds a range check automatically to prevent a possible &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; when the minimal value is bigger
  than the maximal value. It can be removed if such a situation is impossible in your code.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseBulkOperation" defaultSeverity="WARNING" displayName="Bulk operation can be used instead of iteration" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports single operations inside loops that could be replaced with a bulk method.
&lt;p&gt;
  Not only are bulk methods shorter, but in some cases they may be more performant as well.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  void test(Collection&amp;lt;Integer&amp;gt; numbers) {
    List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&gt;();
    for (Integer i : numbers) {
      result.add(i);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(Collection&amp;lt;Integer&amp;gt; numbers) {
    List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&gt;();
    result.addAll(numbers);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The &lt;b&gt;Use Arrays.asList() to wrap arrays&lt;/b&gt; option allows to report arrays, even if the bulk method requires a collection.
  In this case the quick-fix will automatically wrap the array in &lt;code&gt;Arrays.asList()&lt;/code&gt; call.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryTemporaryOnConversionToString" defaultSeverity="WARNING" displayName="Unnecessary temporary object in conversion to 'String'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary creation of temporary objects when converting
from a primitive type to &lt;code&gt;String&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String foo = new Integer(3).toString();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String foo = Integer.toString(3);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringConcatenationInsideStringBufferAppend" defaultSeverity="WARNING" displayName="String concatenation as argument to 'StringBuilder.append()' call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;String&lt;/code&gt; concatenation used as the argument to &lt;code&gt;StringBuffer.append()&lt;/code&gt;,
&lt;code&gt;StringBuilder.append()&lt;/code&gt; or &lt;code&gt;Appendable.append()&lt;/code&gt;.
&lt;p&gt;
  Such calls may profitably be turned into chained append calls on the existing &lt;code&gt;StringBuffer/Builder/Appendable&lt;/code&gt;
  saving the cost of an extra &lt;code&gt;StringBuffer/Builder&lt;/code&gt; allocation.
  This inspection ignores compile-time evaluated &lt;code&gt;String&lt;/code&gt; concatenations, in which case the conversion would only
  worsen performance.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void bar(StringBuilder builder, String name) {
    builder.append("Hello," + name);    //warning
    builder.append("Hello," + "world"); //no warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DynamicRegexReplaceableByCompiledPattern" defaultSeverity="WARNING" displayName="Dynamic regular expression can be replaced by compiled 'Pattern'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to the regular expression methods (such as &lt;code&gt;matches()&lt;/code&gt; or &lt;code&gt;split()&lt;/code&gt;)
of &lt;code&gt;java.lang.String&lt;/code&gt; using constant arguments.
&lt;p&gt;
  Such calls may be profitably replaced with a &lt;code&gt;private static final Pattern&lt;/code&gt; field
  so that the regular expression does not have to be compiled each time it is used.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  text.replaceAll("abc", replacement);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  private static final Pattern ABC = Pattern.compile("abc", Pattern.LITERAL);
  ABC.matcher(text).replaceAll(Matcher.quoteReplacement(replacement));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantStringFormatCall" defaultSeverity="WARNING" displayName="Redundant call to 'String.format()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to methods like &lt;code&gt;format()&lt;/code&gt; and &lt;code&gt;printf()&lt;/code&gt; that can be safely removed or simplified.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.println(String.format("Total count: %d", 42));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  System.out.printf("Total count: %d%n", 42);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SlowListContainsAll" defaultSeverity="WARNING" displayName="Call to 'list.containsAll(collection)' may have poor performance" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;containsAll()&lt;/code&gt; on &lt;code&gt;java.util.List&lt;/code&gt;.
&lt;p&gt;
  The time complexity of this method call is O(n&amp;middot;m), where n is the number of elements in the list on which
  the method is called, and m is the number of elements in the collection passed to the method as a parameter.
  When the list is large, this can be an expensive operation.
&lt;/p&gt;
&lt;p&gt;
  The quick-fix wraps the list in &lt;code&gt;new java.util.HashSet&amp;lt;&amp;gt;()&lt;/code&gt; since the time required to create
  &lt;code&gt;java.util.HashSet&lt;/code&gt; from &lt;code&gt;java.util.List&lt;/code&gt; and execute &lt;code&gt;containsAll()&lt;/code&gt; on
  &lt;code&gt;java.util.HashSet&lt;/code&gt; is O(n+m).
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public boolean check(List&amp;lt;String&amp;gt; list, Collection&amp;lt;String&amp;gt; collection) {
    // O(n&amp;middot;m) complexity
    return list.containsAll(collection);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public boolean check(List&amp;lt;String&amp;gt; list, Collection&amp;lt;String&amp;gt; collection) {
    // O(n+m) complexity
    return new HashSet&amp;lt;&amp;gt;(list).containsAll(collection);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IOStreamConstructor" defaultSeverity="WARNING" displayName="'InputStream' and 'OutputStream' can be constructed using 'Files' methods" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;new FileInputStream()&lt;/code&gt; or &lt;code&gt;new FileOutputStream()&lt;/code&gt; expressions that can be replaced
with &lt;code&gt;Files.newInputStream()&lt;/code&gt; or &lt;code&gt;Files.newOutputStream()&lt;/code&gt; calls respectively.
&lt;br&gt;
The streams created using &lt;code&gt;Files&lt;/code&gt; methods are usually more efficient than those created by stream constructors.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  InputStream is = new BufferedInputStream(new FileInputStream(file));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  InputStream is = new BufferedInputStream(Files.newInputStream(file.toPath()));
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection does not show warning if the language level 10 or higher, but the quick-fix is still available.&lt;/p&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 7 or higher.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringConcatenationInLoops" defaultSeverity="WARNING" displayName="String concatenation in loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports String concatenation in loops.
&lt;p&gt;
  As every String concatenation copies the whole
  string, usually it is preferable to replace it with explicit calls to &lt;code&gt;StringBuilder.append()&lt;/code&gt; or
  &lt;code&gt;StringBuffer.append()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String str = "";
  for(int i=0; i&amp;lt;10; i++) {
    str += i;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String str = "";
  StringBuilder strBuilder = new StringBuilder(str);
  for(int i = 0; i&amp;lt;10; i++) {
    strBuilder.append(i);
  }
  str = strBuilder.toString();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Sometimes, the quick-fixes allow you to convert a &lt;code&gt;String&lt;/code&gt; variable to a &lt;code&gt;StringBuilder&lt;/code&gt; or
  introduce a new &lt;code&gt;StringBuilder&lt;/code&gt;. Be careful if the original code specially handles the &lt;code&gt;null&lt;/code&gt; value, as the
  replacement may change semantics. If &lt;code&gt;null&lt;/code&gt; is possible, null-safe fixes that generate
  necessary null-checks are suggested. Also, it's not guaranteed that the automatic replacement will always be more performant.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryTemporaryOnConversionFromString" defaultSeverity="WARNING" displayName="Unnecessary temporary object in conversion from 'String'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary creation of temporary objects when converting
from &lt;code&gt;String&lt;/code&gt; to primitive types.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new Integer("3").intValue()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Integer.valueOf("3")
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfStatementMissingBreakInLoop" defaultSeverity="WARNING" displayName="Early loop exit in 'if' condition" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports loops with an &lt;code&gt;if&lt;/code&gt; statement that can end with &lt;code&gt;break&lt;/code&gt; without changing the semantics.
This prevents redundant loop iterations.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean found = false;
  for (int i = 0; i &amp;lt; arr.length; i++) {
    if (Objects.equals(value, arr[i])) {
      found = true;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean found = false;
  for (int i = 0; i &amp;lt; arr.length; i++) {
    if (Objects.equals(value, arr[i])) {
      found = true;
      break;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RandomDoubleForRandomInteger" defaultSeverity="WARNING" displayName="Using 'Random.nextDouble()' to get random integer" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to
&lt;code&gt;java.util.Random.nextDouble()&lt;/code&gt; that are used to create a positive integer number by multiplying
the call by a factor and casting to an integer.
&lt;p&gt;
  For generating a random positive integer in a range,
  &lt;code&gt;java.util.Random.nextInt(int)&lt;/code&gt; is simpler and more efficient.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int getRandomInt() {
    return (int) ((new Random()).nextDouble() * SIZE);
  }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int getRandomInt() {
    return (new Random()).nextInt(SIZE);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodMayBeStatic" defaultSeverity="WARNING" displayName="Method can be made 'static'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that can safely be made &lt;code&gt;static&lt;/code&gt;.
Making methods static when possible can reduce memory consumption and improve your code quality.
&lt;p&gt;A method can be &lt;code&gt;static&lt;/code&gt; if:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    it is not &lt;code&gt;synchronized&lt;/code&gt;, &lt;code&gt;native&lt;/code&gt; or &lt;code&gt;abstract&lt;/code&gt;,
  &lt;/li&gt;
  &lt;li&gt;
    does not reference any of non-static methods and non-static fields from the containing class,
  &lt;/li&gt;
  &lt;li&gt;
    is not an override and is not overridden in a subclass.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the following options to configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Whether to report only &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt; methods, which increases the performance of this inspection.&lt;/li&gt;
  &lt;li&gt;Whether to ignore empty methods.&lt;/li&gt;
  &lt;li&gt;Whether to ignore default methods in interface when using Java 8 or higher.&lt;/li&gt;
  &lt;li&gt;
    Whether to let the quick-fix replace instance qualifiers with class references
    in calls to methods which are made &lt;code&gt;static&lt;/code&gt;,
    that is, call &lt;code&gt;myClass.m()&lt;/code&gt; would be replaced with &lt;code&gt;MyClass.m()&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassInitializerMayBeStatic" defaultSeverity="WARNING" displayName="Class initializer may be 'static'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instance initializers which may be made &lt;code&gt;static&lt;/code&gt;.
&lt;p&gt;
  An instance initializer may be static if it does not reference any of its class' non-static members.
  Static initializers are executed once the class is resolved,
  while instance initializers are executed on each instantiation of the class.&lt;/p&gt;
&lt;p&gt;This inspection doesn't report instance empty initializers and initializers in anonymous classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A {
     public static String CONSTANT;
     {
        CONSTANT = "Hello";
     }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A {
     public static String CONSTANT;
     static {
        CONSTANT = "Hello"; //now initialized only once per class
     }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="BulkFileAttributesRead" defaultSeverity="WARNING" displayName="Bulk 'Files.readAttributes()' call can be used" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple sequential &lt;code&gt;java.io.File&lt;/code&gt; attribute checks, such as:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;isDirectory()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;isFile()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lastModified()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;length()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
Such calls can be replaced with a bulk &lt;code&gt;Files.readAttributes()&lt;/code&gt; call.
This is usually more performant than multiple separate attribute checks.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean isNewFile(File file, long lastModified) throws IOException {
    return file.isFile() &amp;&amp; file.lastModified() &gt; lastModified;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean isNewFile(File file, long lastModified) throws IOException {
    var fileAttributes = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
    return fileAttributes.isRegularFile() &amp;&amp; fileAttributes.lastModifiedTime().toMillis() &gt; lastModified;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection does not show a warning if &lt;code&gt;IOException&lt;/code&gt; is not handled in the current context, but the quick-fix is still available.&lt;/p&gt;
&lt;p&gt;Note that the replacements are usually not completely equivalent and should be applied with care. In particular, the behavior could differ if
  the file does not exist at all.&lt;/p&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 7 or higher.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="XML" path=""><inspection shortName="CheckTagEmptyBody" defaultSeverity="WARNING" displayName="Empty element content" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports XML elements without contents.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name&gt;&amp;lt;/name&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name/&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckXmlFileWithXercesValidator" defaultSeverity="ERROR" displayName="Failed external validation" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDuplicatedId" defaultSeverity="ERROR" displayName="Duplicate 'id' attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate values of the &lt;code&gt;id&lt;/code&gt; attribute in XML and HTML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnboundNsPrefix" defaultSeverity="WARNING" displayName="Unbound namespace prefix" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unbound namespace prefix in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved references" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved references in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckDtdRefs" defaultSeverity="ERROR" displayName="Unresolved DTD reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration.
Works in DTD an XML files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlPathReference" defaultSeverity="ERROR" displayName="Unresolved file reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlWrongRootElement" defaultSeverity="ERROR" displayName="Wrong root element" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a root tag name different from the name specified in the &lt;code&gt;&amp;lt;doctype&amp;gt;&lt;/code&gt; tag.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlHighlighting" defaultSeverity="ERROR" displayName="XML highlighting" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports XML validation problems in the results of a batch code inspection.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlInvalidId" defaultSeverity="ERROR" displayName="Unresolved 'id' reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the use of the &lt;code&gt;id&lt;/code&gt; that is not defined anywhere in XML and HTML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDeprecatedElement" defaultSeverity="WARNING" displayName="Deprecated symbol" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated XML element or  attribute.
&lt;p&gt;Symbols can be marked by XML comment or documentation tag with text 'deprecated'.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnusedNamespaceDeclaration" defaultSeverity="WARNING" displayName="Unused schema declaration" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused namespace declaration or location hint in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDefaultAttributeValue" defaultSeverity="WARNING" displayName="Redundant attribute with default value" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant assignment of the default value to an XML attribute.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedClassUsageInspection" defaultSeverity="WARNING" displayName="Deprecated API usage in XML" enabled="true" language="XML" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated classes and methods in XML files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Assignment issues" path="Java"><inspection shortName="AssignmentToNull" defaultSeverity="WARNING" displayName="'null' assignment" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables that are assigned to &lt;code&gt;null&lt;/code&gt; outside a declaration.
&lt;p&gt;The main purpose of &lt;code&gt;null&lt;/code&gt; in Java is to denote uninitialized
  reference variables. In rare cases, assigning a variable explicitly to &lt;code&gt;null&lt;/code&gt;
  is useful to aid garbage collection. However, using &lt;code&gt;null&lt;/code&gt; to denote a missing, not specified, or invalid value or a not
  found element is considered bad practice and may make your code more prone to &lt;code&gt;NullPointerExceptions&lt;/code&gt;.
  Instead, consider defining a sentinel object with the intended semantics
  or use library types like &lt;code&gt;Optional&lt;/code&gt; to denote the absence of a value.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Integer convert(String s) {
    Integer value;
    try {
      value = Integer.parseInt(s);
    } catch (NumberFormatException e) {
      // Warning: null is used to denote an 'invalid value'
      value = null;
    }
    return value;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore assignments to fields&lt;/b&gt; option to ignore assignments to fields.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceAssignmentWithOperatorAssignment" defaultSeverity="INFORMATION" displayName="Assignment can be replaced with operator assignment" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment operations which can be replaced by operator-assignment.
&lt;p&gt;Code using operator assignment is shorter and may be clearer.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  x = x + 3;
  x = x / 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  x += 3;
  x /= 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore conditional operators&lt;/b&gt; option to ignore &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
and &lt;code&gt;||&lt;/code&gt;. Replacing conditional operators with operator
assignment would change the evaluation from lazy to eager, which may change the semantics of the expression.
&lt;/p&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore obscure operators&lt;/b&gt; option to ignore &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt;, which are less known.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToMethodParameter" defaultSeverity="WARNING" displayName="Assignment to method parameter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment to, or modification of method parameters.
&lt;p&gt;Although occasionally intended, this construct may be confusing
  and is therefore prohibited in some Java projects.&lt;/p&gt;
&lt;p&gt;The quick-fix adds a declaration of a new variable.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void printTrimmed(String s) {
    s = s.trim();
    System.out.println(s);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void printTrimmed(String s) {
    String trimmed = s.trim();
    System.out.println(trimmed);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore if assignment is a transformation of the original parameter&lt;/b&gt; option to ignore assignments that modify
  the parameter value based on its previous value.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentUsedAsCondition" defaultSeverity="WARNING" displayName="Assignment used as condition" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments that are used as a condition of an &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or
&lt;code&gt;do&lt;/code&gt; statement, or a conditional expression.
&lt;p&gt;Although occasionally intended, this usage is confusing and may indicate a typo, for example, &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The quick-fix replaces &lt;code&gt;=&lt;/code&gt; with &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void update(String str, boolean empty) {
    // Warning: 'empty' is reassigned,
    // not compared to str.isEmpty()
    if (empty = str.isEmpty()) {
      ...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void update(String str, boolean empty) {
    if (empty == str.isEmpty()) {
      ...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToLambdaParameter" defaultSeverity="WARNING" displayName="Assignment to lambda parameter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment to, or modification of lambda parameters.
Although occasionally intended, this construct may be confusing and is often caused by a typo or use of a wrong variable.
&lt;p&gt;The quick-fix adds a declaration of a new variable.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  list.forEach(s -&gt; {
    s = s.trim();
    System.out.println("String: " + s);
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  list.forEach(s -&gt; {
    String trimmed = s.trim();
    System.out.println("String: " + trimmed);
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore if assignment is a transformation of the original parameter&lt;/b&gt; option to ignore assignments that modify the parameter
  value based on its previous value.&lt;/p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToSuperclassField" defaultSeverity="WARNING" displayName="Constructor assigns value to field defined in superclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment to, or modification of fields that are declared in a superclass from within a subclass constructor.
&lt;p&gt;It is considered preferable to initialize the fields of a superclass in its own constructor and
  delegate to that constructor in a subclass. This will also allow declaring a field &lt;code&gt;final&lt;/code&gt;
  if it isn't changed after the construction.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Super {
    int x;
  }
  class Sub extends Super {
    Sub(int _x) {
      // Warning: x is declared in a superclass
      x = _x;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To avoid the problem, declare a superclass constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Super {
    final int x;

    Super(int _x) {
      x = _x;
    }
  }
  class Sub extends Super {
    Sub(int _x) {
      super(_x);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncrementDecrementUsedAsExpression" defaultSeverity="WARNING" displayName="Result of '++' or '--' used" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports increment or decrement expressions that are nested inside other expressions.
Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.
&lt;p&gt;The quick-fix extracts the increment or decrement operation to a separate expression statement.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int i = 10;
  while (i-- &gt; 0) {
    System.out.println(i);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int i = 10;
  while (i &gt; 0) {
    i--;
    System.out.println(i);
  }
  i--;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToForLoopParameter" defaultSeverity="WARNING" displayName="Assignment to 'for' loop parameter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment to, or modification of a &lt;code&gt;for&lt;/code&gt; loop parameter inside the body of the loop.
&lt;p&gt;Although occasionally intended, this construct may be confusing and is often the result of a typo or a wrong variable being used.&lt;/p&gt;
&lt;p&gt;The quick-fix adds a declaration of a new variable.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (String s : list) {
    // Warning: s is changed inside the loop
    s = s.trim();
    System.out.println("String: " + s);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (String s : list) {
    String trimmed = s.trim();
    System.out.println("String: " + trimmed);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assignments in basic &lt;code&gt;for&lt;/code&gt; loops without an update statement are not reported.
  In such cases the assignment is probably intended and can't be easily moved to the update part of the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (int i = 0; i &amp;lt; list.size(); ) {
    if (element.equals(list.get(i))) {
      list.remove(i);
    } else {
      // modification of for loop parameter is not reported
      // as there's no update statement
      i++;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Check enhanced 'for' loop parameters&lt;/b&gt; option to specify whether modifications of enhanced &lt;code&gt;for&lt;/code&gt; loop parameters
  should be also reported.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedAssignment" defaultSeverity="WARNING" displayName="Nested assignment" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment expressions that are nested inside other expressions.
&lt;p&gt;Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String userName;
  // Warning: result of assignment to 'userName' is used
  String message = "Hello " + (userName = "Alice") + "!"
  System.out.println(message);
  System.out.println("Goodbye " + userName);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToCatchBlockParameter" defaultSeverity="WARNING" displayName="Assignment to 'catch' block parameter" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments to, &lt;code&gt;catch&lt;/code&gt; block parameters.
&lt;p&gt;Changing a &lt;code&gt;catch&lt;/code&gt; block parameter is very confusing and should be discouraged.&lt;/p&gt;
&lt;p&gt;The quick-fix adds a declaration of a new variable.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void processFile(String fileName) throws Exception {
    try {
      doProcessFile(fileName);
    } catch(Exception ex) {
      if (ex instanceof UncheckedIOException) {
        // Warning: catch block parameter reassigned
        ex = ((UncheckedIOException) ex).getCause();
      }
      throw ex;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void processFile(String fileName) throws Exception {
    try {
      doProcessFile(fileName);
    } catch(Exception ex) {
      Exception unwrapped = ex;
      if (unwrapped instanceof UncheckedIOException) {
        unwrapped = ((UncheckedIOException)
          unwrapped).getCause();
      }
      throw unwrapped;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToStaticFieldFromInstanceMethod" defaultSeverity="WARNING" displayName="Assignment to static field from instance context" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment to, or modification of &lt;code&gt;static&lt;/code&gt; fields from within an instance method.
&lt;p&gt;Although legal, such assignments are tricky to do
  safely and are often a result of marking fields &lt;code&gt;static&lt;/code&gt; inadvertently.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Counter {
    private static int count = 0;

    void increment() {
      // Warning: updating a static field
      // from an instance method
      count++;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Properties files" path="Java"><inspection shortName="UnsupportedCharacter" defaultSeverity="WARNING" displayName="Unsupported character" enabled="true" language="UAST" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports characters in property files that are unsupported by the ISO-8859-1 charset when Java 1.8 or earlier is used.
The inspection checks if a property file contains characters that cannot be mapped to ISO-8859-1 and suggests converting them to Unicode escape sequences for compatibility.
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Convert to escape sequences&lt;/b&gt; quick-fix to ensure compatibility with ISO-8859-1 encoding:
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  key=Java + ☕ = &#x1f340;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  key=Java + \u2615 = \uD83C\uDF40
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnresolvedPropertyKey" defaultSeverity="ERROR" displayName="Invalid property key" enabled="true" language="JAVA" pluginId="com.intellij.java-i18n" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid arguments that are passed to methods with parameters annotated as &lt;code&gt;@PropertyKey&lt;/code&gt;.
&lt;p&gt;These arguments should be valid property keys in corresponding properties files.
Also, the inspection verifies that the &lt;code&gt;resourceBundle&lt;/code&gt;
  argument of the &lt;code&gt;@PropertyKey&lt;/code&gt; annotation is an existing resource bundle.&lt;/p&gt;
&lt;p&gt;
  Use the quick-fix to create a new property or to select an existing one.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @PropertyKey(resourceBundle = "myBundle") String value = "invalid.key";
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Annotations" path="Groovy"><inspection shortName="GrPOJO" defaultSeverity="WARNING" displayName="@POJO without @CompileStatic" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports annotation &lt;code&gt;@groovy.transform.stc.POJO&lt;/code&gt; applied without &lt;code&gt;@groovy.transform.CompileStatic&lt;/code&gt;.
&lt;p&gt;Annotation &lt;code&gt;@POJO&lt;/code&gt; changes compilation process of Groovy classes to bytecode. It has no effect without explicitly enabled static compilation (which is done via &lt;code&gt;@CompileStatic&lt;/code&gt; annotation).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @POJO // reports @POJO
  class A {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SingletonConstructor" defaultSeverity="ERROR" displayName="@Singleton constructors" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports constructors of classes annotated by &lt;code&gt;@Singleton&lt;/code&gt; unless it is declared non-strict.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Singleton
  class Foo{
      Foo(){
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two possible quick-fixes: either to remove the constructor or to declare &lt;code&gt;@Singleton&lt;/code&gt; non-strict.&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Singleton
  class Foo{
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Singleton(&lt;b&gt;strict = false&lt;/b&gt;)
  class Foo{
      Foo(){
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DelegatesTo" defaultSeverity="WARNING" displayName="@DelegatesTo" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused &lt;code&gt;@DelegatesTo.Target&lt;/code&gt; annotations and unresolved &lt;code&gt;@DelegatedTo.target&lt;/code&gt; annotation attribute values.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // unused target 't1' and unresolved target 't2'
  def m(
      @DelegatesTo.Target('t1') target,
      @DelegatesTo(target = 't2') Closure c
  ) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrNamedVariantLabels" defaultSeverity="WARNING" displayName="@NamedVariant/@NamedParam/@NamedDelegate unresolved label" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved argument labels in calls of methods annotated
by &lt;code&gt;@NamedVariant&lt;/code&gt;/&lt;code&gt;@NamedParam&lt;/code&gt;/&lt;code&gt;@NamedDelegate&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @groovy.transform.NamedVariant
  def foo(a, b) {}

  // unresolved label 'c'
  foo(a: 1, b: 2, c: 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GrAnnotationReferencingUnknownIdentifiers" defaultSeverity="WARNING" displayName="@TupleConstructor and @MapConstructor" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved identifiers in &lt;code&gt;@TupleConstructor&lt;/code&gt; and &lt;code&gt;@MapConstructor&lt;/code&gt;
&lt;code&gt;includes&lt;/code&gt; and &lt;code&gt;excludes&lt;/code&gt; annotation attribute values.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // unresolved 'c'
  @TupleConstructor(includes = ['a', 'b', 'c'])
  class X {
      def a
      def b
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Class structure" path="Java"><inspection shortName="UtilityClass" defaultSeverity="WARNING" displayName="Utility class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports utility classes.
&lt;p&gt;Utility classes have all fields and methods declared as &lt;code&gt;static&lt;/code&gt; and their
  presence may indicate a lack of object-oriented design.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore if annotated by&lt;/b&gt; option to specify special annotations. The inspection ignores classes annotated with one of
  these annotations.&lt;/p&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonFinalFieldInEnum" defaultSeverity="WARNING" displayName="Non-final field in 'enum'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-final fields in enumeration types.
Non-final fields introduce global mutable state, which is generally considered undesirable.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum Enum {
    FIRST("first"),
    SECOND("second");

    public String str;

    Enum(String str) {
        this.str = str;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum Enum {
    FIRST("first"),
    SECOND("second");

    public final String str;

    Enum(String str) {
        this.str = str;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
Use the `Ignore fields that cannot be made 'final'` option to only warn on fields
that can be made final using the quick-fix.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantDeclaredInInterface" defaultSeverity="WARNING" displayName="Constant declared in interface" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constants (&lt;code&gt;public static final&lt;/code&gt; fields) declared in interfaces.
&lt;p&gt;Some coding standards require declaring constants in abstract classes instead.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantDeclaredInAbstractClass" defaultSeverity="WARNING" displayName="Constant declared in 'abstract' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constants (&lt;code&gt;public static final&lt;/code&gt; fields) declared in abstract
classes.
&lt;p&gt;Some coding standards require declaring constants in interfaces instead.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ListenerMayUseAdapter" defaultSeverity="WARNING" displayName="Class may extend adapter instead of implementing listener" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes implementing listeners instead of extending corresponding adapters.
&lt;p&gt;A quick-fix is available to
  remove any redundant empty methods left after replacing a listener implementation with an adapter extension.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Only warn when empty implementing methods are found&lt;/b&gt; option to configure the inspection to warn even if no empty methods are found.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultipleTopLevelClassesInFile" defaultSeverity="WARNING" displayName="Multiple top level classes in single file" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple top-level classes in a single Java file.
&lt;p&gt;Putting multiple
top-level classes in one file may be confusing and degrade the usefulness of various
  software tools.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicConstructor" defaultSeverity="WARNING" displayName="'public' constructor can be replaced with factory method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;public&lt;/code&gt; constructors.
&lt;p&gt;Some coding standards discourage the use of &lt;code&gt;public&lt;/code&gt; constructors and recommend
&lt;code&gt;static&lt;/code&gt; factory methods instead.
This way the implementation can be swapped out without affecting the call sites.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    private String name;

    public Test(String name) {
        this.name = name;
    }

    public void test() {
        System.out.println(name);
    }

    public static void main(String[] args) {
        new Test("str").test();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    private String name;

    private Test(String name) {
        this.name = name;
    }

    public static Test getInstance(String name) {
        return new Test(name);
    }

    public void test() {
        System.out.println(name);
    }

    public static void main(String[] args) {
        getInstance("str").test();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UtilityClassCanBeEnum" defaultSeverity="WARNING" displayName="Utility class can be 'enum'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports utility classes that can be converted to enums.
&lt;p&gt;Some coding style guidelines require implementing utility classes as enums
  to avoid code coverage issues in &lt;code&gt;private&lt;/code&gt; constructors.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class StringUtils {
    public static final String EMPTY = "";
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  enum StringUtils {
    ;
    public static final String EMPTY = "";
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Enums&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Singleton" defaultSeverity="WARNING" displayName="Singleton" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports singleton classes.
&lt;p&gt;Singleton classes are declared in a way that only one instance of the class can ever be instantiated. Singleton classes complicate testing,
  and their presence may indicate a lack of object-oriented design.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Singleton {
    private static final Singleton ourInstance = new Singleton();

    private Singleton() {
    }

    public Singleton getInstance() {
        return ourInstance;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyClass" defaultSeverity="WARNING" displayName="Empty class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty classes and empty Java files.
&lt;p&gt;A class is empty if it doesn't contain any fields, methods, constructors, or initializers. Empty classes are sometimes left over
  after significant changes or refactorings.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example {
    List&amp;lt;String&amp;gt; getList() {
       return new ArrayList&amp;lt;&amp;gt;() {

       };
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example {
    List&amp;lt;String&amp;gt; getList() {
       return new ArrayList&amp;lt;&amp;gt;();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore if annotated by&lt;/b&gt; option to specify special annotations. The inspection will ignore the classes marked with these
    annotations.
  &lt;/li&gt;
  &lt;li&gt;&lt;p&gt;
    Use the &lt;b&gt;Ignore class if it is a parametrization of a super type&lt;/b&gt; option to ignore classes that parameterize a superclass. For example:
  &lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;class MyList extends ArrayList&amp;lt;String&amp;gt; {}&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Ignore subclasses of java.lang.Throwable&lt;/b&gt; to ignore classes that extend &lt;code&gt;java.lang.Throwable&lt;/code&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Comments count as content&lt;/b&gt; option to ignore classes that contain comments.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FinalMethod" defaultSeverity="WARNING" displayName="Method can't be overridden" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that are declared &lt;code&gt;final&lt;/code&gt;.
Such methods can't be overridden and may indicate a lack of object-oriented design.
  Some coding standards discourage &lt;code&gt;final&lt;/code&gt; methods.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InterfaceMayBeAnnotatedFunctional" defaultSeverity="WARNING" displayName="Interface may be annotated as '@FunctionalInterface'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports interfaces that can be annotated with &lt;code&gt;@FunctionalInterface&lt;/code&gt;.
&lt;p&gt;Annotating an interface with &lt;code&gt;@FunctionalInterface&lt;/code&gt; indicates that the interface
  is functional and no more &lt;code&gt;abstract&lt;/code&gt; methods can be added to it.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  interface FileProcessor {
    void execute(File file);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @FunctionalInterface
  interface FileProcessor {
    void execute(File file);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UtilityClassWithPublicConstructor" defaultSeverity="WARNING" displayName="Utility class with 'public' constructor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports utility classes with &lt;code&gt;public&lt;/code&gt; constructors.
&lt;p&gt;Utility classes have all fields and methods declared as &lt;code&gt;static&lt;/code&gt;. Creating a &lt;code&gt;public&lt;/code&gt;
  constructor in such classes is confusing and may cause accidental class instantiation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public final class UtilityClass {
    public UtilityClass(){
    }
    public static void foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public final class UtilityClass {
    private UtilityClass(){
    }
    public static void foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FinalClass" defaultSeverity="WARNING" displayName="Class is closed to inheritance" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that are declared &lt;code&gt;final&lt;/code&gt;.
Final classes that extend a &lt;code&gt;sealed&lt;/code&gt; class or interface are not reported.
Such classes can't be inherited and may indicate a lack of object-oriented design.
Some coding standards discourage &lt;code&gt;final&lt;/code&gt; classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public final class&lt;/b&gt; Main {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Main {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassInitializer" defaultSeverity="WARNING" displayName="Non-'static' initializer" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;static&lt;/code&gt; initializers in classes.
&lt;p&gt;Some coding standards prohibit instance initializers and recommend using constructors or field initializers for initialization.
  Also, deleting the &lt;code&gt;static&lt;/code&gt; keyword may accidentally create non-&lt;code&gt;static&lt;/code&gt; initializers and result in obscure bugs.
&lt;/p&gt;
&lt;p&gt;This inspection doesn't report instance initializers in anonymous classes.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Only warn when the class has one or more constructors&lt;/b&gt; option to ignore instance initializers in classes that don't have any constructors.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InnerClassOnInterface" defaultSeverity="WARNING" displayName="Inner class of interface" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inner classes in &lt;code&gt;interface&lt;/code&gt; classes.
&lt;p&gt;Some coding standards
discourage the use of such classes. The inspection doesn't report enum classes and annotation interfaces.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore inner interfaces of interfaces&lt;/b&gt; option to ignore inner interfaces. For example:
&lt;pre&gt;&lt;code&gt;
  interface I {
    interface Inner {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NoopMethodInAbstractClass" defaultSeverity="WARNING" displayName="No-op method in 'abstract' class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports no-op (for "no operation") methods in &lt;code&gt;abstract&lt;/code&gt; classes.
&lt;p&gt;It is usually a better
design to make such methods &lt;code&gt;abstract&lt;/code&gt; themselves so that classes inheriting these
  methods provide their implementations.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class Test {
    protected void doTest() {
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FinalPrivateMethod" defaultSeverity="WARNING" displayName="'private' method declared 'final'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that are marked with both &lt;code&gt;final&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; keywords.
&lt;p&gt;Since &lt;code&gt;private&lt;/code&gt; methods cannot be meaningfully overridden because of their visibility, declaring them
&lt;code&gt;final&lt;/code&gt; is redundant.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassWithOnlyPrivateConstructors" defaultSeverity="WARNING" displayName="Class with only 'private' constructors should be declared 'final'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes with only &lt;code&gt;private&lt;/code&gt; constructors.
&lt;p&gt;A class that only has &lt;code&gt;private&lt;/code&gt; constructors cannot be extended outside a file and should be declared as &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UtilityClassWithoutPrivateConstructor" defaultSeverity="WARNING" displayName="Utility class without 'private' constructor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports utility classes without &lt;code&gt;private&lt;/code&gt; constructors.
&lt;p&gt;Utility classes have all fields and methods declared as &lt;code&gt;static&lt;/code&gt;. Creating &lt;code&gt;private&lt;/code&gt;
constructors in utility classes prevents them from being accidentally instantiated.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore if annotated by&lt;/b&gt; option to specify special annotations. The inspection ignores classes marked with one of
these annotations.
&lt;p&gt;
Use the &lt;b&gt;Ignore classes with only a main method&lt;/b&gt; option to ignore classes with no methods other than the main one.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassNameDiffersFromFileName" defaultSeverity="WARNING" displayName="Class name differs from file name" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports top-level class names that don't match the name of a file containing them.
&lt;p&gt;While the Java specification allows for naming non-&lt;code&gt;public&lt;/code&gt; classes this way,
  files with unmatched names may be confusing and decrease usefulness of various software tools.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkerInterface" defaultSeverity="WARNING" displayName="Marker interface" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports marker interfaces without any methods or fields.
&lt;p&gt;Such interfaces may be confusing and typically indicate a design failure.&lt;/p&gt;
&lt;p&gt;The inspection ignores interfaces that extend two or more interfaces and interfaces
  that specify the generic type of their superinterface.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodReturnAlwaysConstant" defaultSeverity="WARNING" displayName="Method returns per-class constant" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports methods that only return a constant, which may differ for various inheritors.
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticNonFinalField" defaultSeverity="WARNING" displayName="'static', non-'final' field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;final&lt;/code&gt; &lt;code&gt;static&lt;/code&gt; fields.
&lt;p&gt;A quick-fix is available to add the &lt;code&gt;final&lt;/code&gt; modifier to a non-&lt;code&gt;final&lt;/code&gt; &lt;code&gt;static&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;This inspection doesn't check fields' mutability. For example, adding the &lt;code&gt;final&lt;/code&gt; modifier to a field that has a value
  being set somewhere will cause a compilation error.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Only report 'public' fields&lt;/b&gt; option so that the inspection reported only &lt;code&gt;public&lt;/code&gt; fields.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LimitedScopeInnerClass" defaultSeverity="INFORMATION" displayName="Local class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local classes.
&lt;p&gt;A local class is a named nested class declared inside a code block.
Local classes are uncommon and may therefore be confusing.
  In addition, some code standards discourage the use of local classes.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example {
    void test() {
      class Local { // here
      }
      new Local();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example {
    void test() {
      new Local();
    }

    private static class Local { // here
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FinalStaticMethod" defaultSeverity="WARNING" displayName="'static' method declared 'final'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports static methods that are marked as &lt;code&gt;final&lt;/code&gt;.
&lt;p&gt;Such code might indicate an error or an incorrect assumption about the effect of the &lt;code&gt;final&lt;/code&gt; keyword.
Static methods are not subject to runtime polymorphism, so the only purpose of the &lt;code&gt;final&lt;/code&gt; keyword used with static methods
  is to ensure the method will not be hidden in a subclass.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonFinalUtilityClass" defaultSeverity="WARNING" displayName="Utility class is not 'final'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports utility classes that aren't &lt;code&gt;final&lt;/code&gt; or &lt;code&gt;abstract&lt;/code&gt;.
&lt;p&gt;Utility classes have all fields and methods declared as &lt;code&gt;static&lt;/code&gt;.
Making them &lt;code&gt;final&lt;/code&gt; prevents them from being accidentally subclassed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class UtilityClass {
    public static void foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public final class UtilityClass {
    public static void foo() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassMayBeInterface" defaultSeverity="INFORMATION" displayName="Abstract 'class' may be 'interface'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;abstract&lt;/code&gt; classes that can be converted to interfaces.
&lt;p&gt;Using interfaces instead of classes is preferable as Java doesn't support multiple class inheritance,
  while a class can implement multiple interfaces.&lt;/p&gt;
&lt;p&gt;A class may be converted to an interface if it has no superclasses (other
than Object), has only &lt;code&gt;public static final&lt;/code&gt; fields,
  &lt;code&gt;public abstract&lt;/code&gt; methods, and &lt;code&gt;public&lt;/code&gt; inner classes.
&lt;!-- tooltip end --&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
abstract class Example {
    public static final int MY_CONST = 42;
    public abstract void foo();
}

class Inheritor extends Example {
    @Override
    public void foo() {
        System.out.println(MY_CONST);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
interface Example {
    int MY_CONST = 42;
    void foo();
}

class Inheritor implements Example {
    @Override
    public void foo() {
        System.out.println(MY_CONST);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Report classes containing non-abstract methods when using Java 8&lt;/b&gt; option to report only the classes with &lt;code&gt;static&lt;/code&gt; methods and non-abstract methods that can be converted to
  &lt;code&gt;default&lt;/code&gt; methods (only applicable to language level of 8 or higher).
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParameterCanBeLocal" defaultSeverity="WARNING" displayName="Value passed as parameter never read" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant method parameters that can be replaced with local variables.
&lt;p&gt;If all local usages of a parameter are preceded by assignments to that parameter, the
parameter can be removed and its usages replaced with local variables.
It makes no sense to have such a parameter, as values that are passed to it are overwritten.
  Usually, the problem appears as a result of refactoring.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(int p) {
    p = 1;
    System.out.print(p);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test() {
    int p = 1;
    System.out.print(p);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="FieldCanBeLocal" defaultSeverity="WARNING" displayName="Field can be local variable" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant class fields that can be replaced with local variables.
&lt;p&gt;If all local usages of a field are preceded by assignments to that field, the
  field can be removed, and its usages can be replaced with local variables.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AnonymousInnerClass" defaultSeverity="INFORMATION" displayName="Anonymous class can be replaced with inner class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous classes.
&lt;p&gt;Occasionally replacing anonymous classes with inner classes can lead to more readable and maintainable code.
  Some code standards discourage anonymous classes.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example {
    public static void main(String[] args) {
      new Thread() {
        public void run() {
          work()
        }

        private void work() {}
      }.start();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example {
    public static void main(String[] args) {
      new MyThread().start();
    }

    private static class MyThread extends Thread {
      public void run() {
        work();
      }

      private void work() {}
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code maturity" path="Java"><inspection shortName="UseOfObsoleteDateTimeApi" defaultSeverity="WARNING" displayName="Use of obsolete date-time API" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;java.util.Date&lt;/code&gt;, &lt;code&gt;java.util.Calendar&lt;/code&gt;, &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt;, &lt;code&gt;java.util.TimeZone&lt;/code&gt;,
and &lt;code&gt;java.util.SimpleTimeZone&lt;/code&gt;.
&lt;p&gt;While still supported, these classes were made obsolete by the JDK8 Date-Time API and should probably
  not be used in new development.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkedForRemoval" defaultSeverity="ERROR" displayName="Usage of API marked for removal" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated APIs (classes, fields, and methods) that are marked for removal with
  &lt;code&gt;@Deprecated(&lt;b&gt;forRemoval&lt;/b&gt;=true)&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The code that uses an API marked for removal may cause a runtime error with a future version of the API. That is why
  the recommended severity for this inspection is &lt;i&gt;Error&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;
  You can change the severity to &lt;i&gt;Warning&lt;/i&gt; if you want to use the same code highlighting as in ordinary deprecation.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="OptionalAssignedToNull" defaultSeverity="WARNING" displayName="Null value for Optional type" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;null&lt;/code&gt; assigned to an &lt;code&gt;Optional&lt;/code&gt; variable or returned from a method returning &lt;code&gt;Optional&lt;/code&gt;.
&lt;p&gt;It's recommended that you use &lt;code&gt;Optional.empty()&lt;/code&gt; (or &lt;code&gt;Optional.absent()&lt;/code&gt; for Guava) to denote an empty value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Optional&amp;lt;Integer&amp;gt; foo(boolean flag) {
    return flag ? Optional.of(42) : null;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Optional&amp;lt;Integer&amp;gt; foo(boolean flag) {
    return flag ? Optional.of(42) : Optional.empty();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
  Use the &lt;b&gt;Report comparison of Optional with null&lt;/b&gt; option to also report comparisons like &lt;code&gt;optional == null&lt;/code&gt;. While in rare cases (e.g. lazily initialized
  optional field) this might be correct, optional variable is usually never null, and probably &lt;code&gt;optional.isPresent()&lt;/code&gt; was
  intended.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExtractMethodRecommender" defaultSeverity="WARNING" displayName="Method can be extracted" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests extracting fragments of code to a separate method to make code more clear. 
This inspection has a number of heuristics to select good candidates for extraction,
including the following ones.
&lt;ul&gt;
  &lt;li&gt;The extracted fragment has no non-local control flow&lt;/li&gt;
  &lt;li&gt;The extracted fragment has exactly one output variable&lt;/li&gt;
  &lt;li&gt;There are no similar uses of output variable inside the extracted fragment and outside it&lt;/li&gt;
  &lt;li&gt;The extracted fragment has only few input parameters (no more than three by default; configured with the inspection option)&lt;/li&gt;
  &lt;li&gt;The extracted fragment is not smaller than the configured length (500 characters by default) but no bigger than 60% of the containing method body&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Deprecation" defaultSeverity="WARNING" displayName="Deprecated API usage" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated classes, fields, and methods.
A quick-fix is available to automatically convert the deprecated usage,
when the necessary information can be extracted from the Javadoc of the deprecated member.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  class Interesting {

    /**
     * @deprecated Use {@link #newHotness()} instead
     */
    @Deprecated
    public void oldAndBusted() {}

    public void newHotness() {}
  }
  class ElseWhere {
    void x(Interesting i) {
      i.oldAndBusted(); // deprecated warning here
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  class Interesting {

    /**
     * @deprecated Use {@link #newHotness()} instead
     */
    @Deprecated
    public void oldAndBusted() {}

    public void newHotness() {}
  }
  class ElseWhere {
    void x(Interesting i) {
      i.newHotness();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the inspection doesn't produce a warning if it's impossible or hard to avoid it.  For example,
  the following code won't be reported:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  abstract class A { //library code
     @Deprecated
     abstract void m();
  }
  class B extends A { //project code
     @Override
     void m() {
        //doSmth;
     }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
  Use the options to disable this inspection inside deprecated members,
  overrides of abstract deprecated methods, non-static import statements, methods of deprecated classes, or same top-level classes.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObsoleteCollection" defaultSeverity="WARNING" displayName="Use of obsolete collection type" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;java.util.Vector&lt;/code&gt;, &lt;code&gt;java.util.Hashtable&lt;/code&gt; and &lt;code&gt;java.util.Stack&lt;/code&gt;.
&lt;p&gt;Usages of these classes can often be replaced with usages of
&lt;code&gt;java.util.ArrayList&lt;/code&gt;, &lt;code&gt;java.util.HashMap&lt;/code&gt; and &lt;code&gt;java.util.ArrayDeque&lt;/code&gt; respectively.
While still supported,
the former classes were made obsolete by the JDK1.2 collection classes, and should probably
not be used in new development.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Ignore obsolete collection types where they are required&lt;/b&gt; option to ignore any cases where the obsolete collections are used
as method arguments or assigned to a variable that requires the obsolete type.
Enabling this option may consume significant processor resources.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantScheduledForRemovalAnnotation" defaultSeverity="WARNING" displayName="Redundant @ScheduledForRemoval annotation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;@ApiStatus.ScheduledForRemoval&lt;/code&gt; annotation without &lt;code&gt;inVersion&lt;/code&gt; attribute in code which targets Java 9 or newer version.
&lt;p&gt;
Such usages can be replaced by &lt;code&gt;forRemoval&lt;/code&gt; attribute in &lt;code&gt;@Deprecated&lt;/code&gt; annotation to simplify code.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SystemOutErr" defaultSeverity="INFORMATION" displayName="Use of 'System.out' or 'System.err'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;System.out&lt;/code&gt; or &lt;code&gt;System.err&lt;/code&gt;.
&lt;p&gt;Such statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust
  logging facility.&lt;/p&gt;

&lt;p&gt;The provided quick-fix supports &lt;b&gt;SLF4J&lt;/b&gt; and &lt;b&gt;Log4j 2&lt;/b&gt;.
 It replaces &lt;code&gt;System.out&lt;/code&gt; and &lt;code&gt;System.err&lt;/code&gt; calls with log calls&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public static void test(Object o) {
    System.out.println("Test: "+ o);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  private static final Logger log = LoggerFactory.getLogger(Test.class);

  public static void test(Object o) {
      log.info("Test: {}", o);;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Log method for 'System.err'&lt;/b&gt; option to specify a method which it is used to log a message for 'System.err' calls.
  Use the &lt;b&gt;Log method for 'System.out'&lt;/b&gt; option to specify a method which it is used to log a message for 'System.out' calls.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedIsStillUsed" defaultSeverity="WARNING" displayName="Deprecated member is still used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated classes, methods, and fields that are used in your code nonetheless.
&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
  class MyCode {
    @Deprecated
    void oldMethod() {}// warning: "Deprecated member is still used"

    void newMethod() {
      oldMethod(); // forgotten usage
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usages within deprecated elements are ignored.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CommentedOutCode" defaultSeverity="WEAK WARNING" displayName="Commented out code" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comments that contain Java code.
&lt;p&gt;Usually, code that is commented out gets outdated very quickly and becomes misleading.
As most projects use some kind of version control system,
  it is better to delete commented out code completely and use the VCS history instead.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadDumpStack" defaultSeverity="WARNING" displayName="Call to 'Thread.dumpStack()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;Thread.dumpStack()&lt;/code&gt;.
&lt;p&gt;Such statements are often used for temporary debugging and should be either removed from the production code
  or replaced with a more robust logging facility.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowablePrintedToSystemOut" defaultSeverity="WARNING" displayName="'Throwable' printed to 'System.out'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;System.out.println()&lt;/code&gt; with an exception as an argument.
&lt;p&gt;Using print statements for logging exceptions hides the stack trace from you, which can complicate the investigation of the problem.
  It is recommended that you use logger instead.&lt;/p&gt;
&lt;p&gt;Calls to &lt;code&gt;System.out.print()&lt;/code&gt;, &lt;code&gt;System.err.println()&lt;/code&gt;, and &lt;code&gt;System.err.print()&lt;/code&gt; with an exception argument are also
reported. It is better to use a logger to log exceptions instead.&lt;/p&gt;
&lt;p&gt;The provided quick-fix supports &lt;b&gt;SLF4J&lt;/b&gt; and &lt;b&gt;Log4j 2&lt;/b&gt;.
It replaces &lt;code&gt;System.out.println()&lt;/code&gt; call with log calls&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
      foo();
  } catch (Exception e) {
      System.out.println(e);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try {
      foo();
  } catch (Exception e) {
    log.error("e: ", e);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Log method for fix&lt;/b&gt; option to specify a method which it is used to log a message.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowablePrintStackTrace" defaultSeverity="WARNING" displayName="Call to 'printStackTrace()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Throwable.printStackTrace()&lt;/code&gt; without arguments.
&lt;p&gt;Such statements are often used for temporary debugging and should be either removed from the production code
  or replaced with a more robust logging facility.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Options" path="Scala/Collections"><inspection shortName="MapGetOrElse" defaultSeverity="WARNING" displayName="Map and getOrElse to fold" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;getOrElse&lt;/code&gt; on &lt;code&gt;Option&lt;/code&gt; and suggests to replace
  them with &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def p(x: Int): Boolean = ???
  Option(0).map(p).getOrElse(false)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def p(x: Int): Boolean = ???
  Option(0).fold(false)(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GetOrElseNull" defaultSeverity="WARNING" displayName="GetOrElse(null) to orNull" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;getOrElse(null)&lt;/code&gt; and suggests to replace it with &lt;code&gt;orNull&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  option getOrElse null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  option.orNull
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OptionEqualsSome" defaultSeverity="WARNING" displayName="Equals Some(x) to contains(x)" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports opportunities to simplify equality checks of &lt;code&gt;Option&lt;/code&gt; and &lt;code&gt;Some(x)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  option == Some(x)
  Some(x) != option
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  option.contains(x)
  !option.contains(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfElseToOption" defaultSeverity="WARNING" displayName="Emulated Option(x)" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports emulating a call to &lt;code&gt;Option.apply(x)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (x == null) None else Some(x)
  if (x != null) Some(x) else None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Option(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantHeadOrLastOption" defaultSeverity="WARNING" displayName="Redundant headOption or lastOption" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;headOption&lt;/code&gt; and &lt;code&gt;lastOption&lt;/code&gt; on an instance of &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The quick-fix removes these redundant calls.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Option(1).lastOption
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Option(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MapGetOrElseBoolean" defaultSeverity="WARNING" displayName="Map and getOrElse(false) to exists" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;getOrElse(false)&lt;/code&gt; / &lt;code&gt;getOrElse(true)&lt;/code&gt; and suggests replacing them with
  &lt;code&gt;exists&lt;/code&gt; / &lt;code&gt;forall&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def p(x: Int): Boolean = ???
  Option(0).map(p).getOrElse(false)
  Option(0).map(p).getOrElse(true)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def p(x: Int): Boolean = ???
  Option(0).exists(p)
  Option(0).forall(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfElseToFilterdOption" defaultSeverity="WARNING" displayName="Change to filter" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports an if statement that evaluates to &lt;code&gt;Option&lt;/code&gt; and suggests replacing it with &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def condition(x: Int): Boolean = ???
  val value = 3
  if (condition(value)) Some(value) else None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def condition(x: Int): Boolean = ???
  val value = 3
  Some(value).filter(condition)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SomeToOption" defaultSeverity="WARNING" displayName="Some to Option" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports and replaces &lt;code&gt;Some(a)&lt;/code&gt; with &lt;code&gt;Option(a)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; will do an additional check if &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; and, if so, will
  result in &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Some(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Option(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Naming conventions" path="Java"><inspection shortName="ParameterNamingConvention" defaultSeverity="WARNING" displayName="Method parameter naming convention" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method parameters whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;void fooBar(int X)&lt;/code&gt;
  should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.&lt;/p&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
  Use the fields in the &lt;b&gt;Options&lt;/b&gt; section to specify the minimum length, maximum length, and a regular expression expected for
  method parameter names. Specify &lt;b&gt;0&lt;/b&gt; in order not to check the length of names.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DollarSignInName" defaultSeverity="WARNING" displayName="Use of '$' in identifier" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables, methods, and classes with dollar signs (&lt;code&gt;$&lt;/code&gt;) in their names. While
such names are legal Java, their use outside of generated java code is strongly discouraged.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class SalaryIn${}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rename quick-fix is suggested only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageNamingConvention" defaultSeverity="WARNING" displayName="Package naming convention" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports packages whose names are either too short, too long, or do not follow the specified regular expression pattern.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package io;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the options to specify the minimum and maximum length of the package name
  as well as a regular expression that matches valid package names
  (regular expressions are in standard &lt;code&gt;java.util.regex&lt;/code&gt; format).
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UpperCaseFieldNameNotConstant" defaultSeverity="WARNING" displayName="Non-constant field with upper-case name" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-&lt;code&gt;static&lt;/code&gt; non-&lt;code&gt;final&lt;/code&gt;
fields whose names are all in upper case.
&lt;p&gt;Such fields may cause confusion by breaking a common naming convention and
  are often used by mistake.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;pre&gt;&lt;code&gt;
  public static int THE_ANSWER = 42; //a warning here: final modifier is missing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such fields is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldNamingConvention" defaultSeverity="WARNING" displayName="Field naming convention" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; if the inspection is enabled for constants, and the minimum specified length for a field name is 5 (the default), the following constant
  produces a warning because the length of its name is 3, which is less than 5:  &lt;code&gt;public static final int MAX = 42;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A quick-fix that renames such fields is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the list in the &lt;b&gt;Options&lt;/b&gt; section to specify which fields should be checked. Deselect the checkboxes for the fields for which
you want to skip the check.&lt;/p&gt;
&lt;p&gt;For each field type, specify the minimum length, maximum length, and the regular expression expected for field names using the
  provided input fields.
  Specify &lt;b&gt;0&lt;/b&gt; in the length fields to skip the corresponding checks.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard
  &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParameterNameDiffersFromOverriddenParameter" defaultSeverity="WARNING" displayName="Parameter name differs from parameter in overridden or overloaded method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports parameters whose names differ from the corresponding
parameters of the methods they override or overload. While legal in Java, such inconsistent names may be confusing
and decrease the documentation benefits of good naming practices.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Person {
    Person(String fullName) {}
  }
  class Child extends Person {
    Child(String name) { super(name); }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Person {
    Person(String fullName) {}
  }
  class Child extends Person {
    Child(String fullName) { super(fullName); }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the options to indicate whether to ignore overridden parameter names that are only
  a single character long or come from a library method. Both can be useful if
  you do not wish to be bound by dubious naming conventions used in libraries.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaModuleNaming" defaultSeverity="WARNING" displayName="Java module name contradicts the convention" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when a module name contradicts Java Platform Module System recommendations.
&lt;p&gt;One of the &lt;a href="http://mail.openjdk.org/pipermail/jpms-spec-experts/2017-March/000659.html"&gt;recommendations&lt;/a&gt;
  is to avoid using digits at the end of module names.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
module foo1.bar2 {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="QuestionableName" defaultSeverity="WARNING" displayName="Questionable name" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables, methods, or classes with questionable, not really descriptive names.
Such names do not help to understand the code, and most probably were created as a temporary thing but were forgotten afterwards.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int aa = 42;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rename quick-fix is suggested only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to list names that should be reported.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LocalVariableNamingConvention" defaultSeverity="WARNING" displayName="Local variable naming convention" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;int X = 42;&lt;/code&gt;
  should be reported if the inspection is enabled with the default settings in which a variable name should start with a lowercase letter.&lt;/p&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
Use the fields in the &lt;b&gt;Options&lt;/b&gt; section to specify the minimum length, maximum length, and a regular expression expected for local variable names.
Specify &lt;b&gt;0&lt;/b&gt; in order not to check the length of names. Regular expressions should be specified in the standard &lt;b&gt;java.util.regex&lt;/b&gt; format.
&lt;p&gt;Use checkboxes to ignore &lt;code&gt;for&lt;/code&gt;-loop and &lt;code&gt;catch&lt;/code&gt; section parameters.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LambdaParameterNamingConvention" defaultSeverity="WARNING" displayName="Lambda parameter naming convention" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda parameters whose names are too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;Function&amp;lt;String, String&amp;gt; id = X -&amp;gt; X;&lt;/code&gt; 
  should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
Use the fields in the &lt;b&gt;Options&lt;/b&gt; section to specify the minimum length, maximum length, and a regular expression expected for lambda parameter names.
  Specify &lt;b&gt;0&lt;/b&gt; in order not to check the length of names.&lt;/p&gt;
&lt;p&gt;Regular expressions should be specified in the standard &lt;code&gt;java.util.regex&lt;/code&gt; format.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StandardVariableNames" defaultSeverity="WARNING" displayName="Standard variable names" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables with 'standard' names that do not correspond to their types.
Such names may be confusing. There are the following standard names for specific types:
&lt;ul&gt;
  &lt;li&gt;i, j, k, m, n - &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;f - &lt;code&gt;float&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;d - &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;b - &lt;code&gt;byte&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;c, ch - &lt;code&gt;char&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;l - &lt;code&gt;long&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;s, str - &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rename quick-fix is suggested only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to ignore parameter names which are identical to the parameter name from a direct super method.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Cast" path="Java/Numeric issues"><inspection shortName="IntegerMultiplicationImplicitCastToLong" defaultSeverity="WARNING" displayName="Integer multiplication or shift implicitly cast to 'long'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports integer multiplications and left shifts that are implicitly cast to long.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(int i) {
    long val = 65536 * i;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void x(int i) {
    long val = 65536&lt;b&gt;L&lt;/b&gt; * i;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(int i) {
    long value = i &amp;lt;&amp;lt; 24;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void f(int i) {
    long value = (long) i &amp;lt;&amp;lt; 24;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Such multiplications are often a mistake, as overflow truncation may occur unexpectedly.
  Converting an &lt;code&gt;int&lt;/code&gt; literal to a &lt;code&gt;long&lt;/code&gt; literal (&lt;code&gt;65536&lt;b&gt;L&lt;/b&gt;&lt;/code&gt;) fixes the problem.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryExplicitNumericCast" defaultSeverity="WARNING" displayName="Unnecessary explicit numeric cast" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports primitive numeric casts that would be inserted implicitly by the compiler.
Also, reports any primitive numeric casts that the compiler will remove.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int x = (short)5; // The cast will be removed by the javac tool&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;code&gt;int x = 5;&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DoubleLiteralMayBeFloatLiteral" defaultSeverity="WARNING" displayName="Cast to 'float' can be 'float' literal" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;double&lt;/code&gt; literal expressions that are immediately cast to &lt;code&gt;float&lt;/code&gt;.
&lt;p&gt;Such literal expressions can be replaced with equivalent &lt;code&gt;float&lt;/code&gt; literals.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float f = (float)1.1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float f = 1.1f;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CastThatLosesPrecision" defaultSeverity="WARNING" displayName="Numeric cast that loses precision" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cast operations between primitive numeric types that may
result in precision loss.
&lt;p&gt;Such casts are not necessarily a problem but may result in difficult to
  trace bugs if the loss of precision is unexpected.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int a = 420;
  byte b = (byte) a;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore casts from int to char&lt;/b&gt; option to ignore casts from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;char&lt;/code&gt;.
  This type of cast is often used when implementing I/O operations because the &lt;code&gt;read()&lt;/code&gt; method of the
  &lt;code&gt;java.io.Reader&lt;/code&gt; class returns an &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore casts from int 128-255 to byte &lt;/b&gt; option to ignore casts of constant values (128-255) from &lt;code&gt;int&lt;/code&gt; to
  &lt;code&gt;byte&lt;/code&gt;.
  Such values will overflow to negative numbers that still fit inside a byte.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IntLiteralMayBeLongLiteral" defaultSeverity="WARNING" displayName="Cast to 'long' can be 'long' literal" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;int&lt;/code&gt; literal expressions that are immediately cast to &lt;code&gt;long&lt;/code&gt;.
&lt;p&gt;Such literal expressions can be replaced with equivalent &lt;code&gt;long&lt;/code&gt; literals.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Long l = (long)42;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Long l = 42L;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 14" path="Java/Java language level migration aids"><inspection shortName="EnhancedSwitchMigration" defaultSeverity="WARNING" displayName="Statement can be replaced with enhanced 'switch'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;switch&lt;/code&gt; statements that can be automatically replaced with enhanced &lt;code&gt;switch&lt;/code&gt; statements or expressions.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  double getPrice(String fruit) {
    // Switch statement can be replaced with enhanced 'switch'
    switch (fruit) {
      case "Apple":
        return 1.0;
      case "Orange":
        return 1.5;
      case "Mango":
        return 2.0;
      default:
        throw new IllegalArgumentException();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  double getPrice(String fruit) {
    return switch (fruit) {
      case "Apple" -&gt; 1.0;
      case "Orange" -&gt; 1.5;
      case "Mango" -&gt; 2.0;
      default -&gt; throw new IllegalArgumentException();
    };
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Show warning only if conversion to expression is possible&lt;/b&gt; option not to warn about conversion to &lt;code&gt;switch&lt;/code&gt; statement.
  &lt;/li&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Maximum number of statements in one branch to convert to switch expression&lt;/b&gt; option warn about conversion to expression only
    if each branch has less than the given number of statements.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Enhanced &amp;#39;switch&amp;#39; blocks&amp;#39;, which is available since Java 14.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EnhancedSwitchBackwardMigration" defaultSeverity="INFORMATION" displayName="Enhanced 'switch'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports enhanced &lt;code&gt;switch&lt;/code&gt; statements and expressions. Suggests replacing them with regular &lt;code&gt;switch&lt;/code&gt;
statements.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean even = switch (condition) {
    case 1, 3, 5, 7, 9 -&gt; false;
    default -&gt; true;
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean even;
  switch (condition) {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
      even = false;
      break;
    default:
      even = true;
      break;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;i&gt;Enhanced&lt;/i&gt; &lt;code&gt;switch&lt;/code&gt; appeared in Java 14.
  This inspection can help to downgrade for backward compatibility with earlier Java versions.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Comparing" path="Scala/Collections"><inspection shortName="ComparingLength" defaultSeverity="WARNING" displayName="Comparing length to lengthCompare" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the comparison &lt;code&gt;.length&lt;/code&gt; or &lt;code&gt;.size&lt;/code&gt; and
  suggests replacing it with &lt;code&gt;.sizeIs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.length == n
  seq.length != n
  seq.length &amp;lt; n
  seq.length &gt; n

  seq.size == n
  seq.size != n
  seq.size &amp;lt; n
  seq.size &gt; n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var seq: Seq[Int]
  seq.sizeIs == n
  seq.sizeIs != n
  seq.sizeIs &amp;lt; n
  seq.sizeIs &gt; n

  seq.sizeIs == n
  seq.sizeIs != n
  seq.sizeIs &amp;lt; n
  seq.sizeIs &gt; n
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EqualityToSameElements" defaultSeverity="WARNING" displayName="Equals on arrays and iterators" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usage of "equals" on arrays and iterators.&lt;/p&gt;
&lt;p&gt;Equals on arrays and iterators checks reference equality, which is rarely useful.
    This inspection suggests comparing their content via &lt;code&gt;sameElements&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Array(1) == Array(1) //false
  Iterator(1) == Iterator(1) //false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Array(1) sameElements Array(1) //true
  Iterator(1) sameElements Iterator(1) //true
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComparingDiffCollectionKinds" defaultSeverity="WARNING" displayName="Equals on collections of different kinds" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when Scala collections of different categories are compared.&lt;/p&gt;
&lt;p&gt;Scala collections of different categories (Set, Seq, Map or Iterator) cannot be equal and should not be compared with arrays either. This inspection suggests converting one of the collections into the same category.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  seq == iterator
  seq != array
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  seq.toIterator == iterator or seq == iterator.toSeq
  seq != array.toSeq
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SameElementsToEquals" defaultSeverity="WARNING" displayName="SameElements onCollections of a same kind" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of &lt;code&gt;sameElements&lt;/code&gt; or &lt;code&gt;corresponds&lt;/code&gt;
  to compare collections of same kind (Seq, Set, or Map).
&lt;/p&gt;

&lt;p&gt;The quick-fix uses a equality instead.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  seq sameElements list
  hashSet sameElements treeSet
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  seq == list
  hashSet == treeSet
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CorrespondsUnsorted" defaultSeverity="WARNING" displayName="Corresponds/sameElements on unsorted collection" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of &lt;code&gt;sameElements&lt;/code&gt; and &lt;code&gt;corresponds&lt;/code&gt; with unsorted collections.&lt;/p&gt;

&lt;p&gt;The methods &lt;code&gt;sameElements&lt;/code&gt; and &lt;code&gt;corresponds&lt;/code&gt; use iterators of the given collections
    to compare elements depending on the order of their position in the collection.
    The result is therefore unpredictable if the order of elements is not well defined,
    as it is the case for unordered Sets or Maps.&lt;/p&gt;
&lt;p&gt;To fix this consider using &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;subsetOf&lt;/code&gt;, or bring the elements in some order.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Set(3,2,1) sameElements Set(1, 2, 3) // is false

  // but

  Set(1, 2, 3, 4, 5) sameElements Set(5, 4, 3, 2, 1) // is true
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Simplifications: find and map to apply" path="Scala/Collections"><inspection shortName="FindAndMapToGet" defaultSeverity="WARNING" displayName="Find and map to get" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports a call to &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; on &lt;code&gt;Map&lt;/code&gt; and suggests to replace it with &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.find(_._1 == k).map(_._2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.get(k)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Abstraction issues" path="Java"><inspection shortName="UseOfConcreteClass" defaultSeverity="WARNING" displayName="Use of concrete class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of concrete classes, rather than interfaces.
Such declarations may represent a failure of abstraction and may make testing more difficult.
&lt;p&gt;
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
Casts, instanceofs, and local variables are not reported in &lt;code&gt;equals()&lt;/code&gt; method implementations.
Also, casts are not reported in &lt;code&gt;clone()&lt;/code&gt; method implementations.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  interface Entity {}
  class EntityImpl implements Entity {}

  void processObject(Object obj) {
    // warning: instanceof of the concrete class
    if (obj instanceof EntityImpl) {
      // warning: cast to the concrete class,
      // rather than the interface
      processEntity((EntityImpl)obj);
    }
  }
  // warning: parameter of concrete class
  void processEntity(EntityImpl obj) {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore abstract class type&lt;/b&gt; option to ignore casts to abstract classes.&lt;/p&gt;
&lt;p&gt;Use the subsequent options to control contexts where the problem is reported.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicMethodNotExposedInInterface" defaultSeverity="WARNING" displayName="'public' method not exposed in interface" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;public&lt;/code&gt; methods in classes
which are not exposed in an interface.
&lt;p&gt;Exposing all &lt;code&gt;public&lt;/code&gt; methods via an interface is important for
  maintaining loose coupling, and may be necessary for certain component-based programming styles.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
interface Person {
  String getName();
}

class PersonImpl implements Person {
  private String name;

  // ok: method is exposed in interface
  @Override
  public String getName() {
    return name;
  }

  // warning: method is public
  // but not exposed in interface
  public void setName() {
    this.name = name;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore if annotated by&lt;/b&gt; list to specify special annotations. Methods annotated with one of
these annotations will be ignored by this inspection.
&lt;p&gt;
  Use the &lt;b&gt;Ignore if the containing class does not implement a non-library interface&lt;/b&gt; option to ignore methods from classes which do not
implement any interface from the project.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodOnlyUsedFromInnerClass" defaultSeverity="WARNING" displayName="Private method only used from inner class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;private&lt;/code&gt; methods which
are only called from an inner class of the class containing the method. Such
methods can be safely moved into that inner class.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
public class Outer {
  public static void main(String[] args) {
    new Inner().run(args[0]);
  }

  static class Inner {
    void run(String arg) {
      // Method isEmpty() is used from Inner class only
      // consider moving it to the Inner class
      if (!isEmpty(arg)) {
        System.out.println("Argument is supplied");
      }
    }
  }

  private static boolean isEmpty(String s) {
    return s != null &amp;&amp; s.trim().isEmpty();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox below to ignore &lt;code&gt;private&lt;/code&gt;
methods which are called from an anonymous or local class.
&lt;p&gt;
Use the third checkbox to only report &lt;code&gt;static&lt;/code&gt; methods.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MagicNumber" defaultSeverity="WARNING" displayName="Magic number" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports "magic numbers": numeric literals that are not named by a constant declaration.
&lt;p&gt;Using magic numbers can lead to unclear code, as well as errors if a magic
number is changed in one location but remains unchanged not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,
  0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void checkFileSize(long bytes) {
    if (bytes &gt; 1_048_576) {
      throw new IllegalArgumentException("too big");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix introduces a new constant:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  static final int MAX_SUPPORTED_FILE_SIZE = 1_048_576;

  void checkFileSize(long bytes) {
    if (bytes &gt; MAX_SUPPORTED_FILE_SIZE) {
      throw new IllegalArgumentException("too big");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore constants in 'hashCode()' methods&lt;/b&gt; option to disable this inspection within &lt;code&gt;hashCode()&lt;/code&gt; methods.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore in annotations&lt;/b&gt; option to ignore magic numbers in annotations.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore initial capacity for StringBuilders and Collections&lt;/b&gt; option to ignore magic numbers used as initial capacity when constructing
    &lt;code&gt;Collection&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;,
    &lt;code&gt;StringBuilder&lt;/code&gt; or &lt;code&gt;StringBuffer&lt;/code&gt; objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeclareCollectionAsInterface" defaultSeverity="WARNING" displayName="Collection declared by class, not interface" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations of &lt;code&gt;Collection&lt;/code&gt; variables made by using the collection class as a type,
rather than an appropriate interface. The warning is not issued if weakening the variable type 
will cause a compilation error.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Warning: concrete collection class ArrayList used.
  int getTotalLength(ArrayList&amp;lt;String&amp;gt; list) {
    return list.stream().mapToInt(String::length).sum();
  }

  // No warning, as trimToSize() method is not
  // available in the List interface
  void addData(ArrayList&amp;lt;String&amp;gt; data) {
    data.add("Hello");
    data.add("World");
    data.trimToSize();
  }
&lt;/code&gt;&lt;/pre&gt;
A quick-fix is suggested to use the appropriate collection interface (e.g. &lt;code&gt;Collection&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, or &lt;code&gt;List&lt;/code&gt;).
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeMayBeWeakened" defaultSeverity="WARNING" displayName="Type may be weakened" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variable and method return types that can be changed to a more abstract (weaker) type.
This allows making the code more abstract, hence more reusable.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Type of parameter can be weakened to java.util.List
  void processList(ArrayList&amp;lt;String&amp;gt; list) {
    if (list.isEmpty()) return;
    System.out.println("Processing");
    for (String s : list) {
      System.out.println("String: " + s);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Enable the &lt;b&gt;Only weaken to an interface&lt;/b&gt; checkbox below
  to only report a problem when the type can be weakened to an interface type.
&lt;/p&gt;
&lt;p&gt;
  Enable the &lt;b&gt;Do not suggest weakening variable declared as 'var'&lt;/b&gt; checkbox below
  to prevent reporting on local variables declared using the 'var' keyword (Java 10+)
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Stop classes&lt;/b&gt; are intended to prevent weakening to classes
lower than stop classes, even if it is possible.
In some cases, this may improve readability.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="OptionalUsedAsFieldOrParameterType" defaultSeverity="WARNING" displayName="'Optional' used as field or parameter type" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any cases in which &lt;code&gt;java.util.Optional&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;java.util.OptionalDouble&lt;/code&gt;, &lt;code&gt;java.util.OptionalInt&lt;/code&gt;,
&lt;code&gt;java.util.OptionalLong&lt;/code&gt;, or &lt;code&gt;com.google.common.base.Optional&lt;/code&gt; are used as types for fields or parameters.
&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt; was designed to provide a limited mechanism for library method return types in which a clear way to represent "no result"
  was needed.&lt;/p&gt;
&lt;p&gt;Using a field with the &lt;code&gt;java.util.Optional&lt;/code&gt; type is also problematic if the class needs to be
  &lt;code&gt;Serializable&lt;/code&gt;, as &lt;code&gt;java.util.Optional&lt;/code&gt; is not serializable.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass {
    Optional&amp;lt;String&amp;gt; name; // Optional field

    // Optional parameter
    void setName(Optional&amp;lt;String&amp;gt; name) {
      this.name = name;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FeatureEnvy" defaultSeverity="WARNING" displayName="Feature envy" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;em&gt;Feature Envy&lt;/em&gt; code smell. The warning is thrown when a method calls methods on another class three
or more times. Calls to library classes, parent classes, contained or containing
classes are not counted by this inspection. Feature
envy is often an indication of the fact that this functionality is located in a wrong class.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class JobManager {
    // Warning: this method calls three methods
    // of the Job class
    // It would be better to move this chain of
    // calls to the Job class itself.
    void performJob(Job job) {
      job.beforeStart();
      job.process();
      job.afterProcessing();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassReferencesSubclass" defaultSeverity="WARNING" displayName="Class references one of its subclasses" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes which contain references to one of their subclasses.
Such references may be confusing and violate several rules of object-oriented design.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Entity {
    // Warning: the class references its subclass
    void compare(SimpleEntity entity) {
      ...
    }
  }
  class SimpleEntity extends Entity {
    ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyStrongTypeCast" defaultSeverity="WARNING" displayName="Overly strong type cast" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type casts that are overly strong. For instance,
casting an object to &lt;code&gt;ArrayList&lt;/code&gt; when casting it to
&lt;code&gt;List&lt;/code&gt; would do just as well.
&lt;p&gt;
  &lt;b&gt;Note:&lt;/b&gt; much like the &lt;i&gt;Redundant type cast&lt;/i&gt;
  inspection, applying the fix for this inspection may change the semantics of your program if you are
  intentionally using an overly strong cast to cause a &lt;code&gt;ClassCastException&lt;/code&gt; to be generated.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  interface Super {
    void doSmth();
  }
  interface Sub extends Super { }

  void use(Object obj) {
    // Warning: ((Super)obj).doSmth() could be used
    ((Sub)obj).doSmth();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to ignore casts when there's a matching &lt;code&gt;instanceof&lt;/code&gt; check in the code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstanceofChain" defaultSeverity="WARNING" displayName="Chain of 'instanceof' checks" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any chains of &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; statements all of whose conditions are &lt;code&gt;instanceof&lt;/code&gt; expressions
or class equality expressions (e.g. comparison with &lt;code&gt;String.class&lt;/code&gt;).
Such constructions usually indicate a failure in object-oriented design which
dictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains
of type tests.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  double getArea(Shape shape) {
    // Warning: abstraction failure.
    // It would be better to declare a getArea()
    // abstract method in the shape interface
    // and implement it in every inheritor.
    if (shape instanceof Point) {
      return 0;
    }
    if (shape instanceof Circle) {
      return Math.PI *
        Math.pow(((Circle) shape).radius(), 2);
    }
    if (shape instanceof Rectangle) {
      return ((Rectangle) shape).width() *
        ((Rectangle) shape).height();
    }
    throw new IllegalArgumentException();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to ignore &lt;code&gt;instanceof&lt;/code&gt; expressions on library classes.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstanceofThis" defaultSeverity="WARNING" displayName="'instanceof' check for 'this'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;instanceof&lt;/code&gt; or &lt;code&gt;getClass() == SomeClass.class&lt;/code&gt; in which a
&lt;code&gt;this&lt;/code&gt; expression is checked.
&lt;p&gt;Such expressions indicate a failure of the object-oriented design, and should be replaced by
  polymorphic constructions.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Super {
  void process() {
    if (this instanceof Sub) { // warning
      doSomething();
    } else {
      doSomethingElse();
    }
  }
}
  
class Sub extends Super {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the problem, use an overriding method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Super {
  void process() {
    doSomethingElse();
  }
}
  
class Sub extends Super {
  @Override
  void process() {
    doSomething();
  }
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InterfaceMethodClashesWithObject" defaultSeverity="WARNING" displayName="Interface method clashes with method in 'Object'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports interface methods that clash with the &lt;b&gt;protected&lt;/b&gt; methods &lt;code&gt;clone()&lt;/code&gt; and &lt;code&gt;finalize()&lt;/code&gt; from the &lt;code&gt;java.lang.Object&lt;/code&gt; class.
&lt;p&gt;In an interface, it is possible to declare these methods with a return type that is incompatible with the &lt;code&gt;java.lang.Object&lt;/code&gt; methods.
  A class that implements such an interface will not be compilable.
  When the interface is functional, it remains possible to create a lambda from it, but this is not recommended.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Warning: this interface cannot be implemented
  // by any class, only by a lambda or method reference
  interface MyInterface {
    double clone();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BooleanParameter" defaultSeverity="WARNING" displayName="'public' method with 'boolean' parameter" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports public methods that accept a &lt;code&gt;boolean&lt;/code&gt; parameter.
&lt;p&gt;It's almost always bad practice to add a &lt;code&gt;boolean&lt;/code&gt; parameter to a public method (part of an API) if that method is not a setter.
When reading code using such a method, it can be difficult to decipher what the &lt;code&gt;boolean&lt;/code&gt; stands for without looking at
the source or documentation.&lt;/p&gt;
&lt;p&gt;This problem is also known as &lt;a href="https://ariya.io/2011/08/hall-of-api-shame-boolean-trap"&gt;the boolean trap&lt;/a&gt;.
  The &lt;code&gt;boolean&lt;/code&gt; parameter can often be replaced with an &lt;code&gt;enum&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Warning: it's hard to understand what the
  // boolean parameters mean when looking at
  // a call to this method
  public boolean setPermission(File f,
                               int access,
                               boolean enable,
                               boolean ownerOnly) {
    // ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the &lt;b&gt;Only report methods with multiple boolean parameters&lt;/b&gt; option to warn only when a method contains more than one boolean parameter.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticMethodOnlyUsedInOneClass" defaultSeverity="WARNING" displayName="Static member only used from one other class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;static&lt;/code&gt; methods and fields that
are only used from a class other than the containing class. Such members could be moved into the using class.
Factory methods and members accessed from an anonymous class inside the member's class are ignored by this inspection.
Convenience overloads, which call a method with the same name in the same class but have fewer parameters, are also ignored.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the first checkbox to suppress this inspection when the static member is only used from a test class.
&lt;p&gt;
Use the second checkbox below to ignore member usages from inside anonymous, local, or non-static inner classes.
&lt;p&gt;
Use the third checkbox below to not warn on members that cannot be moved without problems,
  for example, because a method with an identical signature is already present in the target class,
  or because a field or a method used inside the method will not be accessible when this method is moved.
&lt;p&gt;
Use the fourth checkbox to ignore members located in utility classes.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java language level migration aids" path="Java"><inspection shortName="UseCompareMethod" defaultSeverity="WARNING" displayName="'compare()' method can be used to compare numbers" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions that can be replaced by a call to the &lt;code&gt;Integer.compare()&lt;/code&gt; method or
a similar method from the &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, &lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt; or &lt;code&gt;Float&lt;/code&gt; classes,
instead of more verbose or less efficient constructs.
&lt;p&gt;If &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are boxed integers, then &lt;code&gt;x.compareTo(y)&lt;/code&gt; is suggested,
  if they are primitives &lt;code&gt;Integer.compare(x, y)&lt;/code&gt; is suggested.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public int compare(int x, int y) {
    return x &gt; y ? 1 : x &amp;lt; y ? -1 : 0;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public int compare(int x, int y) {
    return Integer.compare(x, y);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Note that &lt;code&gt;Double.compare&lt;/code&gt; and &lt;code&gt;Float.compare&lt;/code&gt; slightly change the code semantics. In particular,
  they make &lt;code&gt;-0.0&lt;/code&gt; and &lt;code&gt;0.0&lt;/code&gt; distinguishable (&lt;code&gt;Double.compare(-0.0, 0.0)&lt;/code&gt; yields -1).
  Also, they consistently process &lt;code&gt;NaN&lt;/code&gt; value. In most of the cases, this semantics change actually improves the
  code. Use the checkbox to disable this inspection for floating point numbers if semantics change is unacceptable
  in your case.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EnumerationCanBeIteration" defaultSeverity="WARNING" displayName="Enumeration can be iteration" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Enumeration&lt;/code&gt; methods that are used on collections and may be replaced with equivalent
&lt;code&gt;Iterator&lt;/code&gt; constructs.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Enumeration&amp;lt;String&amp;gt; keys = map.keys();
  while (keys.hasMoreElements()) {
    String name = keys.nextElement();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Iterator&amp;lt;String&amp;gt; iterator = map.keySet().iterator();
  while (iterator.hasNext()) {
    String name = iterator.next();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfCanBeSwitch" defaultSeverity="WARNING" displayName="'if' can be replaced with 'switch'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; statements that can be replaced with &lt;code&gt;switch&lt;/code&gt; statements.
&lt;p&gt;The replacement result is usually shorter and clearer.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(String str) {
    if (str.equals("1")) {
      System.out.println(1);
    } else if (str.equals("2")) {
      System.out.println(2);
    } else if (str.equals("3")) {
      System.out.println(3);
    } else {
      System.out.println(4);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(String str) {
    switch (str) {
      case "1" -&amp;gt; System.out.println(1);
      case "2" -&amp;gt; System.out.println(2);
      case "3" -&amp;gt; System.out.println(3);
      default -&amp;gt; System.out.println(4);
    }
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 7 or higher.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Minimum number of 'if' condition branches&lt;/b&gt; field to specify the minimum number of &lt;code&gt;if&lt;/code&gt; condition branches
  for an &lt;code&gt;if&lt;/code&gt; statement to have to be reported. Note that the terminal &lt;code&gt;else&lt;/code&gt; branch (without &lt;code&gt;if&lt;/code&gt;) is not counted.&lt;/p&gt;
&lt;p&gt;
Use the &lt;b&gt;Suggest switch on numbers&lt;/b&gt; option to enable the suggestion of &lt;code&gt;switch&lt;/code&gt; statements on
primitive and boxed numbers and characters.
&lt;p&gt;
Use the &lt;b&gt;Suggest switch on enums&lt;/b&gt; option to enable the suggestion of &lt;code&gt;switch&lt;/code&gt; statements on
&lt;code&gt;enum&lt;/code&gt; constants.
&lt;p&gt;
  Use the &lt;b&gt;Only suggest on null-safe expressions&lt;/b&gt; option to suggest &lt;code&gt;switch&lt;/code&gt; statements that can't introduce a &lt;code&gt;NullPointerException&lt;/code&gt; only.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Declaration redundancy" path="Groovy"><inspection shortName="GroovyUnusedDeclaration" defaultSeverity="WARNING" displayName="Unused declaration" enabled="true" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unused classes, methods and fields.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Department {
      private Organization myOrganization;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;Department&lt;/code&gt; explicitly references &lt;code&gt;Organization&lt;/code&gt; but if &lt;code&gt;Department&lt;/code&gt; class itself is unused,
then inspection would report both classes. 

&lt;p&gt;
The inspection also reports parameters, which are not used by their methods and all method implementations/overriders, as well as local
variables, which are declared but not used.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;For more information, see the same inspection in Java.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="General" path="Scala"><inspection shortName="ScalaRedundantCast" defaultSeverity="WARNING" displayName="Redundant cast inspection" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;&lt;p&gt;Reports redundant &lt;code&gt;asInstanceOf&lt;/code&gt; casts and suggests removing them.&lt;/p&gt;
&lt;p&gt;A cast is redundant if the type of expression is the same as the cast type.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  "test".asInstanceOf[String]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  "test"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PrivateShadow" defaultSeverity="WARNING" displayName="Class parameter shadows superclass var" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Class parameter shadows superclass var&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Reports class parameters that shadow a superclass &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
class Animal {
  var name: String = ""
}

class Cat(name: String = "") extends Animal {
  // Makes `name` a private[this] val, which shadows the var
  def usage = name
}
&lt;/pre&gt;
&lt;p&gt;When extending a class with a non-&lt;code&gt;private&lt;/code&gt; &lt;code&gt;var&lt;/code&gt;, the user might expect that a class parameter of the subclass
    will override the &lt;code&gt;var&lt;/code&gt; from the superclass, but in fact it will only shadow it. This may sometimes lead to
    non-trivial errors.&lt;/p&gt;
&lt;p&gt;Please note that the highlight will appear only if the value is actually used.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkInnerCaseObjectsAsFinal" defaultSeverity="WARNING" displayName="Mark inner case objects as final" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing final modifiers for case objects.&lt;/p&gt;
&lt;p&gt;While inner case objects are effectively final in Scala, they cannot be extended, and they are not always
  flagged as such in the compiled bytecode. So, this inspection encourages you to do so.
    See &lt;a href="https://nrinaudo.github.io/scala-best-practices/adts/final_case_objects.html"&gt;best practices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  object Outer {
    case object Inner
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  object Outer {
    final case object Inner
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RelativeImport" defaultSeverity="WARNING" displayName="Relative import" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports import statements that do not use a fully qualified reference.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package org.something

  import someInnerPackage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package org.something

  import org.something.someInnerPackage
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedViewBound" defaultSeverity="WARNING" displayName="View bounds are deprecated" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of view bounds and suggests to replace them with implicit parameters.&lt;/p&gt;
&lt;p&gt;View bounds are deprecated: &lt;a href="https://issues.scala-lang.org/browse/SI-7629"&gt;SI-7629&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Sample[A &amp;lt;% Int]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Sample[A]()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedStatefulMonads" defaultSeverity="WARNING" displayName="Nested stateful monads" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports nested stateful monads which may lead to architectural errors.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import scala.concurrent.Future
  val a = Future { }
  Future { a }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MatchToPartialFunction" defaultSeverity="WARNING" displayName="Match statement convertible to pattern matching anonymous function" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports match statements that can be converted to pattern matching anonymous functions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  iterable.map(value =&gt; value match {
      case Some(value) =&gt; whenValue(value)
      case None =&gt; whenNothing()
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  iterable.map {
      case Some(value) =&gt; whenValue(value)
      case None =&gt; whenNothing()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedPackageObject" defaultSeverity="WARNING" displayName="Deprecated package object" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usage of a package object.&lt;/p&gt;
&lt;p&gt;Package objects are deprecated in Scala 3 and are going to be phased out. Consider using top level definitions or regular objects instead.
&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://dotty.epfl.ch/docs/reference/dropped-features/package-objects.html"&gt;Package objects in Dotty&lt;/a&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostfixMethodCall" defaultSeverity="WARNING" displayName="Use of postfix method call" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports postfix method invocations.&lt;/p&gt;
&lt;p&gt;It can interfere with semicolon inference. It is &lt;a href="https://twitter.com/#!/odersky/status/49882758968905728"&gt;recommended&lt;/a&gt; for users to use a normal dot notation instead.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  "test" length
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  "test".length
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FloatLiteralEndingWithDecimalPoint" defaultSeverity="WARNING" displayName="Floating point literal ending with '.'" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports floating point literals ending with a decimal point ('.').&lt;/p&gt;
&lt;p&gt;It is recommended for users to avoid them to prevent confusion with method call syntax.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x = 1.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var x = 1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NoTailRecursionAnnotation" defaultSeverity="WARNING" displayName="No tail recursion annotation" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports tail recursive methods without &lt;code&gt;@tailrec&lt;/code&gt; annotation which verifies that the method will be
  compiled with
  tail call optimization.&lt;/p&gt;

&lt;p&gt;Note that a method must be effectively &lt;code&gt;final&lt;/code&gt; for this inspection to be shown.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def factorial(n: Long, acc: Long = 1): Long =
    if (n &lt;= 1) acc else factorial(n - 1, acc * n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @tailrec
  def factorial(n: Long, acc: Long = 1): Long =
    if (n &lt;= 1) acc else factorial(n - 1, acc * n)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaDeprecation" defaultSeverity="WARNING" displayName="Scala deprecation" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of deprecated symbols.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @deprecated("don't use test")
  def test = ???

  test // using test is deprecated
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NotImplementedCode" defaultSeverity="WARNING" displayName="Not implemented code" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the &lt;code&gt;???&lt;/code&gt; placeholder that is not implemented.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def foo = &lt;strong&gt;???&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoopVariableNotUpdated" defaultSeverity="WARNING" displayName="Loop variable not updated inside loop" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports variables that are used in a loop condition and are not updated inside the loop.&lt;/p&gt;

&lt;p&gt;These may cause an infinite loop if executed and are probably not what was intended.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ChainedPackage" defaultSeverity="WARNING" displayName="Base package declaration" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports package statements that should be chained at base package.&lt;/p&gt;
&lt;p&gt;Only applicable when a base package is defined in &lt;b&gt;Settings | Languages &amp; Frameworks | Scala | Base Packages&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package org.example.application.NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package org.example.application
  package NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaRedundantConversion" defaultSeverity="WARNING" displayName="Redundant conversion inspection" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;&lt;p&gt;Reports redundant conversion method call (&lt;code&gt;toInt&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;, and so on).&lt;/p&gt;

&lt;p&gt;A conversion is redundant if the conversion doesn't change the type of the collection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  "Test".toString
  Seq(1, 2).toSeq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  "Test"
  Seq(1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaMalformedFormatString" defaultSeverity="WARNING" displayName="Malformed format string" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports illegal syntax in format strings, format specifiers that are incompatible with the given arguments,
    insufficient arguments given for a format string, and so on.&lt;/p&gt;
&lt;p&gt;The inspection works in the following places:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;code&gt;"&amp;hellip;".format(&amp;hellip;)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;value.formatted("&amp;hellip;")&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;String.format("&amp;hellip;", &amp;hellip;)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;printf("&amp;hellip;", &amp;hellip;)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;System.out.printf("&amp;hellip;", &amp;hellip;)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Interpolated strings&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbstractValueInTrait" defaultSeverity="WARNING" displayName="Abstract value in trait" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;&lt;p&gt;Reports abstract values and variables in traits that may cause errors during initialization.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait Sample {
    val method: Method
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaUnnecessaryParentheses" defaultSeverity="WARNING" displayName="Unnecessary parentheses" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary parentheses in expressions, types, and patterns.&lt;/p&gt;

&lt;p&gt;Parentheses are considered unnecessary if the semantics of the program remains unchanged when the parentheses are removed.&lt;/p&gt;
&lt;p&gt;Use the checkboxes below to customize the behaviour of the inspection.&lt;/p&gt;
&lt;p&gt;Parentheses are considered clarifying if they separate an infix expression, type element, or pattern as a part of a larger infix element.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x = (3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IsInstanceOf" defaultSeverity="WARNING" displayName="isInstanceOf" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing explicit type in &lt;code&gt;isInstanceOf&lt;/code&gt; checks.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
"abc".isInstanceOf
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MultipleTargetsTargetName" defaultSeverity="ERROR" displayName="Multiple targets for @targetName" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usage of &lt;code&gt;@targetName&lt;/code&gt; annotation on multiple targets.&lt;/p&gt;

&lt;p&gt;The quick-fix removes &lt;code&gt;@targetName&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // 1
  val list: List[Int] = (1 to 5).toList
  @targetName("head_and_tail")
  val (head, tail) = (list.head, list.tail)

  // 2
  enum E:
    case A
    @targetName("b_and_c")
    case B, C
    case D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // 1
  val list: List[Int] = (1 to 5).toList
  val (head, tail) = (list.head, list.tail)

  // 2
  enum E:
    case A
    case B, C
    case D
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ForwardReference" defaultSeverity="WARNING" displayName="Suspicious forward reference" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of forward references on the class level, which can lead to unexpected behavior during class
  initialization.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    val first: Int  = second + 5 // here second is 0
    val second: Int = 5
    // first will be 5 and not 10
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CaseClassParam" defaultSeverity="WARNING" displayName="Case class parameter" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;&lt;p&gt;Reports redundant &lt;code&gt;val&lt;/code&gt; modifiers on &lt;code&gt;case class&lt;/code&gt; parameters.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  case class W (val x: Int)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  case class W (x: Int)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LanguageFeature" defaultSeverity="WARNING" displayName="Advanced language features" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of advanced language features that are not enabled in the current file.&lt;/p&gt;

&lt;p&gt;Advanced language features need to be enabled either by the corresponding compiler option
    or by importing an explicit feature flag in the file where they are used.&lt;/p&gt;

&lt;p&gt;
    Postfix operator notation:&lt;br&gt;
    &lt;code&gt;val s = 123 toString&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    Reflective call:&lt;br&gt;
    &lt;code&gt;def foo(v: {def bar()}) = v.bar()&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    Dynamic member selection:&lt;br&gt;
    &lt;code&gt;class Foo extends Dynamic&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    Implicit conversion:&lt;br&gt;
    &lt;code&gt;implicit def toInt(s: String) = s.toInt&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    Higher-kinded type &lt;small&gt;(enabled by default since &lt;em&gt;Scala 2.13.1&lt;/em&gt;)&lt;/small&gt;:&lt;br&gt;
    &lt;code&gt;class Bar[M[A]]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    Existential type:&lt;br&gt;
    &lt;code&gt;def foo(v: Seq[T] forSome { type T })&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
    Macro definition:&lt;br&gt;
    &lt;code&gt;def assert(s: String) = macro Asserts.assertImpl&lt;/code&gt;
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;Scala compiler may also emit these warnings when "-feature" option is provided. &lt;/p&gt;

&lt;p&gt;For compiler options see: &lt;a href="settings://scala.compiler?Features"&gt;File | Settings | Build, Execution, Deployment | Compiler | Scala Compiler | Features&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TypeParameterShadow" defaultSeverity="WARNING" displayName="Suspicious shadowing by a Type Parameter" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports type parameters that shadow other type parameters defined in the enclosing scope.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test[T] {
    def inner[T]: Int = ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NoTargetNameAnnotationForOperatorLikeDefinition" defaultSeverity="WEAK WARNING" displayName="Definition with an operator name doesn't have @targetName annotation" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the definitions with an operator-like (symbolic) names without &lt;code&gt;@targetName&lt;/code&gt; annotation.&lt;/p&gt;
&lt;p&gt;It is recommended that definitions with symbolic names have a &lt;code&gt;@targetName&lt;/code&gt; annotation. This will establish an alternate name that is easier to search for and will avoid cryptic encodings in runtime diagnostics.&lt;/p&gt;
&lt;p&gt;Definitions with names in backticks that are not legal host platform names should also have a &lt;code&gt;@targetName&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://docs.scala-lang.org/scala3/reference/other-new-features/targetName.html"&gt;The @targetName annotation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The quick-fix adds a &lt;code&gt;@targetName&lt;/code&gt; annotation with an empty external name.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="KindProjectorSimplifyTypeProjection" defaultSeverity="WARNING" displayName="Kind Projector: simplify type" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports type projections and suggests to convert them to &lt;b&gt;Kind Projector&lt;/b&gt; format.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def a: ({type L[A] = (A, A)})#L
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def a: Lambda[A =&gt; (A, A)]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;This inspection runs when the Kind Projector plugin is enabled.&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultipleArgListsInAnnotation" defaultSeverity="WARNING" displayName="Multiple arg lists in annotation constructor" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports annotations that have multiple argument lists.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @someAnnotation()()
  object Test
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaDeprecatedIdentifier" defaultSeverity="WARNING" displayName="Deprecated identifier" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of &lt;code&gt;then&lt;/code&gt; as identifier.&lt;/p&gt;
&lt;p&gt;The word &lt;b&gt;then&lt;/b&gt; is reserved as a keyword in Scala 3. Its usage as identifier is deprecated.
    See &lt;a href="https://docs.scala-lang.org/sips/pending/uncluttering-control.html"&gt;SIP-12&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val then = "some text"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonLocalReturn" defaultSeverity="WARNING" displayName="Non-local return statement" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Non-local return statement&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Reports when a &lt;code&gt;return&lt;/code&gt; keyword is used inside an anonymous function to jump out of it early.
    Nonlocal returns are implemented by throwing and catching &lt;code&gt;scala.runtime.NonLocalReturnException&lt;/code&gt;-s.
    This is rarely what is intended by the programmer. It can be problematic because of the hidden performance cost of
    throwing and catching exceptions. &lt;/p&gt;
&lt;p&gt;Furthermore, it is a leaky implementation: a catch-all exception handler can intercept a &lt;code&gt;NonLocalReturnException&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
def foo(numbers: Seq[Int]): Int =
  numbers.map { n =&gt;
    if (n &gt; 5)
      return 0 // highlighted
    n * 2
  }.sum
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaPackageName" defaultSeverity="WARNING" displayName="Wrong package statement" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports files with package statements that do not correspond to the directory structure.&lt;/p&gt;

&lt;p&gt;The quick-fix suggests adjusting the package statement or moving the file into the correct directory.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SingleImport" defaultSeverity="WARNING" displayName="Unnecessary braces in import inspection" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary curly braces in an import expression.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import scala.math.{max}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import scala.math.max
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeAnnotation" defaultSeverity="WARNING" displayName="Type annotation required" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports properties and methods without explicit type annotations that are required according to the configured code
    style.&lt;/p&gt;
&lt;p&gt;
    See &lt;a href="settings://preferences.sourceCode.Scala?Type%20Annotations"&gt;Settings | Editor | Code Style | Scala | Type Annotations&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KindProjectorUseCorrectLambdaKeyword" defaultSeverity="WARNING" displayName="Kind Projector: Use correct lambda keyword" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports using `λ`.&lt;/p&gt;
&lt;p&gt;When using function syntax from the &lt;b&gt;Kind Projector&lt;/b&gt; plugin, use `Lambda` instead of `λ`. You can change your code style
    settings to use `λ` instead of `Lambda` in &lt;b&gt;Settings | Editor | Code Style | Scala | Other&lt;/b&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;This inspection runs when the Kind Projector plugin is enabled.&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifyBooleanMatch" defaultSeverity="WARNING" displayName="Trivial match can be simplified" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports trivial pattern matches on boolean expressions that can be replaced by conditional statements.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val bool: Boolean
  bool match {
    case true =&gt; ???
    case false =&gt; ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val bool: Boolean
  if (bool) {
    ???
  } else {
    ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedKindProjectorSyntax" defaultSeverity="WARNING" displayName="Deprecated kind-projector syntax" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usage of the &lt;code&gt;?&lt;/code&gt; identifier in kind-projector syntax.
&lt;p&gt;Teh &lt;code&gt;?&lt;/code&gt; identifier is going to be used for wildcard arguments in types in Scala 3 (see &lt;a href="https://dotty.epfl.ch/docs/reference/changed-features/wildcards.html"&gt;Wildcard Arguments in Types&lt;/a&gt;).
    Its usage in kind-projector type lambdas is deprecated and is going to be superseeded by &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List[?]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List[*]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;This inspection runs when the &lt;b&gt;Kind Projector&lt;/b&gt; plugin is enabled.&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyTargetName" defaultSeverity="ERROR" displayName="Empty @targetName external name" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usage of &lt;code&gt;@targetName&lt;/code&gt; with empty external name parameter.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @targetName("")
  val *^*^* = 42
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="HashCodeUsesVar" defaultSeverity="WEAK WARNING" displayName="Non-value field is accessed in 'hashCode()'" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;var&lt;/code&gt; fields if they are used in &lt;code&gt;hashCode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    var value = 3
    override def hashCode(): Int =
      value // value can change, indicating a misuse in hashCode()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldFromDelayedInit" defaultSeverity="WARNING" displayName="Field from DelayedInit" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports fields defined in subclasses of &lt;code&gt;DelayedInit&lt;/code&gt; that are initialized only when method
  &lt;code&gt;main&lt;/code&gt; is executed.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    println(MyApp.initializedLater) // prints 0
  }
  object MyApp extends DelayedInit {
    val initializedLater = 3
    override def delayedInit(body: =&gt; Unit): Unit = {
      new Test
      body
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AbsoluteImport" defaultSeverity="WARNING" displayName="Absolute import" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fully qualified imports that can be relative to base package (&lt;b&gt;Settings | Languages &amp; Frameworks | Scala | Base Packages&lt;/b&gt;).
&lt;p&gt;Only applicable when the &lt;b&gt;Except for base package&lt;/b&gt; option is enabled in &lt;b&gt;Settings | Editor | Code Style |
  Scala | Imports&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package org.example.application
  package ui

  import org.example.application.model.Data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package org.example.application
  package ui

  import model.Data
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedAlphanumericInfixCall" defaultSeverity="WARNING" displayName="Alphanumeric definition used as infix operator is not declared `infix`" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of alphanumeric definitions without `infix` modifier as infix operator.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Wrap in backticks" quick-fix adds &lt;code&gt;`&lt;/code&gt; symbols around calls.&lt;/li&gt;
&lt;li&gt;"Convert from infix expression" quick-fix converts infix call to method syntax &lt;code&gt;.method(...)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;"Convert from infix type" quick-fix converts infix type to prefix syntax &lt;code&gt;Type[...]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;"Convert from infix pattern" quick-fix converts infix pattern to prefix syntax &lt;code&gt;pattern(...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C:
    def op(x: Int): Int = ???
  type Or[X, Y]
  case class Pair[T](x: T, y: T)

  val c = C()
  val p = Pair(1, 2)

  c op 2
  val or: Int Or String = ???
  val _ Pair _ = p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the "Wrap in backticks" quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C:
    def op(x: Int): Int = ???
  type Or[X, Y]
  case class Pair[T](x: T, y: T)

  val c = C()
  val p = Pair(1, 2)

  c `op` 2
  val or: Int `Or` String = ???
  val _ `Pair` _ = p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the "Convert from infix expression" quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C:
    def op(x: Int): Int = ???
  type Or[X, Y]
  case class Pair[T](x: T, y: T)

  val c = C()
  val p = Pair(1, 2)

  c.op(2)
  val or: Int Or String = ???
  val _ Pair _ = p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the "Convert from infix type" quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C:
    def op(x: Int): Int = ???
  type Or[X, Y]
  case class Pair[T](x: T, y: T)

  val c = C()
  val p = Pair(1, 2)

  c op 2
  val or: Or[Int, String] = ???
  val _ Pair _ = p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the "Convert from infix pattern" quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C:
    def op(x: Int): Int = ???
  type Or[X, Y]
  case class Pair[T](x: T, y: T)

  val c = C()
  val p = Pair(1, 2)

  c op 2
  val or: Int Or String = ???
  val Pair(_, _) = p
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ComparingUnrelatedTypes" defaultSeverity="WARNING" displayName="Comparing unrelated types" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports comparisons (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;) of expressions, which cannot be of the same type.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  1 == "test"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NameBooleanParameters" defaultSeverity="WARNING" displayName="Name boolean parameters" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports and suggests naming boolean parameters.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def execute(optionA: Boolean, optionB: Boolean): Unit = ???
  execute(true, false)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def execute(optionA: Boolean, optionB: Boolean): Unit = ???
  execute(optionA = true, optionB = false)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantBlock" defaultSeverity="WARNING" displayName="Redundant block" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant enclosing blocks in interpolated strings.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val name = "Andy"
  s"Do you know ${name}?"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val name = "Andy"
  s"Do you know $name?"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverridingWithDifferentTargetName" defaultSeverity="ERROR" displayName="Definition and the overridden member have different @targetName annotations" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the definitions with a &lt;code&gt;@targetName&lt;/code&gt; annotation that override definitions with &lt;code&gt;@targetName&lt;/code&gt; annotation but have different external names.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://docs.scala-lang.org/scala3/reference/other-new-features/targetName.html"&gt;The @targetName annotation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The quick-fix replaces the &lt;code&gt;@targetName&lt;/code&gt; annotation's external name with external name of the overridden definition.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait A:
    @targetName("multiply")
    def *(i: Int): A

  class B extends A:
    @targetName("times")
    override def *(i: Int): A = ???
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait A:
    @targetName("multiply")
    def *(i: Int): A

  class B extends A:
    @targetName("multiply")
    override def *(i: Int): A = ???
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantFinalOnToplevelObject" defaultSeverity="WARNING" displayName="'final' modifier is redundant for toplevel objects" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;final&lt;/code&gt; modifiers on toplevel objects.&lt;/p&gt;
&lt;p&gt;They are redundant according to the &lt;a href="https://www.scala-lang.org/files/archive/spec/2.13/05-classes-and-objects.html#final"&gt;Scala specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The quick-fix removes the &lt;code&gt;final&lt;/code&gt; modifier.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  final object Test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  object Test
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimplifyBoolean" defaultSeverity="WARNING" displayName="Simplify boolean expression" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports boolean expressions that can be simplified.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  true || false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  true
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LegacyStringFormatting" defaultSeverity="WARNING" displayName="Legacy string formatting" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports legacy string formatting expressions (via "format", "formatted" or string concatenation) that
  can be converted to interpolated strings.&lt;/p&gt;
&lt;p&gt;The new syntax is more concise, offers more static checking and provides a better runtime performance.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val str = "test"
  "test %s".format(str)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val str = "test"
  s"test $str"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaUnreachableCode" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unreachable code.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Unit = {
    throw new Exception()
    println("this will never be reached")
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Unit = {
    throw new Exception()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaUnusedSymbol" defaultSeverity="WARNING" displayName="Unused declaration" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports declarations that are not used.&lt;/p&gt;

&lt;p&gt;The quick-fix removes the unused declaration.&lt;/p&gt;

&lt;p&gt;In the &lt;b&gt;Options&lt;/b&gt; below, you can control if the inspection should work for public and/or local declarations.
  In case of local declarations, on top of enabling and disabling the inspection, you can also make it dependent
  on the existence of one of three compiler options: &lt;code&gt;-Wunused:locals&lt;/code&gt;, &lt;code&gt;-Wunused:linted&lt;/code&gt;, or &lt;code&gt;-Xlint:unused&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Int = {
    val unused = 3
    3
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Int = {
    3
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantClassParam" defaultSeverity="WEAK WARNING" displayName="Redundant class parameter clause" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;&lt;p&gt;Reports redundant empty parameter clauses.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConvertExpressionToSAM" defaultSeverity="WARNING" displayName="Convert expression to Single Abstract Method (SAM)" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports expressions that can be converted to SAM (Single Abstract Method).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new Thread(new Runnable {
      override def run() = println()
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new Thread(() =&gt; println())
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverridingRemovingTargetName" defaultSeverity="ERROR" displayName="Definition misses a @targetName annotation" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the definitions without a &lt;code&gt;@targetName&lt;/code&gt; annotation that override definitions with &lt;code&gt;@targetName&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://docs.scala-lang.org/scala3/reference/other-new-features/targetName.html"&gt;The @targetName annotation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The quick-fix adds &lt;code&gt;@targetName&lt;/code&gt; annotation with external name of the overridden definition.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait A:
    @targetName("multiply")
    def *(i: Int): A

  class B extends A:
    override def *(i: Int): A = ???
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  trait A:
    @targetName("multiply")
    def *(i: Int): A

  class B extends A:
    @targetName("multiply")
    override def *(i: Int): A = ???
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="OverridingAddingTargetName" defaultSeverity="ERROR" displayName="Member has @targetName annotation when the overridden member does not" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the definitions with a &lt;code&gt;@targetName&lt;/code&gt; annotation that override definitions without &lt;code&gt;@targetName&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://docs.scala-lang.org/scala3/reference/other-new-features/targetName.html"&gt;The @targetName annotation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The quick-fix removes &lt;code&gt;@targetName&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A:
    def foo: Int = 1

  class B extends A:
    @targetName("overriddenFoo")
    override def foo: Int = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A:
    def foo: Int = 1

  class B extends A:
    override def foo: Int = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DeprecatedAggregateContextBounds" defaultSeverity="WARNING" displayName="Old style syntax for aggregate context bounds is deprecated" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of old style aggregate context bounds (with multiple &lt;code&gt;:&lt;/code&gt;)
    and suggests replacing them with the new syntax for aggregate bounds.&lt;/p&gt;
&lt;p&gt;Context bounds with multiple &lt;code&gt;:&lt;/code&gt; are deprecated: &lt;a href="https://docs.scala-lang.org/sips/sips/typeclasses-syntax.html#2-new-syntax-for-aggregate-context-bounds"&gt;SIP-64&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo[A : Monoid : Ord]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo[A : {Monoid, Ord}]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultipleTargetNameAnnotations" defaultSeverity="WARNING" displayName="Multiple @targetName annotations" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usage of multiple &lt;code&gt;@targetName&lt;/code&gt; annotations on a single element.&lt;/p&gt;
&lt;p&gt;All but the last @targetName annotation are ignored. Consider using at most one annotation per definition.&lt;/p&gt;

&lt;p&gt;The quick-fix removes selected &lt;code&gt;@targetName&lt;/code&gt; annotation.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DangerousCatchAll" defaultSeverity="WARNING" displayName="Missing type annotation" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports patterns in &lt;code&gt;catch&lt;/code&gt; blocks that match all types.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try f() catch {
    case e =&gt; ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fixes are applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  try f() catch {
    case e: Throwable =&gt; ???
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReferenceMustBePrefixed" defaultSeverity="WARNING" displayName="Reference must be prefixed" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports and fixes imported names that shadow common Scala classes such as &lt;code&gt;List&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util.List

  val list: List[Int] = null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.util
  import java.util.List

  val list: util.List[Int] = null
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryPartialFunction" defaultSeverity="WARNING" displayName="Unnecessary partial function" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports partial functions that could be replaced with normal functions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1).foreach {
    case _ =&gt; 3
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1).foreach(_ =&gt; 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaUnusedExpression" defaultSeverity="WEAK WARNING" displayName="Unused expression" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports expressions whose value is not used.&lt;/p&gt;

&lt;p&gt;Expressions that have side-effects or divert the control flow are not reported.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Int = {
    3 // unused
    3
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def test(): Int = {
    3
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeCheckCanBeMatch" defaultSeverity="WARNING" displayName="Type check can be pattern matching" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports type checks and type casts in a series of if-else statements and replaces them with pattern matching.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val value = 0
  if (value.isInstanceOf[Int]) {
    val x = value.asInstanceOf[Int] + 1
    val y = value.asInstanceOf[Int] + 2
  } else if (value.isInstanceOf[Long]) {
    val x = value.asInstanceOf[Long]
    println(x)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val value = 0
  value match {
    case i: Int =&gt;
      val x = i + 1
      val y = i + 2
    case x: Long =&gt;
      println(x)
    case _ =&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DoubleNegationScala" defaultSeverity="WARNING" displayName="Double negation" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports double negation in a boolean expression.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  !(!b)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  b
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;!-- tooltip end --&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaWeakerAccess" defaultSeverity="WARNING" displayName="Declaration access can be weaker" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes, methods, and variables whose access can be weaker.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def foo() {
    onlyUsedInFoo("foo", "foo")
  }
  def onlyUsedInFoo(x: String, y: String): Unit = {} // can be private
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ScalaFileName" defaultSeverity="WARNING" displayName="Class doesn't correspond to file name" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports files that do not have a type definition with the corresponding name.&lt;/p&gt;

&lt;p&gt;The quick-fix offers to either rename the file to match the type definition's name
    or rename the type definition to match the file name.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VariablePatternShadow" defaultSeverity="WARNING" displayName="Suspicious shadowing by a Variable Pattern" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports variable patterns that shadow stable identifiers defined in the enclosing scope.&lt;/p&gt;
&lt;p&gt;To perform an equality test against that value, use backticks.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val foo = 0
  0 match {
    case foo =&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val foo = 0
  0 match {
    case `foo` =&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VarCouldBeVal" defaultSeverity="WARNING" displayName="'var' could be a 'val'" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports any non-public &lt;code&gt;var&lt;/code&gt; that is never updated and could be a &lt;code&gt;val&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    private var s = 0
    println(s)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    private val s = 0
    println(s)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScalaXmlUnmatchedTag" defaultSeverity="ERROR" displayName="Unmatched tag" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unclosed or unopened &lt;code&gt;xml&lt;/code&gt; tags in Scala &lt;code&gt;xml&lt;/code&gt; notation.&lt;/p&gt;
&lt;p&gt;In the following example, &lt;code&gt;open&lt;/code&gt; is marked as unopened:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val someXml =
    &amp;lt;xml&amp;gt;
      &amp;lt;/open&amp;gt;
    &amp;lt;/xml&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Bitwise operation issues" path="Java"><inspection shortName="IncompatibleMask" defaultSeverity="WARNING" displayName="Incompatible bitwise mask operation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports bitwise mask expressions which are guaranteed to
evaluate to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
&lt;p&gt;
  The inspection checks the expressions of the form &lt;code&gt;(var &amp; constant1) == constant2&lt;/code&gt; or
  &lt;code&gt;(var | constant1) == constant2&lt;/code&gt;, where &lt;code&gt;constant1&lt;/code&gt;
  and &lt;code&gt;constant2&lt;/code&gt; are incompatible bitmask constants.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  // Incompatible mask: as the mask ends in 00,
  // the result could be 0x1200 but not 0x1234
  if ((mask &amp; 0xFF00) == 0x1234) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ShiftOutOfRange" defaultSeverity="WARNING" displayName="Shift operation by inappropriate constant" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports shift operations
where the shift value is a constant outside the reasonable range.
&lt;p&gt;Integer shift operations outside the range &lt;code&gt;0..31&lt;/code&gt; and long shift operations outside the
  range &lt;code&gt;0..63&lt;/code&gt; are reported. Shifting by negative or overly large values is almost certainly
  a coding error.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int shiftSize = 32;
  // Warning: shift by 32 bits is equivalent to shift by 0 bits, so there's no shift at all.
  int mask = (1 &amp;lt;&amp;lt; shiftSize) - 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessBitwiseExpression" defaultSeverity="WARNING" displayName="Pointless bitwise expression" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports pointless bitwise expressions.
&lt;p&gt;
  Such expressions include applying the &lt;code&gt;&amp;&lt;/code&gt; operator to the maximum value for the given type, applying the
  &lt;code&gt;or&lt;/code&gt; operator to zero, and shifting by zero. Such expressions may be the result of automated
  refactorings not followed through to completion and are unlikely to be originally intended.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Warning: operation is pointless and can be replaced with just `flags`
  // 0xFFFF_FFFF is the maximum value for an integer, and both literals are treated
  // as 32 bit integer literals.
  int bits = flags &amp; 0xFFFF_FFFF;

  // Warning: operation is pointless and can be replaced with just `bits`
  // OR-ing with 0 always outputs the other operand.
  int or = bits | 0x0;

  // Warning: operation is pointless, as always results in 0
  int xor = or ^ or;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Best practises" path="Gradle"><inspection shortName="ConfigurationAvoidance" defaultSeverity="WARNING" displayName="Configuration avoidance" enabled="true" language="UAST" pluginId="org.jetbrains.plugins.gradle" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;(Gradle 4.9+) Detects usage of API that interacts with tasks eagerly.&lt;/p&gt;
&lt;p&gt;Eager interaction with tasks implies some inconveniences:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The user should manually set up all dependencies between tasks;&lt;/li&gt;
  &lt;li&gt;In the &lt;a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases"&gt;configuration phase&lt;/a&gt;,
    all the tasks accessed via the eager API become configured, even if they are not executed afterwards.
    It results in performance degradation.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually, the eager API will be deprecated in favor of the lazy one.&lt;/p&gt;
&lt;p&gt;For a migration guide, see the
  &lt;a href="https://docs.gradle.org/current/userguide/task_configuration_avoidance.html"&gt;Gradle documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;task foo { // reports 'task', suggests replacing it with 'task.register'
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Structural search" path=""><inspection shortName="SSBasedInspection" defaultSeverity="WARNING" displayName="Structural search inspection" enabled="true" language="" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Allows configuring &lt;b&gt;Structural Search/Structural Replace&lt;/b&gt; templates that you can apply to the file you are editing.
&lt;/p&gt;
&lt;p&gt;All matches will be highlighted and marked with the template name that you have configured.
If you configure the &lt;b&gt;Structural Replace&lt;/b&gt; pattern as well, the corresponding replace option will be available as a quick-fix.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Ignore" path=""><inspection shortName="IgnoreSyntaxEntry" defaultSeverity="ERROR" displayName="Syntax entry" enabled="true" pluginId="mobi.hsz.idea.gitignore" pluginVersion="4.5.6" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Checks if syntax entry has correct value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IgnoreIncorrectEntry" defaultSeverity="ERROR" displayName="Incorrect entry" enabled="true" pluginId="mobi.hsz.idea.gitignore" pluginVersion="4.5.6" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Checks if entry has correct form in specific according to the specific syntax.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IgnoreCoverEntry" defaultSeverity="WARNING" displayName="Cover entry" enabled="true" pluginId="mobi.hsz.idea.gitignore" pluginVersion="4.5.6" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Checks if entry is covered by another entry.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IgnoreRelativeEntry" defaultSeverity="ERROR" displayName="Relative entry" enabled="true" pluginId="mobi.hsz.idea.gitignore" pluginVersion="4.5.6" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Checks if entry is a relative path.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IgnoreDuplicateEntry" defaultSeverity="ERROR" displayName="Duplicate entry" enabled="true" pluginId="mobi.hsz.idea.gitignore" pluginVersion="4.5.6" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Checks if entry is duplicated.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Cloning issues" path="Java"><inspection shortName="CloneableImplementsClone" defaultSeverity="WARNING" displayName="Cloneable class without 'clone()' method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes implementing the &lt;code&gt;Cloneable&lt;/code&gt; interface that don't override the
&lt;code&gt;clone()&lt;/code&gt; method.
&lt;p&gt;Such classes use the default implementation of &lt;code&gt;clone()&lt;/code&gt;,
  which isn't &lt;code&gt;public&lt;/code&gt; but &lt;code&gt;protected&lt;/code&gt;, and which does not copy the mutable state of the class.&lt;/p&gt;
&lt;p&gt;A quick-fix is available to generate a basic &lt;code&gt;clone()&lt;/code&gt; method,
which can be used as a basis for a properly functioning &lt;code&gt;clone()&lt;/code&gt; method
  expected from a &lt;code&gt;Cloneable&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Data &lt;b&gt;implements&lt;/b&gt; Cloneable {
    &lt;b&gt;private&lt;/b&gt; String[] names;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Data &lt;b&gt;implements&lt;/b&gt; Cloneable {
    &lt;b&gt;private&lt;/b&gt; String[] names;

    @Override
    &lt;b&gt;public&lt;/b&gt; Data clone() {
      &lt;b&gt;try&lt;/b&gt; {
        Data clone = (Data) &lt;b&gt;super&lt;/b&gt;.clone();
        // TODO: copy mutable state here, so the clone can't change the internals of the original
        &lt;b&gt;return&lt;/b&gt; clone;
      } &lt;b&gt;catch&lt;/b&gt; (CloneNotSupportedException e) {
        &lt;b&gt;throw new&lt;/b&gt; AssertionError();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!--
Note for translators: the text of the TODO comment in the example code above comes from
community/plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties
property key: cloneable.class.without.clone.todo.message
--&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore classes cloneable due to inheritance&lt;/b&gt; option to ignore classes that are
  &lt;code&gt;Cloneable&lt;/code&gt; because they inherit from the &lt;code&gt;Cloneable&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore when Cloneable is necessary to call clone() method of super class&lt;/b&gt;
  option to ignore classes that require implementing &lt;code&gt;Cloneable&lt;/code&gt; because they call the &lt;code&gt;clone()&lt;/code&gt; method from a superclass.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonPublicClone" defaultSeverity="WARNING" displayName="'clone()' method not 'public'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;clone()&lt;/code&gt; methods that are &lt;code&gt;protected&lt;/code&gt; and not &lt;code&gt;public&lt;/code&gt;.
&lt;p&gt;When overriding the &lt;code&gt;clone()&lt;/code&gt; method from &lt;code&gt;java.lang.Object&lt;/code&gt;, it is expected to make the method &lt;code&gt;public&lt;/code&gt;,
  so that it is accessible from non-subclasses outside the package.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CloneCallsConstructors" defaultSeverity="WARNING" displayName="'clone()' instantiates objects with constructor" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to object constructors inside &lt;code&gt;clone()&lt;/code&gt; methods.
&lt;p&gt;It is considered good practice to call &lt;code&gt;clone()&lt;/code&gt; to instantiate objects inside of a &lt;code&gt;clone()&lt;/code&gt; method
  instead of creating them directly to support later subclassing.
This inspection will not report
&lt;code&gt;clone()&lt;/code&gt; methods declared as &lt;code&gt;final&lt;/code&gt;
  or &lt;code&gt;clone()&lt;/code&gt; methods on &lt;code&gt;final&lt;/code&gt; classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CloneInNonCloneableClass" defaultSeverity="WARNING" displayName="'clone()' method in non-Cloneable class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that override the
&lt;code&gt;clone()&lt;/code&gt; method but don't implement the &lt;code&gt;Cloneable&lt;/code&gt; interface.
This usually represents a programming error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Only warn on 'public' clone methods&lt;/b&gt; option to ignore methods that aren't &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For classes designed to be inherited, you may choose to override &lt;code&gt;clone()&lt;/code&gt; and declare it as &lt;code&gt;protected&lt;/code&gt;
without implementing the &lt;code&gt;Cloneable&lt;/code&gt; interface and decide whether to implement the &lt;code&gt;Cloneable&lt;/code&gt; interface in subclasses.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseOfClone" defaultSeverity="WARNING" displayName="Use of 'clone()' or 'Cloneable'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implementations of, and calls to, the &lt;code&gt;clone()&lt;/code&gt; method and uses of the &lt;code&gt;java.lang.Cloneable&lt;/code&gt; interface.
&lt;p&gt;Some coding standards prohibit the use of &lt;code&gt;clone()&lt;/code&gt;, and recommend using a copy constructor or
  a &lt;code&gt;static&lt;/code&gt; factory method instead.&lt;/p&gt;
&lt;p&gt;The inspection ignores calls to &lt;code&gt;clone()&lt;/code&gt; on arrays because it's a correct and compact way to copy an array.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Copy implements Cloneable /*warning*/ {

    public Copy clone() /*warning*/ {
      try {
        return (Copy) super.clone(); // warning
      } catch (CloneNotSupportedException e) {
        throw new AssertionError();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CloneDeclaresCloneNotSupported" defaultSeverity="WARNING" displayName="'clone()' does not declare 'CloneNotSupportedException'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;clone()&lt;/code&gt; methods that do not declare &lt;code&gt;throws CloneNotSupportedException&lt;/code&gt;.
&lt;p&gt;If &lt;code&gt;throws CloneNotSupportedException&lt;/code&gt; is not declared, the method's subclasses will not be able to prohibit cloning
in the standard way. This inspection does not report &lt;code&gt;clone()&lt;/code&gt; methods declared &lt;code&gt;final&lt;/code&gt;
and &lt;code&gt;clone()&lt;/code&gt; methods on &lt;code&gt;final&lt;/code&gt; classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Only warn on 'protected' clone methods&lt;/b&gt; option to indicate that this inspection should only warn on &lt;code&gt;protected clone()&lt;/code&gt; methods.
The &lt;i&gt;Effective Java&lt;/i&gt; book (second and third edition) recommends omitting the &lt;code&gt;CloneNotSupportedException&lt;/code&gt;
declaration on &lt;code&gt;public&lt;/code&gt; methods, because the methods that do not throw checked exceptions are easier to use.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;public class&lt;/b&gt; Example &lt;b&gt;implements&lt;/b&gt; Cloneable {
    // method doesn't declare 'throws CloneNotSupportedException'
    &lt;b&gt;protected&lt;/b&gt; Object clone() {
        &lt;b&gt;try&lt;/b&gt; {
            &lt;b&gt;return&lt;/b&gt; &lt;b&gt;super&lt;/b&gt;.clone();
        } &lt;b&gt;catch&lt;/b&gt; (CloneNotSupportedException e) {
            &lt;b&gt;return&lt;/b&gt; null;
        }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CloneReturnsClassType" defaultSeverity="WARNING" displayName="'clone()' should have return type equal to the class it contains" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;clone()&lt;/code&gt; methods with return types different from the class they're located in.
&lt;p&gt;Often a &lt;code&gt;clone()&lt;/code&gt; method will have a return type of &lt;code&gt;java.lang.Object&lt;/code&gt;, which makes it harder to use by its clients.
&lt;i&gt;Effective Java&lt;/i&gt; (the second and third editions) recommends making the return type of the &lt;code&gt;clone()&lt;/code&gt; method the same as the
  class type of the object it returns.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;class&lt;/b&gt; Foo &lt;b&gt;implements&lt;/b&gt; Cloneable {
    &lt;b&gt;public&lt;/b&gt; Object clone() {
      &lt;b&gt;try&lt;/b&gt; {
        &lt;b&gt;return&lt;/b&gt; super.clone();
      } &lt;b&gt;catch&lt;/b&gt; (CloneNotSupportedException e) {
        &lt;b&gt;throw new&lt;/b&gt; AssertionError();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;class&lt;/b&gt; Foo &lt;b&gt;implements&lt;/b&gt; Cloneable {
    &lt;b&gt;public&lt;/b&gt; Foo clone() {
      &lt;b&gt;try&lt;/b&gt; {
        &lt;b&gt;return&lt;/b&gt; (Foo)super.clone();
      } &lt;b&gt;catch&lt;/b&gt; (CloneNotSupportedException e) {
        &lt;b&gt;throw new&lt;/b&gt; AssertionError();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JVM languages" path=""><inspection shortName="IllegalDependencyOnInternalPackage" defaultSeverity="ERROR" displayName="Illegal dependency on internal package" enabled="false" language="JVM" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports references in modules without &lt;code&gt;module-info.java&lt;/code&gt; on packages which are not exported from named modules. 
&lt;p&gt;Such configuration may occur when some modules in the project are already migrated to Java modules but others are still non-modular.
By analogy to the JDK, such non-modular code should not get access to the code in named modules which is not explicitly exported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Dependency" defaultSeverity="ERROR" displayName="Illegal package dependencies" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports illegal dependencies between scopes according to the dependency rules given. Dependency rules can be used to prohibit usage from a
scope to another scope.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Configure dependency rules&lt;/b&gt; button below to customize validation rules.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="BlockingMethodInNonBlockingContext" defaultSeverity="WARNING" displayName="Possibly blocking call in non-blocking context" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports thread-blocking method calls in code fragments where threads should not be blocked.

&lt;p&gt;&lt;b&gt;Example (Project Reactor):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
Flux.just("1").flatMap(f -&amp;gt; {
    Flux&amp;lt;String&amp;gt; just = loadUsersFromDatabase();
    just.toIterable(); // Error: blocking operator call in non-blocking scope
    return just;
  }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consider running blocking code &lt;a href="https://projectreactor.io/docs/core/release/reference/#faq.wrap-blocking"&gt;with a proper
  scheduler&lt;/a&gt;, for example &lt;code&gt;Schedulers.boundedElastic()&lt;/code&gt;, or try to find an alternative non-blocking API.&lt;/p&gt;

&lt;br/&gt;

&lt;p&gt;&lt;b&gt;Example (Kotlin Coroutines):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
suspend fun exampleFun() {
    Thread.sleep(100); // Error: blocking method call inside suspend function
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consider running blocking code &lt;a href="https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html"&gt;with a special dispatcher&lt;/a&gt;,
  for example &lt;code&gt;Dispatchers.IO&lt;/code&gt;, or try to find an alternative non-blocking API.&lt;/p&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In the &lt;b&gt;Blocking Annotations&lt;/b&gt; list, specify annotations that mark thread-blocking methods.&lt;/li&gt;
  &lt;li&gt;In the &lt;b&gt;Non-Blocking Annotations&lt;/b&gt; list, specify annotations that mark non-blocking methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specified annotations can be used as &lt;a href="https://www.jetbrains.com/help/idea/external-annotations.html"&gt;External Annotations&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnstableTypeUsedInSignature" defaultSeverity="WARNING" displayName="Unstable type is used in signature" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations of classes, methods, and fields that reference an unstable API type in the signature,
but are not marked with the same unstable annotation.
&lt;p&gt;
  This inspection ensures that the signatures of a public API do not expose any &lt;i&gt;unstable&lt;/i&gt; (internal, experimental) types.
  For example, if a method returns an &lt;i&gt;experimental&lt;/i&gt; class, the method itself is considered &lt;i&gt;experimental&lt;/i&gt;
  because incompatible changes of the type (deletion or move to another package) lead to incompatible method signature changes.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the list below to specify which annotations mark an unstable API.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SystemGetProperty" defaultSeverity="WARNING" displayName="Call to 'System.getProperty(str)' could be simplified" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usage of method &lt;code&gt;System.getProperty(str)&lt;/code&gt; and suggests a fix in 2 cases:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;System.getProperty("path.separator")&lt;/code&gt; -&gt; &lt;code&gt;File.pathSeparator&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;System.getProperty("line.separator")&lt;/code&gt; -&gt; &lt;code&gt;System.lineSeparator()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
The second one is not only less error-prone but is likely to be faster,
as &lt;code&gt;System.lineSeparator()&lt;/code&gt; returns cached value, while &lt;code&gt;System.getProperty("line.separator")&lt;/code&gt; each time calls to Properties (Hashtable or CHM depending on implementation).
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MustAlreadyBeRemovedApi" defaultSeverity="ERROR" displayName="API must already be removed" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations marked with &lt;code&gt;@ApiStatus.ScheduledForRemoval&lt;/code&gt;
that should have been removed in the current version of the declaring library.
&lt;!-- tooltip end --&gt;
&lt;p&gt;It compares the specified scheduled removal version with the version that you can set below.&lt;/p&gt;
&lt;p&gt;
  Specify the version as a string separated with dots and optionally postfixed with
  &lt;code&gt;alpha&lt;/code&gt;, &lt;code&gt;beta&lt;/code&gt;, &lt;code&gt;snapshot&lt;/code&gt;, or &lt;code&gt;eap&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;Examples of valid versions: &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;2.3.1&lt;/code&gt;, &lt;code&gt;2018.1&lt;/code&gt;, &lt;code&gt;7.5-snapshot&lt;/code&gt;, &lt;code&gt;3.0-eap&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Version comparison is intuitive: &lt;code&gt;1.0 &amp;lt; 2.0&lt;/code&gt;, &lt;code&gt;1.0-eap &amp;lt; 1.0&lt;/code&gt;, &lt;code&gt;2.3-snapshot &amp;lt; 2.3&lt;/code&gt; and so on.
  For detailed comparison logic, refer to the implementation of &lt;a
  href="https://github.com/JetBrains/intellij-community/blob/master/platform/util-rt/src/com/intellij/util/text/VersionComparatorUtil.java"&gt;VersionComparatorUtil&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuppressionAnnotation" defaultSeverity="WARNING" displayName="Inspection suppression annotation" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comments or annotations suppressing inspections.
&lt;p&gt;This inspection can be useful when leaving suppressions intentionally for further review.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="Java"&gt;
@SuppressWarnings("unused")
static Stream&amp;lt;String&amp;gt; stringProvider() {
    return Stream.of("foo", "bar");
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="Since15" defaultSeverity="ERROR" displayName="Usages of API which isn't available at the configured language level" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of the API that is unavailable at the configured language level.
This inspection does 3 things:
&lt;ul&gt;
  &lt;li&gt;Highlight usage of generified classes when the language level is below Java 7.&lt;/li&gt;
  &lt;li&gt;Highlight when default methods are not overridden and the language level is below Java 8.&lt;/li&gt;
  &lt;li&gt;Highlight usage of API when the language level is lower than marked using the &lt;code&gt;@since&lt;/code&gt; tag in the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Forbid API usages&lt;/b&gt; option to forbid usages of the API in respect to the project or custom language level.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="OverrideOnly" defaultSeverity="WARNING" displayName="Method can only be overridden" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to API methods marked with &lt;code&gt;@ApiStatus.OverrideOnly&lt;/code&gt;.
&lt;p&gt;
  The &lt;code&gt;@ApiStatus.OverrideOnly&lt;/code&gt; annotation indicates that the method is part of SPI (Service Provider Interface).
  Clients of the declaring library should implement or override such methods, not call them directly.
  Marking a class or interface with this annotation is the same as marking every method with it.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UrlHashCode" defaultSeverity="WARNING" displayName="Call to 'equals()' or 'hashCode()' on 'URL' object" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; calls on &lt;code&gt;java.net.URL&lt;/code&gt; objects and calls that add &lt;code&gt;URL&lt;/code&gt;
objects to maps and sets.
&lt;p&gt;
  &lt;code&gt;URL&lt;/code&gt;'s &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; methods can perform a DNS lookup to resolve the host name.
  This may cause significant delays, depending on the availability and speed of the network and the DNS server.
  Using &lt;code&gt;java.net.URI&lt;/code&gt; instead of &lt;code&gt;java.net.URL&lt;/code&gt; will avoid the DNS lookup.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  boolean urlEquals(URL url1, URL url2) {
      return url1.equals(url2);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnstableApiUsage" defaultSeverity="WARNING" displayName="Unstable API Usage" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking
the code that uses it.
&lt;!-- tooltip end --&gt;
&lt;p&gt;The annotations which are used to mark unstable APIs are shown in the list below.&lt;/p&gt;
&lt;p&gt;By default, the inspection ignores usages of unstable APIs
if their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.
  However, it may be inconvenient if the project is big, so one can switch off the &lt;b&gt;Ignore API declared in this project&lt;/b&gt; option to report
the usages of unstable APIs declared in both the project sources and libraries.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingDeprecatedAnnotationOnScheduledForRemovalApi" defaultSeverity="ERROR" displayName="Missing '@Deprecated' annotation on scheduled for removal API" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations marked with &lt;code&gt;@ApiStatus.ScheduledForRemoval&lt;/code&gt; without &lt;code&gt;@Deprecated&lt;/code&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @ApiStatus.ScheduledForRemoval(inVersion = "2017.3")
  public void myLegacyMethod() { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied the result looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Deprecated
  @ApiStatus.ScheduledForRemoval(inVersion = "2017.3")
  public void myLegacyMethod() { }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreadRun" defaultSeverity="WARNING" displayName="Call to 'Thread.run()'" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports calls to &lt;code&gt;run()&lt;/code&gt; on &lt;code&gt;java.lang.Thread&lt;/code&gt; or any of its subclasses.&lt;/p&gt;
&lt;p&gt;
  While occasionally intended, this is usually a mistake, because &lt;code&gt;run()&lt;/code&gt; doesn't start a new thread.
  To execute the code in a separate thread, &lt;code&gt;start()&lt;/code&gt; should be used.&lt;/p&gt;
&lt;p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UsagesOfObsoleteApi" defaultSeverity="TEXT ATTRIBUTES" displayName="Usages of ApiStatus.@Obsolete" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations (classes, methods, fields) annotated as &lt;code&gt;@ApiStatus.Obsolete&lt;/code&gt;.
&lt;p&gt;
  Sometimes it's impossible to delete the current API, though it might not work correctly, there is a newer, or better, or more generic API.
  This way, it's a weaker variant of &lt;code&gt;@Deprecated&lt;/code&gt; annotation.
  The annotated API is not supposed to be used in the new code, but it's permitted to postpone the migration of the existing code,
  therefore the usage is not considered a warning.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyMethod" defaultSeverity="WARNING" displayName="Empty method" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports empty methods that can be removed.
&lt;p&gt;Methods are considered empty if they are empty themselves and if they are overridden or
 implemented by empty methods only. Note that methods containing only comments and the &lt;code&gt;super()&lt;/code&gt; call with own parameters are
  also considered empty.&lt;/p&gt;
&lt;p&gt;The inspection ignores methods with special annotations, for example, the &lt;code&gt;javax.ejb.Init&lt;/code&gt; and &lt;code&gt;javax.ejb.Remove&lt;/code&gt; EJB annotations .&lt;/p&gt;
&lt;p&gt;The quick-fix safely removes unnecessary methods.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Comments and javadoc count as content&lt;/b&gt; option to select whether methods with comments should be treated as non-empty.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Additional special annotations&lt;/b&gt; option to configure additional annotations that should be ignored by this inspection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SourceToSinkFlow" defaultSeverity="WARNING" displayName="Non-safe string is passed to safe method" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when a non-safe object is passed to a method with a parameter marked with &lt;code&gt;@Untainted&lt;/code&gt; annotations, returned from
annotated methods or assigned to annotated fields, parameters, or local variables. Kotlin &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; methods for fields are not
supported as entry points.
&lt;p&gt;
  A safe object (in the same class) is:
&lt;ul&gt;
  &lt;li&gt;a string literal, interface instance, or enum object&lt;/li&gt;
  &lt;li&gt;a result of a call of a method that is marked as &lt;code&gt;@Untainted&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a private field, which is assigned only with a string literal and has a safe initializer&lt;/li&gt;
  &lt;li&gt;a final field, which has a safe initializer&lt;/li&gt;
  &lt;li&gt;local variable or parameter that are marked as &lt;code&gt;@Untainted&lt;/code&gt; and are not assigned from non-safe objects&lt;/li&gt;
  This field, local variable, or parameter must not be passed as arguments to methods or used as a qualifier or must be a primitive, its
  wrapper or immutable.
&lt;/ul&gt;
Also static final fields are considered as safe.
&lt;p&gt;
  The analysis is performed only inside one file. To process dependencies from other classes, use options.
  The analysis extends to private or static methods and has a limit of depth propagation.
&lt;p&gt;
  Example:
&lt;pre&gt;
&lt;code lang="java"&gt;
  void doSmth(boolean b) {
    String s = safe();
    String s1 = "other";
    if (b) s1 = s;
    sink(s);
  }

  String sink(@Untainted String s) {}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
  Here we do not have non-safe string assignments to &lt;code&gt;s&lt;/code&gt; so a warning is not produced. On the other hand:
&lt;pre&gt;
&lt;code lang="java"&gt;
  void doSmth(boolean b) {
    String s = safe();
    String s1 = "other";
    s1 = foo();
    if (b) s = s1;
    sink(s);        // warning here
  }

  String foo();

  String sink(@Untainted String s) {}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
  Here we have a warning since &lt;code&gt;s1&lt;/code&gt; has an unknown state after &lt;code&gt;foo&lt;/code&gt; call result assignment.
  &lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SerializableHasSerialVersionUIDField" defaultSeverity="WARNING" displayName="Serializable class without 'serialVersionUID'" enabled="false" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that implement &lt;code&gt;Serializable&lt;/code&gt; and do not declare a &lt;code&gt;serialVersionUID&lt;/code&gt; field.
&lt;p&gt;
  Without a &lt;code&gt;serialVersionUID&lt;/code&gt; field, any change to the class will make previously serialized versions unreadable.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  class Main implements Serializable {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  class Main implements Serializable {
    private static final long serialVersionUID = -1446398935944895849L;
  }
&lt;/code&gt;&lt;/pre&gt;
When using a language level of JDK 14 or higher, the quickfix will also add the &lt;code&gt;java.io.Serial&lt;/code&gt; annotation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the following options to configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
    &lt;code&gt;Serializable&lt;/code&gt; from a superclass but are not intended for serialization.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore &lt;code&gt;Serializable&lt;/code&gt; anonymous classes.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonExtendableApiUsage" defaultSeverity="WARNING" displayName="Class, interface, or method should not be extended" enabled="true" language="UAST" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes, interfaces and methods that extend, implement, or override API elements marked with &lt;code&gt;@ApiStatus.NonExtendable&lt;/code&gt;.
&lt;p&gt;
  The &lt;code&gt;@ApiStatus.NonExtendable&lt;/code&gt; annotation indicates that the class, interface, or method &lt;strong&gt;must not be extended, 
  implemented, or overridden&lt;/strong&gt;.
  Since casting such interfaces and classes to the internal library implementation is rather common,
  if a client provides a different implementation, you will get &lt;code&gt;ClassCastException&lt;/code&gt;.
  Adding new abstract methods to such classes and interfaces will break the compatibility with the client's implementations.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Resource management" path="Java"><inspection shortName="ChannelResource" defaultSeverity="WARNING" displayName="'Channel' opened but not safely closed" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Channel&lt;/code&gt; resources that are not safely closed, including any instances created by calling
&lt;code&gt;getChannel()&lt;/code&gt; on a file or socket resource.
&lt;p&gt;
  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void send(Socket socket) throws IOException {
    SocketChannel channel = socket.getChannel(); //warning
    channel.write(ByteBuffer.wrap("message".getBytes()));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Whether a &lt;code&gt;Channel&lt;/code&gt; resource is allowed to be opened inside a &lt;code&gt;try&lt;/code&gt;
    block. This style is less desirable because it is more verbose than opening a &lt;code&gt;Channel&lt;/code&gt;
    in front of a &lt;code&gt;try&lt;/code&gt; block.
  &lt;/li&gt;
  &lt;li&gt;
    Whether the resource can be closed by any method call with the resource passed as argument.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HibernateResource" defaultSeverity="WARNING" displayName="Hibernate resource opened but not safely closed" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to the &lt;code&gt;openSession()&lt;/code&gt; method if the returned &lt;code&gt;org.hibernate.Session&lt;/code&gt; resource is not safely closed.
&lt;p&gt;
  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void doHibernateQuery(SessionFactory factory) {
    Session session = factory.openSession(); //warning
    session.createQuery("...");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Whether a &lt;code&gt;org.hibernate.Session&lt;/code&gt; resource is allowed to be opened inside a &lt;code&gt;try&lt;/code&gt;
    block. This style is less desirable because it is more verbose than opening a resource
    in front of a &lt;code&gt;try&lt;/code&gt; block.
  &lt;/li&gt;
  &lt;li&gt;
    Whether the resource can be closed by any method call with the resource passed as argument.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JNDIResource" defaultSeverity="WARNING" displayName="JNDI resource opened but not safely closed" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JNDI resources that are not safely closed. JNDI resources reported
by this inspection include &lt;code&gt;javax.naming.InitialContext&lt;/code&gt;,
and &lt;code&gt;javax.naming.NamingEnumeration&lt;/code&gt;.
&lt;p&gt;
  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Object findObject(Properties properties, String name) throws NamingException {
    Context context = new InitialContext(properties); //context is not closed
    return context.lookup(name);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Whether a JNDI Resource is allowed to be opened inside a &lt;code&gt;try&lt;/code&gt; block.
    This style is less desirable because it is more verbose than opening a resource in front of a &lt;code&gt;try&lt;/code&gt; block.
  &lt;/li&gt;
  &lt;li&gt;
    Whether the resource can be closed by any method call with the resource passed as argument.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JDBCResource" defaultSeverity="WARNING" displayName="JDBC resource opened but not safely closed" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JDBC resources that are not safely closed. JDBC resources reported
by this inspection include &lt;code&gt;java.sql.Connection&lt;/code&gt;,
&lt;code&gt;java.sql.Statement&lt;/code&gt;, &lt;code&gt;java.sql.PreparedStatement&lt;/code&gt;,
&lt;code&gt;java.sql.CallableStatement&lt;/code&gt;, and &lt;code&gt;java.sql.ResultSet&lt;/code&gt;.
&lt;p&gt;
  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ResultSet findAllElements(Connection connection) throws SQLException {
    PreparedStatement statement = connection.prepareStatement("SELECT * FROM TABLE");//statement is not closed
    statement.execute();
    return statement.getResultSet();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Whether a JDBC resource is allowed to be opened inside a &lt;code&gt;try&lt;/code&gt;
    block. This style is less desirable because it is more verbose than opening a resource
    in front of a &lt;code&gt;try&lt;/code&gt; block.
  &lt;/li&gt;
  &lt;li&gt;
    Whether the resource can be closed by any method call with the resource passed as argument.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SocketResource" defaultSeverity="WARNING" displayName="Socket opened but not safely closed" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports socket resources that are not safely closed. Socket resources reported
by this inspection include &lt;code&gt;java.net.Socket&lt;/code&gt;,
&lt;code&gt;java.net.DatagramSocket&lt;/code&gt;, and &lt;code&gt;java.net.ServerSocket&lt;/code&gt;.
&lt;p&gt;
  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  byte[] getMessage(ServerSocket socket) throws IOException {
    Socket client = socket.accept(); //socket is not closed
    return client.getInputStream().readAllBytes();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Whether a socket is allowed to be opened inside a &lt;code&gt;try&lt;/code&gt; block.
    This style is less desirable because it is more verbose than opening a resource in front of a &lt;code&gt;try&lt;/code&gt; block.
  &lt;/li&gt;
  &lt;li&gt;
    Whether the resource can be closed by any method call with the resource passed as argument.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IOResource" defaultSeverity="WARNING" displayName="I/O resource opened but not safely closed" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports I/O resources that are not safely closed. I/O resources checked
by this inspection include &lt;code&gt;java.io.InputStream&lt;/code&gt;,
&lt;code&gt;java.io.OutputStream&lt;/code&gt;, &lt;code&gt;java.io.Reader&lt;/code&gt;,
&lt;code&gt;java.io.Writer&lt;/code&gt;, &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt;, &lt;code&gt;java.io.Closeable&lt;/code&gt; and &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;.
&lt;p&gt;
  I/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.
&lt;/p&gt;
&lt;p&gt;
  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void save() throws IOException {
    FileWriter writer = new FileWriter("filename.txt"); //warning
    writer.write("sample");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;List I/O resource classes that do not need to be closed and should be ignored by this inspection.&lt;/li&gt;
  &lt;li&gt;
    Whether an I/O resource is allowed to be opened inside a &lt;code&gt;try&lt;/code&gt;block.
    This style is less desirable because it is more verbose than opening a resource in front of a &lt;code&gt;try&lt;/code&gt; block.
  &lt;/li&gt;
  &lt;li&gt;
    Whether the resource can be closed by any method call with the resource passed as argument.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AutoCloseableResource" defaultSeverity="WARNING" displayName="AutoCloseable used without 'try'-with-resources" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;AutoCloseable&lt;/code&gt; instances which are not used in a try-with-resources statement, also known as
&lt;i&gt;Automatic Resource Management&lt;/i&gt;.
&lt;p&gt;
  This means that the "open resource before/in &lt;code&gt;try&lt;/code&gt;, close in &lt;code&gt;finally&lt;/code&gt;" style that had been used before
  try-with-resources became available, is also reported.
  This inspection is meant to replace all &lt;i&gt;opened but not safely closed&lt;/i&gt; inspections when developing in Java 7 and higher.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  private static void foo() throws IOException {
    InputStream profile = Thread.currentThread().getContextClassLoader().getResourceAsStream("/someFile");
    System.out.println(profile.read());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    List subclasses of &lt;code&gt;AutoCloseable&lt;/code&gt; that do not need to be closed and should be ignored by this inspection.
    &lt;br/&gt;
    &lt;b&gt;Note&lt;/b&gt;: The inspection will still report streams returned from the &lt;code&gt;java.nio.file.Files&lt;/code&gt; methods &lt;code&gt;lines()&lt;/code&gt;,
    &lt;code&gt;walk()&lt;/code&gt;, &lt;code&gt;list()&lt;/code&gt; and &lt;code&gt;find()&lt;/code&gt;,
    even when &lt;code&gt;java.util.stream.Stream&lt;/code&gt; is listed to be ignored.
    These streams contain an associated I/O resource that needs to be closed.
  &lt;/li&gt;
  &lt;li&gt;
    List methods returning &lt;code&gt;AutoCloseable&lt;/code&gt; that should be ignored when called.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore an &lt;code&gt;AutoCloseable&lt;/code&gt; if it is the result of a method call.
    When this option is enabled, the results of factory methods will also be ignored.
  &lt;/li&gt;
  &lt;li&gt;
    Whether the inspection should report if an &lt;code&gt;AutoCloseable&lt;/code&gt; instance is passed as a method call argument.
    If this option is enabled, the inspection assumes the resource is closed in the called method.
    Method calls inside a &lt;code&gt;finally&lt;/code&gt; block with 'close' in the name and an
    &lt;code&gt;AutoCloseable&lt;/code&gt; argument will not be ignored.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore method references to constructors of resource classes.
  &lt;/li&gt;
  &lt;li&gt;
    Whether to ignore methods that return a resource and whose name starts with 'get'.
    This can reduce false positives because most of the getters do not transfer the ownership of the resource,
    and their call sites are not responsible for closing the resource.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Try-with-resources&amp;#39;, which is available since Java 7.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DriverManagerGetConnection" defaultSeverity="WARNING" displayName="Use of 'DriverManager' to get JDBC connection" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any uses of &lt;code&gt;java.sql.DriverManager&lt;/code&gt;
to acquire a JDBC connection. 
&lt;p&gt;
  &lt;code&gt;java.sql.DriverManager&lt;/code&gt;
  has been superseded by &lt;code&gt;javax.sql.Datasource&lt;/code&gt;, which
  allows for connection pooling and other optimizations.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Connection conn = DriverManager.getConnection(url, username, password);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Language injection" path=""><inspection shortName="InjectionNotApplicable" defaultSeverity="ERROR" displayName="Injection annotation is not applicable" enabled="true" language="JAVA" pluginId="org.intellij.intelliLang" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports when a &lt;code&gt;@Language&lt;/code&gt; annotation is applied to an element with a type other than &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;String[]&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Language("HTML") &lt;b&gt;int&lt;/b&gt; i;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;int&lt;/b&gt; i;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="LanguageMismatch" defaultSeverity="WARNING" displayName="Language mismatch" enabled="true" language="JAVA" pluginId="org.intellij.intelliLang" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports when the language of a reference does not match the expected language of the usage context.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Language("JavaScript")
  String JS_CODE = "var x;";

  @Language("XPath")
  String XPATH_CODE = JS_CODE; // warning here
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnknownLanguage" defaultSeverity="ERROR" displayName="Unknown Language ID" enabled="true" language="JAVA" pluginId="org.intellij.intelliLang" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports when the ID of the language used in a &lt;code&gt;@Language&lt;/code&gt; annotation is unknown.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Language("HMTL") String html;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Maven" path="Kotlin/Migration"><inspection shortName="MavenCoroutinesDeprecation" defaultSeverity="ERROR" displayName="Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Maven" enabled="false" language="XML" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;kotlinx.coroutines&lt;/b&gt; library dependencies in Maven that should be updated in order
to be compatible with Kotlin 1.3 and later.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="Kotlin"><inspection shortName="FilterIsInstanceResultIsAlwaysEmpty" defaultSeverity="WARNING" displayName="The result of 'filterIsInstance' call is always empty" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;The inspection detects calls to Kotlin standard library functions &lt;code&gt;filterIsInstance&lt;/code&gt;/&lt;code&gt;filterIsInstanceTo&lt;/code&gt;,
whose target type is not a subtype of the element type the filtering is called on.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    val list = listOf&amp;lt;Int&amp;gt;(1, 2, 3)
    val filteredList = list.filterIsInstance&amp;lt;Boolean&amp;gt;() // Empty result
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VariableNeverRead" defaultSeverity="WARNING" displayName="Variable is never read" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables that are defined but never used afterward in the code.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      var local = 42 // Variable 'local' is never read
      local = 0
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UselessCallOnCollection" defaultSeverity="WARNING" displayName="Useless call on collection type" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;filter…&lt;/code&gt; calls from the standard library on already filtered collections.
&lt;p&gt;Several functions from the standard library such as &lt;code&gt;filterNotNull()&lt;/code&gt; or &lt;code&gt;filterIsInstance&lt;/code&gt;
    have sense only when they are called on receivers that have types distinct from the resulting one. Otherwise,
    such calls can be omitted as the result will be the same.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Remove redundant call&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(list: List&amp;lt;String&amp;gt;) {
      val x = list.filterNotNull() // quick-fix simplifies to 'list'
      val y = list.filterIsInstance&amp;lt;String&amp;gt;() // quick-fix simplifies to 'list'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DelegationToVarProperty" defaultSeverity="WARNING" displayName="Delegating to 'var' property" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports interface delegation to a &lt;code&gt;var&lt;/code&gt; property.
&lt;p&gt;Only initial value of a property is used for delegation, any later assignments do not affect it.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example(var text: CharSequence): CharSequence by text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix replaces a property with immutable one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example(val text: CharSequence): CharSequence by text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternative way, if you rely on mutability for some reason:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Example(text: CharSequence): CharSequence by text {
      var text = text
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="KDocUnresolvedReference" defaultSeverity="WARNING" displayName="Unresolved reference in KDoc" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in KDoc comments.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /**
   * [unresolvedLink]
   */
  fun foo() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the problem make the link valid.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousCollectionReassignment" defaultSeverity="WEAK WARNING" displayName="Augmented assignment creates a new collection under the hood" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports augmented assignment (&lt;code&gt;+=&lt;/code&gt;) expressions on a read-only &lt;code&gt;Collection&lt;/code&gt;.
&lt;p&gt;Augmented assignment (&lt;code&gt;+=&lt;/code&gt;) expression on a read-only &lt;code&gt;Collection&lt;/code&gt; temporarily allocates a new collection,
    which may hurt performance.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Change type to mutable&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test() {
      var list = listOf(0)
      list += 42 // A new list is allocated here, equivalent to list = list + 42
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test() {
      val list = mutableListOf(0)
      list += 42
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="WrapUnaryOperator" defaultSeverity="WEAK WARNING" displayName="Ambiguous unary operator use with number constant" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unary operator followed by a dot qualifier such as &lt;code&gt;-1.inc()&lt;/code&gt;.
&lt;p&gt;Code like &lt;code&gt;-1.inc()&lt;/code&gt; can be misleading because &lt;code&gt;-&lt;/code&gt; has a lower precedence than &lt;code&gt;.inc()&lt;/code&gt;.
    As a result, &lt;code&gt;-1.inc()&lt;/code&gt; evaluates to &lt;code&gt;-2&lt;/code&gt; and not &lt;code&gt;0&lt;/code&gt; as it might be expected.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Wrap unary operator and value with ()&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AssignedValueIsNeverRead" defaultSeverity="WARNING" displayName="Assigned value is never read" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments where the assigned value is never used afterward in the code.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      var local = 0
      print(local)
      local = 42  // Assigned value is never read
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SuspiciousVarProperty" defaultSeverity="WARNING" displayName="Suspicious 'var' property: its setter does not influence its getter result" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;var&lt;/code&gt; properties with default setter and getter that do not reference backing field.
&lt;p&gt;
Such properties do not affect calling its setter; therefore, it will be clearer to change such property to &lt;code&gt;val&lt;/code&gt; and delete the initializer.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Change to val and delete initializer&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // This property always returns '1' and it doesn't important that the property is a 'var'
  var foo: Int = 0
      get() = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MainFunctionReturnUnit" defaultSeverity="WARNING" displayName="Main function should return 'Unit'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports when a main function does not have a return type of &lt;code&gt;Unit&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;code&gt;fun main() = "Hello world!"&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="JavaIoSerializableObjectMustHaveReadResolve" defaultSeverity="WARNING" displayName="Serializable object must implement 'readResolve'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
    Reports &lt;code&gt;object&lt;/code&gt;s (&lt;code&gt;data object&lt;/code&gt; including) that implement &lt;code&gt;java.io.Serializable&lt;/code&gt; but don't implement
    &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/specs/serialization/input.html#the-readresolve-method"&gt;readResolve&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.io.Serializable

  object Foo : Serializable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix implements &lt;code&gt;readResolve&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import java.io.Serializable

  object Foo : Serializable {
      private fun readResolve() = Foo
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceArrayEqualityOpWithArraysEquals" defaultSeverity="WARNING" displayName="Arrays comparison via '==' and '!='" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; operator for arrays that should be replaced with &lt;code&gt;contentEquals()&lt;/code&gt;.
&lt;p&gt;
    The &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;operators compare array references instead of their content.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun test() {
      val a = arrayOf(1, 2, 3)
      val b = arrayOf(1, 2, 3)
      println(a == b) // references comparison
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun test() {
      val a = arrayOf(1, 2, 3)
      val b = arrayOf(1, 2, 3)
      println(a.contentEquals(b))
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DataClassPrivateConstructor" defaultSeverity="WARNING" displayName="Private data class constructor is exposed via the 'copy' method" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;private&lt;/code&gt; primary constructor in data classes.
&lt;p&gt;
    &lt;code&gt;data&lt;/code&gt; classes have a &lt;code&gt;copy()&lt;/code&gt; factory method that can be used similarly to a constructor.
    A constructor should not be marked as &lt;code&gt;private&lt;/code&gt; to provide enough safety.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  data class User private constructor(val name: String)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix changes the constructor visibility modifier to &lt;code&gt;public&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  data class User(val name: String)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedFlow" defaultSeverity="WARNING" displayName="Unused flow" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports Kotlinx Coroutines Flows that are created but never consumed or passed to other functions.&lt;/p&gt;
&lt;p&gt;The code defining a Flow does not run unless the Flow is collected by using a terminal operator.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo() {
    flowOf(1).onEach { println(it) }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/"&gt;some examples&lt;/a&gt; of terminal operators.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KotlinConstantConditions" defaultSeverity="WARNING" displayName="Constant conditions" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-trivial conditions and values that are statically known to be always true, false, null or zero.
While sometimes intended, often this is a sign of logical error in the program. Additionally,
reports never reachable &lt;code&gt;when&lt;/code&gt; branches and some expressions that are statically known to fail always.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun process(x: Int?) {
  val isNull = x == null
  if (!isNull) {
    if (&lt;span style="background: yellow"&gt;x != null&lt;/span&gt;) {} // condition is always true
    require(&lt;span style="background: yellow"&gt;x!! &amp;lt; 0 &amp;&amp; x &amp;gt; 10&lt;/span&gt;) // condition is always false
  } else {
    println(x&lt;span style="background: yellow"&gt;!!&lt;/span&gt;) // !! operator will always fail
  }
}
fun process(v: Any) {
  when(v) {
    is CharSequence -&amp;gt; println(v &lt;span style="background: yellow"&gt;as&lt;/span&gt; Int) // cast will always fail
    &lt;span style="background: yellow"&gt;is String&lt;/span&gt; -&amp;gt; println(v) // branch is unreachable
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
    Uncheck the "Warn when constant is stored in variable" option to avoid reporting of variables having constant values not in conditions.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayInDataClass" defaultSeverity="WARNING" displayName="Array property in data class" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties with an &lt;code&gt;Array&lt;/code&gt; type in a &lt;code&gt;data&lt;/code&gt; class without overridden &lt;code&gt;equals()&lt;/code&gt; or &lt;code&gt;hashCode()&lt;/code&gt;.
&lt;p&gt;
    Array parameters are compared by reference equality, which is likely an unexpected behavior.
    It is strongly recommended to override &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; in such cases.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  data class Text(val lines: Array&amp;lt;String&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix generates missing &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; implementations:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  data class Text(val lines: Array&amp;lt;String&amp;gt;) {
      override fun equals(other: Any?): Boolean {
          if (this === other) return true
          if (javaClass != other?.javaClass) return false

          other as Text

          if (!lines.contentEquals(other.lines)) return false

          return true
      }

      override fun hashCode(): Int {
          return lines.contentHashCode()
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UselessCallOnNotNull" defaultSeverity="WARNING" displayName="Useless call on not-null type" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls on not-null receiver that make sense only for nullable receiver.
&lt;p&gt;Several functions from the standard library such as &lt;code&gt;orEmpty()&lt;/code&gt; or &lt;code&gt;isNullOrEmpty&lt;/code&gt;
    have sense only when they are called on receivers of nullable types. Otherwise, they can be omitted or simplified as the result will be the same.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Remove redundant call&lt;/b&gt; and &lt;b&gt;Change call to …&lt;/b&gt;  quick-fixes can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(s: String) {
      val x = s.orEmpty() // quick-fix simplifies to 's'
      val y = s.isNullOrEmpty() // quick-fix simplifies to 's.isEmpty()'
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AmbiguousNonLocalJump" defaultSeverity="WEAK WARNING" displayName="Ambiguous non-local 'break' or 'continue'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; usages inside of lambdas of loop-like functions.
&lt;p&gt;
    &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; keywords always apply to the real loops (&lt;code&gt;for&lt;/code&gt;,
    &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;). &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; never apply to any function; for example,
    &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; don't apply to &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
    Using &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; inside a loop-like function (for example, &lt;code&gt;forEach&lt;/code&gt;) may be confusing.
    The inspection suggests adding a label to clarify to which statement &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; applies to.
&lt;/p&gt;
&lt;p&gt;
    Since Kotlin doesn't have a concept of loop-like functions, the inspection uses the heuristic. It assumes that functions that don't
    have one of &lt;code&gt;callsInPlace(EXACTLY_ONCE)&lt;/code&gt; or &lt;code&gt;callsInPlace(AT_LEAST_ONCE)&lt;/code&gt; contracts are loop-like functions.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    for (file in files) {
        file.readLines().forEach { line -&gt;
            if (line == commentMarkerLine) continue
            println(line)
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix adds clarifying labels:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    loop@ for (file in files) {
        file.readLines().forEach { line -&gt;
            if (line == commentMarkerLine) continue@loop
            println(line)
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RunBlockingInSuspendFunction" defaultSeverity="WARNING" displayName="Calling 'runBlocking' from a suspend function is redundant" enabled="false" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;runBlocking&lt;/code&gt; calls inside &lt;code&gt;suspend&lt;/code&gt; functions.
&lt;p&gt;Using &lt;code&gt;runBlocking&lt;/code&gt; within a &lt;code&gt;suspend&lt;/code&gt; function negates the suspension mechanism, blocking the calling thread, and
    undermines the core purpose of asynchronous programming.
&lt;p&gt;The quick-fix automatically replaces the &lt;code&gt;runBlocking&lt;/code&gt; with one of the following options, depending on the context:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;A &lt;code&gt;run&lt;/code&gt; call.&lt;/li&gt;
    &lt;li&gt;A &lt;code&gt;withContext&lt;/code&gt; call for cases where a specific &lt;code&gt;CoroutineContext&lt;/code&gt; is provided.&lt;/li&gt;
    &lt;li&gt;Inline wrapped code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
suspend fun something() {
  runBlocking {
    code() // The thread is blocked here
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
suspend fun something() {
  runBlocking {
    code() // Runs asynchronously
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2025.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EqualsOrHashCode" defaultSeverity="WARNING" displayName="'equals()' and 'hashCode()' not paired" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that override &lt;code&gt;equals()&lt;/code&gt; but do not override &lt;code&gt;hashCode()&lt;/code&gt;, or vice versa.
It also reports object declarations that override either &lt;code&gt;equals()&lt;/code&gt; or &lt;code&gt;hashCode()&lt;/code&gt;.
&lt;p&gt;This can lead to undesired behavior when a class is added to a &lt;code&gt;Collection&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C1 {
      override fun equals(other: Any?) = true
  }

  class C2 {
      override fun hashCode() = 0
  }

  object O1 {
      override fun equals(other: Any?) = true
  }

  object O2 {
      override fun hashCode() = 0
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix overrides &lt;code&gt;equals()&lt;/code&gt; or &lt;code&gt;hashCode()&lt;/code&gt; for classes and deletes these methods for objects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
   class C1 {
       override fun equals(other: Any?) = true
       override fun hashCode(): Int {
           return javaClass.hashCode()
       }
   }

   class C2 {
       override fun hashCode() = 0
       override fun equals(other: Any?): Boolean {
           if (this === other) return true
           if (javaClass != other?.javaClass) return false
           return true
       }
   }

   object O1 {
   }

   object O2 {
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantLabel" defaultSeverity="WARNING" displayName="Redundant label" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant labels that cannot be referenced from 'break', 'continue' or 'return' statements.
&lt;p&gt;
Such labels can be safely removed.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo(c: Boolean) {
    b@ while (true) a@ {
        while (true) {
            break@b
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo(c: Boolean) {
    b@ while (true) {
        while (true) {
            break@b
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SelfAssignment" defaultSeverity="WARNING" displayName="Redundant assignment" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments of a variable to itself.
&lt;p&gt;The quick-fix removes the redundant assignment.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test() {
      var bar = 1
      bar = bar
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test() {
      var bar = 1
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KotlinUnreachableCode" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;

Reports code statements are unreachable for execution.
&lt;p&gt;
    The quick-fix removes unreachable code.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun value(): Int {
      return 42
      print("Hello, world !")
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun value(): Int {
      return 42
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="KotlinEqualsBetweenInconvertibleTypes" defaultSeverity="WARNING" displayName="'equals()' between objects of inconvertible types" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;equals()&lt;/code&gt; where the receiver and the argument are
of incompatible primitive, enum, or string types.

&lt;p&gt;While such a call might theoretically be useful, most likely it represents a bug.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  5.equals("");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForEachParameterNotUsed" defaultSeverity="WEAK WARNING" displayName="Iterated elements are not used in forEach" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;forEach&lt;/code&gt; loops that do not use iterable values.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  listOf(1, 2, 3).forEach { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix introduces anonymous parameter in the &lt;code&gt;forEach&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  listOf(1, 2, 3).forEach { _ -&gt; }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DestructuringWrongName" defaultSeverity="WARNING" displayName="Variable in destructuring declaration uses name of a wrong data class property" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports entries of destructuring declarations that match the name of a different property of the destructured data class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  data class Foo(val a: String, val b: Int, val c: String)

  fun bar(f: Foo) {
      val (a, c) = f
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix changes variable's name to match the name of the corresponding class field:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  data class Foo(val a: String, val b: Int, val c: String)

  fun bar(f: Foo) {
      val (a, b) = f
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SelfReferenceConstructorParameter" defaultSeverity="WARNING" displayName="Constructor can never be complete" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constructors with a non-null self-reference parameter.
&lt;p&gt;Such constructors never instantiate a class.&lt;/p&gt;
&lt;p&gt;The quick-fix converts the parameter type to nullable.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class SelfRef(val ref: SelfRef)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class SelfRef(val ref: SelfRef?)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Yaml configs" path="JetBrains Academy"><inspection shortName="TaskFileNotFound" defaultSeverity="ERROR" displayName="Task file not found" enabled="true" language="yaml" pluginId="com.jetbrains.edu" pluginVersion="2025.6-2025.1-1212" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports paths in &lt;code&gt;task-info.yaml&lt;/code&gt; that don't correspond to any file in a local filesystem
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="StudyItemNotFound" defaultSeverity="ERROR" displayName="Task, lesson or section not found" enabled="true" language="yaml" pluginId="com.jetbrains.edu" pluginVersion="2025.6-2025.1-1212" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports paths in &lt;code&gt;course-info.yaml&lt;/code&gt;, &lt;code&gt;section-info.yaml&lt;/code&gt; and &lt;code&gt;lesson-info.yaml&lt;/code&gt; files that don't correspond to any directory in a local filesystem
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnsupportedLanguageVersion" defaultSeverity="ERROR" displayName="Task file not found" enabled="true" language="yaml" pluginId="com.jetbrains.edu" pluginVersion="2025.6-2025.1-1212" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect programming language for the course.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Java 15" path="Java/Java language level migration aids"><inspection shortName="TextBlockBackwardMigration" defaultSeverity="INFORMATION" displayName="Text block can be replaced with regular string literal" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports text blocks that can be replaced with regular string literals. 
This may help to downgrade for backward compatibility with earlier Java versions.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Object obj = engine.eval("""
                           function hello() {
                             print('"Hello, world"');
                           }

                           hello();
                           """);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Object obj = engine.eval("function hello() {\n" +
                           "  print('\"Hello, world\"');\n" +
                           "}\n" +
                           "\n" +
                           "hello();\n");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Text block literals&amp;#39;, which is available since Java 15.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2019.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TextBlockMigration" defaultSeverity="WARNING" displayName="Text block can be used" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;String&lt;/code&gt; concatenations that can be simplified by replacing them with text blocks.
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;\n&lt;/code&gt; occurs two or more times.&lt;/li&gt;
  &lt;li&gt;Text blocks are not concatenated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Use the &lt;b&gt;Report single string literals&lt;/b&gt; option to highlight single literals containing line breaks.
The quick-fix will still be available even when this option is disabled.
&lt;p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String html = "&amp;lt;html&amp;gt;\n" +
                "    &amp;lt;body&amp;gt;\n" +
                "        &amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;\n" +
                "    &amp;lt;/body&amp;gt;\n" +
                "&amp;lt;/html&amp;gt;\n";
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String html = """
                &amp;lt;html&amp;gt;
                    &amp;lt;body&amp;gt;
                        &amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;
                    &amp;lt;/body&amp;gt;
                &amp;lt;/html&amp;gt;
                """;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Text block literals&amp;#39;, which is available since Java 15.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2019.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RegExp" path=""><inspection shortName="RegExpEmptyAlternationBranch" defaultSeverity="WARNING" displayName="Empty branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty branches in a RegExp alternation.
An empty branch will only match the empty string, and in most cases that is not what is desired.
This inspection will not report a single empty branch at the start or the end of an alternation.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha||bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnexpectedAnchor" defaultSeverity="WARNING" displayName="Begin or end anchor in unexpected position" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;\A&lt;/code&gt; anchors not at the beginning of the pattern and
&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\Z&lt;/code&gt; or &lt;code&gt;\z&lt;/code&gt; anchors not at the end of the pattern.
In the wrong position these RegExp anchors prevent the pattern from matching anything.
In case of the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; anchors, most likely the literal character was meant and the escape forgotten.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (Price $10)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSimplifiable" defaultSeverity="WEAK WARNING" displayName="Regular expression can be simplified" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports regular expressions that can be simplified.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a] xx* [ah-hz]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a x+ [ahz]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpAnonymousGroup" defaultSeverity="WARNING" displayName="Anonymous capturing group or numeric back reference" enabled="false" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous capturing groups and numeric back references in a RegExp.
These are only reported when the RegExp dialect supports named group and named group references.
Named groups and named back references improve code readability and are recommended to use instead.
When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,
i.e. &lt;code&gt;(?:xxx)&lt;/code&gt; instead of &lt;code&gt;(xxx)&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (\d\d\d\d)\1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A better regex pattern could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (?&amp;lt;quad&gt;\d\d\d\d)\k&amp;lt;quad&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnnecessaryNonCapturingGroup" defaultSeverity="WARNING" displayName="Unnecessary non-capturing group" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary non-capturing groups, which have no influence on the match result.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, (?:this) is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, this is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CustomRegExpInspection" defaultSeverity="WARNING" displayName="Custom RegExp inspection" enabled="true" language="" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Custom Regex Inspection
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRepeatedSpace" defaultSeverity="WARNING" displayName="Consecutive spaces" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple consecutive spaces in a RegExp.
Because spaces are not visible by default, it can be hard to see how many spaces are required.
The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (     )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ( {5})
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEscapedMetaCharacter" defaultSeverity="INFORMATION" displayName="Escaped meta character" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports escaped meta characters.
Some RegExp coding styles specify that meta characters should be placed inside a character class,
to make the regular expression easier to understand.
This inspection does not warn about the meta character &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;,
because those would need additional escaping inside a character class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+\.\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+[.]\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantNestedCharacterClass" defaultSeverity="WARNING" displayName="Redundant nested character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary nested character classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-c[x-z]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-cx-z]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateAlternationBranch" defaultSeverity="WARNING" displayName="Duplicate branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate branches in a RegExp alternation.
Duplicate branches slow down matching and obscure the intent of the expression.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie|alpha)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSuspiciousBackref" defaultSeverity="WARNING" displayName="Suspicious back reference" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports back references that will not be resolvable at runtime.
This means that the back reference can never match anything.
A back reference will not be resolvable when the group is defined after the back reference,
or if the group is defined in a different branch of an alternation.
&lt;p&gt;&lt;b&gt;Example of a group defined after its back reference:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \1(abc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example of a group and a back reference in different branches:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a(b)c|(xy)\1z
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantClassElement" defaultSeverity="WEAK WARNING" displayName="Redundant '\d', '[:digit:]', or '\D' class elements" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;\d&lt;/code&gt; or &lt;code&gt;[:digit:]&lt;/code&gt; that are used in one class with &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;[:word:]&lt;/code&gt;
(&lt;code&gt;\D&lt;/code&gt; with &lt;code&gt;\W&lt;/code&gt;) and can be removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w\d]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSingleCharAlternation" defaultSeverity="WARNING" displayName="Single character alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports single char alternation in a RegExp.
It is simpler to use a character class instead.
This may also provide better matching performance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a|b|c|d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abcd]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpOctalEscape" defaultSeverity="INFORMATION" displayName="Octal escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports octal escapes, which are easily confused with back references.
Use hexadecimal escapes to avoid confusion.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \07
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \x07
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantEscape" defaultSeverity="WARNING" displayName="Redundant character escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning.
Many escape sequences that are necessary outside of a character class are redundant inside square brackets &lt;code&gt;[]&lt;/code&gt; of a character class.
&lt;p&gt;
  Although unescaped opening curly braces &lt;code&gt;{&lt;/code&gt; outside of character classes are allowed in some dialects (JavaScript, Python, and so on),
  it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.
  For this reason the inspection does not report escaped opening curly braces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \-\;[\.]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  -;[.]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The &lt;b&gt;Ignore escaped closing brackets '}' and ']'&lt;/b&gt; option specifies whether to report &lt;code&gt;\}&lt;/code&gt; and &lt;code&gt;\]&lt;/code&gt; outside of a character class
when they are allowed to be unescaped by the RegExp dialect.
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateCharacterInClass" defaultSeverity="WARNING" displayName="Duplicate character in character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate characters inside a RegExp character class.
Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [aabc]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abc]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Visibility" path="Java"><inspection shortName="Java9UndeclaredServiceUsage" defaultSeverity="WARNING" displayName="Usage of service not declared in 'module-info'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations in which a service is loaded with &lt;code&gt;java.util.ServiceLoader&lt;/code&gt; but it isn't declared with the
&lt;code&gt;uses&lt;/code&gt; clause in the &lt;code&gt;module-info.java&lt;/code&gt; file and suggests inserting it.
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Modules&amp;#39;, which is available since Java 9.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LambdaParameterHidingMemberVariable" defaultSeverity="WARNING" displayName="Lambda parameter hides field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lambda parameters named identically to a field of a surrounding class.
As a result of such naming, you may accidentally use the lambda parameter when using the identically named field is intended.
&lt;p&gt;A quick-fix is suggested to rename the lambda parameter.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class MyClass {
    public Object foo;

    void sort(List&amp;lt;Integer&amp;gt; list) {
      list.sort((foo, bar) -&gt; foo - bar);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to choose whether to ignore fields that are not visible from the lambda expression.
  For example, private fields of a superclass.
&lt;p&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Lambda expressions&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AmbiguousMethodCall" defaultSeverity="WARNING" displayName="Call to inherited method looks like call to local method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to a superclass method from an anonymous, inner or local class,
if a method with the same signature exists in the code surrounding the class.
In this case it may seem that a method from the surrounding code is called,
when in fact it is a call to a method from the superclass.
&lt;p&gt;
  To clarify the intent of the code, it is recommended to add an explicit
  &lt;code&gt;super&lt;/code&gt; qualifier to the method call.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {
    void ambiguous(){}
  }

  class Example {
    void ambiguous(){}

    class Inner extends Parent {
      void example(){
        ambiguous(); //warning
      }
    }
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {
    void ambiguous(){}
  }

  class Example {
    void ambiguous(){}

    class Inner extends Parent {
      void example(){
        super.ambiguous();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeParameterHidesVisibleType" defaultSeverity="WARNING" displayName="Type parameter hides visible type" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type parameters that have the same names as the visible types in the current scope. Such parameter names may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  abstract class MyList&amp;lt;T&amp;gt; extends AbstractList&amp;lt;T&amp;gt; {
    private List&amp;lt;T&amp;gt; elements;
    // type parameter 'T' hides type parameter 'T'
    public &amp;lt;T&amp;gt; T[] toArray(T[] array) {
        return elements.toArray(array);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassEscapesItsScope" defaultSeverity="WARNING" displayName="Class is exposed outside of its visibility scope" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of classes in a field or method signature where the class has less visibility than the member that uses it.
While legal Java, such members cannot be used outside of the visibility scope of the class type they reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Parent {
    public Child getChild() {
      return new Child();
    }

    private class Child {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Additionally, in Java 9 and higher, a module may hide some of its classes from other modules by not exporting their packages.
However, if a member that is part of the exported API references a non-exported class in its signature,
  such a member cannot be used outside of the module.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Report non-exported classes exposed in module API (Java 9+)&lt;/b&gt; option to report module API members
    that expose non-exported classes.&lt;br&gt;Note that the language level of the project or module needs to be 9 or higher for this option.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Report non-accessible classes exposed in public API&lt;/b&gt; option to report on public members
    that expose classes with a smaller visibility scope.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Report private classes exposed in package-local API&lt;/b&gt; option to report on package-local members
    that expose &lt;code&gt;private&lt;/code&gt; classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaEmptyModuleInfoFile" defaultSeverity="WARNING" displayName="Empty 'module-info.java' file" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;body&gt;
Reports an empty &lt;code&gt;module-info.java&lt;/code&gt; file, indicating unresolved module dependencies. Automatically adds necessary &lt;code&gt;requires&lt;/code&gt; statements by inspecting imports.
To suppress this warning, you may write any comment inside the module statement body, like this:
&lt;pre&gt;&lt;code&gt;
module module.name {
    // no dependencies
}
&lt;/code&gt;&lt;/pre&gt;
&lt;b&gt;Quick Fix:&lt;/b&gt; &lt;i&gt;Fill in module dependencies&lt;/i&gt; fills in missing &lt;code&gt;requires&lt;/code&gt; based on source code imports.
&lt;small&gt;New in 2024.1&lt;/small&gt;
&lt;/body&gt;&lt;!-- tooltip end --&gt;</inspection><inspection shortName="AmbiguousFieldAccess" defaultSeverity="WARNING" displayName="Access to inherited field looks like access to element from surrounding code" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to a superclass field from an anonymous, inner or local class,
if a local variable, parameter, or field with the same name is available in the code surrounding the class.
In this case it may seem that an element from the surrounding code is accessed,
when in fact it is an access to a field from the superclass.
&lt;p&gt;
  To clarify the intent of the code, it is recommended to add an explicit
  &lt;code&gt;super&lt;/code&gt; qualifier to the field access.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    class First {
      protected String ambiguous;
    }
    class Second {
      void foo(String ambiguous) {
        new First() {
          {
            System.out.println(ambiguous); // the field is accessed, not the parameter
          }
        };
      }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    class First {
      protected String ambiguous;
    }
    class Second {
      void foo(String ambiguous) {
        new First() {
          {
            System.out.println(super.ambiguous);
          }
        };
      }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PatternVariableHidesField" defaultSeverity="WARNING" displayName="Pattern variable hides field" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports pattern variables named identically to a field of a surrounding class.
As a result of such naming, you may accidentally use the pattern variable when using the identically named field is intended.
&lt;p&gt;
  A quick-fix is suggested to rename the variable.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Pointless {
    Point p = new Point();

    public void test(Object a) {
      if (a instanceof Point p) {
        System.out.print("a is a point (" + p.x + ", " + p.y + ')');
      } else {
        System.out.print("p is a point (" + p.x + ", " + p.y + ')');
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LocalVariableHidingMemberVariable" defaultSeverity="WARNING" displayName="Local variable hides field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables named identically to a field of a surrounding class.
As a result of such naming, you may accidentally use the variable where the identically named field is intended.
&lt;p&gt;A quick-fix is suggested to rename the variable.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Foo {
    public Object foo;

    void bar() {
      Object o = new Object() {
        void baz() {
          Object foo; // Local variable 'foo' hides field in class 'Foo'
        }
      };
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  You can configure the following options for this inspection:
&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Ignore non-accessible fields&lt;/strong&gt; - ignore local variables named identically to superclass fields
    that are not visible (for example, because they are private).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ignore local variables in a static context hiding non-static fields&lt;/strong&gt; -
    for example when the local variable is inside a static method or inside a method which is inside a static inner class.
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Java9ModuleExportsPackageToItself" defaultSeverity="WARNING" displayName="Module exports/opens package to itself" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports packages that are exported to, or opened in the same Java 9 module in which they are defined.
The quick-fix removes such directives from &lt;code&gt;module-info.java&lt;/code&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  module com.mycomp {
    exports com.mycomp.main to com.mycomp;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  module main {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Modules&amp;#39;, which is available since Java 9.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicConstructorInNonPublicClass" defaultSeverity="WARNING" displayName="'public' constructor in non-public class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;public&lt;/code&gt; constructors in non-&lt;code&gt;public&lt;/code&gt; classes.
&lt;p&gt;Usually, there is no reason for creating a &lt;code&gt;public&lt;/code&gt; constructor in a class with a lower access level.
  Please note, however, that this inspection changes the behavior of some reflection calls. In particular,
  &lt;code&gt;Class.getConstructor()&lt;/code&gt; won't be able to find the updated constructor
  (&lt;code&gt;Class.getDeclaredConstructor()&lt;/code&gt; should be used instead). Do not use the inspection if your code
  or code of some used frameworks relies on constructor accessibility via &lt;code&gt;getConstructor()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class House {
    public House() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class House {
    House() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParameterHidingMemberVariable" defaultSeverity="WARNING" displayName="Parameter hides field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method parameters named identically to a field of a surrounding class.
As a result of such naming, you may accidentally use the parameter when using the identically named field is intended.
&lt;p&gt;A quick-fix is suggested to rename the parameter.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    private String value;

    public Main(String value) {
      value = value.toUpperCase();
    }
  }
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  You can configure the following options for this inspection:
&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;strong&gt;Ignore for property setters&lt;/strong&gt; - ignore parameters of simple setters.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Ignore superclass fields not visible from subclass&lt;/strong&gt; - ignore &lt;code&gt;private&lt;/code&gt;
    fields in a superclass, which are not visible from the method.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Ignore for constructors&lt;/strong&gt; - ignore parameters of constructors.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Ignore for abstract methods&lt;/strong&gt; - ignore parameters of abstract methods.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Ignore for static method parameters hiding instance fields&lt;/strong&gt; - ignore parameters
    of &lt;code&gt;static&lt;/code&gt; methods hiding an instance field and to ignore parameters of instance methods in static inner
    classes hiding an instance field of an outer class. While not strictly hiding, such parameters can still be confusing.
  &lt;/li&gt;
&lt;/ol&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FieldHidesSuperclassField" defaultSeverity="WARNING" displayName="Subclass field hides superclass field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields in a derived class that are named identically a field of a superclass.
Java fields cannot be overridden in derived classes,
so the field in the derived class will hide the field from the superclass.
&lt;p&gt;
  As a result of such naming, you may accidentally use the field of the derived class
  where the identically named field of a base class is intended.
&lt;/p&gt;
&lt;p&gt;A quick-fix is suggested to rename the field in the derived class.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Parent {
  Parent parent;
}
class Child extends Parent {
  Child parent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  You can configure the following options for this inspection:
&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;strong&gt;Ignore non-accessible fields&lt;/strong&gt; - indicates whether this inspection should report all name clashes,
    or only clashes with fields which are visible from the subclass.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Ignore static fields hiding static fields&lt;/strong&gt; - ignore &lt;code&gt;static&lt;/code&gt; fields
    which hide &lt;code&gt;static&lt;/code&gt; fields in base classes.
  &lt;/li&gt;
&lt;/ol&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InnerClassVariableHidesOuterClassVariable" defaultSeverity="WARNING" displayName="Inner class field hides outer class field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inner class fields named identically to a field of a surrounding class.
As a result of such naming, you may accidentally use the field from the inner class
when using the identically named field of a surrounding class is intended.
&lt;p&gt;A quick-fix is suggested to rename the inner class field.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Outer {
    private String name;

    class Inner {
      private String name;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to choose whether this inspection should report all name clashes,
  or only clashes with fields that are visible from the inner class.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodOverloadsParentMethod" defaultSeverity="WARNING" displayName="Possibly unintended overload of method from superclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instance methods with the same name and the same number of parameters as a method in a superclass,
but where at least one of the parameters is of a different incompatible type.
&lt;p&gt;
  In this case, the method in a subclass will be overloading the method from the superclass
  instead of overriding it. If it is unintended, it may result in latent bugs.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Foo {
    void foo(int x) {}
  }

  public class Bar extends Foo {
    void foo(Number x) {} // Method 'foo()' overloads a compatible method of a superclass,
                          // when overriding might have been intended
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the option to choose whether the inspection should also report cases where parameter types are not compatible.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodOverridesInaccessibleMethodOfSuper" defaultSeverity="WARNING" displayName="Method overrides inaccessible method of superclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods with the same signature as an inaccessible method of a superclass,
for example, a private method, or a package-private method of a superclass in another package.
&lt;p&gt;
  Such method names may be confusing because the method in the subclass may look like an override when in fact
  it hides the inaccessible method of the superclass.
  Moreover, if the visibility of the method in the superclass changes later,
  it may either silently change the semantics of the subclass or cause a compilation error.
&lt;/p&gt;
&lt;p&gt;A quick-fix is suggested to rename the method.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Super {
    private void test() {
    }
  }

  public class Sub extends Super {
    void test() { // making 'Super.test()' public causes a compilation error
                  // making 'Super.test()' package-private makes 'Sub.test()' an override
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MethodOverridesStaticMethod" defaultSeverity="WARNING" displayName="Method tries to override 'static' method of superclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;static&lt;/code&gt; methods with a signature identical to a &lt;code&gt;static&lt;/code&gt; method of a superclass.
Such a method may look like an override when in fact it hides the method from the superclass because
&lt;code&gt;static&lt;/code&gt; methods in Java cannot be overridden.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {
    static void method(){}
  }

  class Example extends Parent {
    static void method(){} //warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AnonymousClassVariableHidesContainingMethodVariable" defaultSeverity="WARNING" displayName="Anonymous class variable hides variable in containing method" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields in an anonymous class that are named identically to local variables or parameters of
the containing method or lambda expression.
&lt;p&gt;
  As a result of such naming, you may accidentally use the anonymous class field where
  the identically named variable or parameter from the containing method is intended.
&lt;/p&gt;
&lt;p&gt;A quick-fix is suggested to rename the field.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    public Test(String value) {
      Object foo = new Object() {
        private String value = "TEST";
        public void foo() {
          System.out.println(value); //the field is accessed, not the parameter
        }
      };
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Maps" path="Scala/Collections"><inspection shortName="MapValues" defaultSeverity="WARNING" displayName="Extracting values manually" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports non-standard methods to extract values from &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.map(_._2)
  map.map(_._2).toIterator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.values
  map.valuesIterator
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnitInMap" defaultSeverity="WARNING" displayName="Unit return type in the argument of map" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports using &lt;code&gt;map&lt;/code&gt; with expressions which produce no result.&lt;/p&gt;
&lt;p&gt;If possible, this inspection suggests replacing such &lt;code&gt;map&lt;/code&gt; call with &lt;code&gt;foreach&lt;/code&gt; one.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1, 2).map(println)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Seq(1, 2).foreach(println)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MapLift" defaultSeverity="WARNING" displayName="Lift to Get" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the usage of &lt;code&gt;map.lift(n)&lt;/code&gt; and suggests replacing it with &lt;code&gt;map.get(n)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val m = Map(1 -&gt; 1)
  m.lift(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val m = Map(1 -&gt; 1)
  m.get(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MapGetGet" defaultSeverity="WARNING" displayName="Redundant get when getting a value from Map" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unnecessary calls to &lt;code&gt;Map.get&lt;/code&gt;/&lt;code&gt;Option.get&lt;/code&gt; when getting a value from a map via a
  key&lt;/p&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.get(k).get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map(k)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MapGetEmptinessCheck" defaultSeverity="WARNING" displayName="Emptiness check on Get to Contains" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports an emptiness check of the &lt;code&gt;Map.get&lt;/code&gt; result and suggests replacing it with a call to &lt;code&gt;Map.contains&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.get(key).nonEmpty
  map.get(key).isEmpty
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.contains(key)
  !map.contains(key)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GetGetOrElse" defaultSeverity="WARNING" displayName="Get and getOrElse to getOrElse" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;get(key).getOrElse(value)&lt;/code&gt; on &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The quick-fix uses &lt;code&gt;getOrElse(key, value)&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.get(key).getOrElse(defValue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:
&lt;pre&gt;&lt;code&gt;
  al map = Map(1 -&gt; 42)
  ap.getOrElse(key, defValue)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MapKeys" defaultSeverity="WARNING" displayName="Extracting keys manually" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports non-standard methods to extract keys from &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.map(_._1)
  map.map(_._1).toSet
  map.map(_._1).toIterator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val map = Map(1 -&gt; 42)
  map.keys
  map.keySet
  map.keysIterator
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JUnit" path=""><inspection shortName="JUnit3StyleTestMethodInJUnit4Class" defaultSeverity="WARNING" displayName="Old style JUnit test method in JUnit 4 class" enabled="true" language="JAVA" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 3 style test methods that are located inside a class
that does not extend the JUnit 3 &lt;code&gt;TestCase&lt;/code&gt; class and contains JUnit 4 or JUnit 5 &lt;code&gt;@Test&lt;/code&gt; annotated methods.
Such test methods cannot be run.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JUnitMalformedDeclaration" defaultSeverity="ERROR" displayName="JUnit malformed declaration" enabled="true" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit test member declarations that are malformed and are likely not recognized by the JUnit test framework.
The following problems are reported by this inspection:
&lt;ul&gt;
  &lt;li&gt;Test classes that can't be constructed&lt;/li&gt;
  &lt;li&gt;Fields annotated by &lt;code&gt;@RegisterExtension&lt;/code&gt; that have the wrong type or are not declared as static when it is required&lt;/li&gt;
  &lt;li&gt;Static or private inner classes annotated with &lt;code&gt;@Nested&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Parameterized tests that are defined without a source&lt;/li&gt;
  &lt;li&gt;Parameterized tests with a &lt;code&gt;@MethodSource&lt;/code&gt; that has an unknown, non-static or no-arg target&lt;/li&gt;
  &lt;li&gt;Mismatched types between parameterized test method parameter and the specified &lt;code&gt;@ValueSource&lt;/code&gt; or &lt;code&gt;@EnumSource&lt;/code&gt; values&lt;/li&gt;
  &lt;li&gt;Tests that are annotated by more than one of &lt;code&gt;@Test&lt;/code&gt;, &lt;code&gt;@ParameterizedTest&lt;/code&gt; or &lt;code&gt;@RepeatedTest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;setup()&lt;/code&gt; or &lt;code&gt;tearDown()&lt;/code&gt; methods that are not public, whose return type is not void or take arguments&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;suite()&lt;/code&gt; methods that are private, take arguments or are not static&lt;/li&gt;
  &lt;li&gt;
    Methods annotated by &lt;code&gt;@BeforeClass&lt;/code&gt;, &lt;code&gt;@AfterClass&lt;/code&gt;, &lt;code&gt;@BeforeAll&lt;/code&gt; or &lt;code&gt;@AfterAll&lt;/code&gt; that are
    not public, not static, whose return type is not void or do not have a valid parameter list
  &lt;/li&gt;
  &lt;li&gt;
    Methods annotated by &lt;code&gt;@Before&lt;/code&gt;, &lt;code&gt;@After&lt;/code&gt;, &lt;code&gt;@BeforeEach&lt;/code&gt; or &lt;code&gt;@AfterEach&lt;/code&gt; that are
    not public, whose return type is not void or take arguments
  &lt;/li&gt;
  &lt;li&gt;Injected &lt;code&gt;RepetitionInfo&lt;/code&gt; in &lt;code&gt;@BeforeAll&lt;/code&gt; or &lt;code&gt;@AfterAll&lt;/code&gt; methods&lt;/li&gt;
  &lt;li&gt;
    Injected &lt;code&gt;RepetitionInfo&lt;/code&gt; in &lt;code&gt;@BeforeEach&lt;/code&gt; or &lt;code&gt;@AfterEach&lt;/code&gt; methods that are used by &lt;code&gt;@Test&lt;/code&gt;
    annotated tests
  &lt;/li&gt;
  &lt;li&gt;Fields and methods annotated by &lt;code&gt;@DataPoint&lt;/code&gt; or &lt;code&gt;@DataPoints&lt;/code&gt; that are not public or not static&lt;/li&gt;
  &lt;li&gt;
    Fields and methods annotated by &lt;code&gt;@Rule&lt;/code&gt; that are not public or not a subtype of &lt;code&gt;TestRule&lt;/code&gt; or
    &lt;code&gt;MethodRule&lt;/code&gt;
  &lt;/li&gt;
  &lt;li&gt;Fields and methods annotated by &lt;code&gt;@ClassRule&lt;/code&gt; that are not public, not static or not a subtype of &lt;code&gt;TestRule&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    Methods inside a subclass of &lt;code&gt;TestCase&lt;/code&gt; with a &lt;code&gt;test&lt;/code&gt; prefix that are not public, whose return type is not void, take
    arguments or are static
  &lt;/li&gt;
  &lt;li&gt;
    Methods annotated by &lt;code&gt;@Test&lt;/code&gt; that are not public, whose return type is not void, take arguments or are static
  &lt;/li&gt;
&lt;/ul&gt;

Note that in Kotlin, suspending functions do have arguments and a non-void return type. Therefore, they also will not be executed by the
JUnit test runner. This inspection will also report about this problem.

&lt;p&gt;&lt;b&gt;Malformed &lt;code&gt;@Before&lt;/code&gt; method example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Before private int foo(int arg) { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Before public void foo() { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Missing method source example (Kotlin):&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
  class Example {
    @MethodSource("parameters")
    @ParameterizedTest
    fun foo(param: String) { ... }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="kotlin"&gt;
  class Example {
    @MethodSource("parameters")
    @ParameterizedTest
    fun foo(param: String) { ... }

    companion object {
      @JvmStatic
      fun parameters(): Stream&amp;lt;Arguments&amp;gt; {
        TODO("Not yet implemented")
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the inspection options to specify annotations. Any parameter annotated with one of these annotations will not be reported.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IgnoredJUnitTest" defaultSeverity="WARNING" displayName="JUnit test annotated with '@Ignore'/'@Disabled'" enabled="false" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of JUnit 4's &lt;code&gt;@Ignore&lt;/code&gt; or JUnit 5's &lt;code&gt;@Disabled&lt;/code&gt; annotations.
It is considered a code smell to have tests annotated with these annotations for a long time, especially when no reason is specified.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Ignore
  &lt;b&gt;public class&lt;/b&gt; UrgentTest {

    @Test
    &lt;b&gt;public void&lt;/b&gt; testIt() {
      Assert.assertEquals("expected", "actual");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Configure the inspection:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Use the &lt;b&gt;Only report annotations without reason&lt;/b&gt; option to only report the cases when no reason is specified as the annotation's
    &lt;code&gt;value&lt;/code&gt; attribute.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Junit4RunWithInspection" defaultSeverity="WARNING" displayName="'@RunWith' annotation already exists in a parent class" enabled="true" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports when parent and child classes in a JUnit test hierarchy are annotated with &lt;code&gt;@RunWith&lt;/code&gt;.
It can lead to unexpected testing behavior.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @RunWith(Suite.class)
  @SuiteClasses(MySuiteClass.class)
  public abstract Parent {
  }

  @RunWith(Parameterized.class)
  public MyTest {
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2024.1&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExpectedExceptionNeverThrown" defaultSeverity="WARNING" displayName="Expected exception never thrown in test method body" enabled="false" language="JAVA" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports checked exceptions expected by a JUnit 4 test-method that are never thrown inside the method body.
Such test methods will never succeed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Test(expected = CloneNotSupportedException.class)
  public void testIt() { }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseOfObsoleteAssert" defaultSeverity="WARNING" displayName="Usage of obsolete 'junit.framework.Assert' method" enabled="false" language="JAVA" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to methods from the &lt;code&gt;junit.framework.Assert&lt;/code&gt; class. This class is
obsolete and the calls can be replaced by calls to methods from the &lt;code&gt;org.junit.Assert&lt;/code&gt; class.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  &lt;b&gt;import&lt;/b&gt; org.junit.*;
  &lt;b&gt;public class&lt;/b&gt; NecessaryTest {
    @Test
    &lt;b&gt;public void&lt;/b&gt; testIt() {
      junit.framework.Assert.assertEquals("expected", "actual");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied, the result looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  &lt;b&gt;import&lt;/b&gt; org.junit;
  &lt;b&gt;public class&lt;/b&gt; NecessaryTest {

    &lt;b&gt;public void&lt;/b&gt; testIt() {
      Assert.assertEquals("expected", "actual");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JUnit5AssertionsConverter" defaultSeverity="WARNING" displayName="JUnit 5 obsolete assertions" enabled="true" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports any calls to methods from the &lt;code&gt;junit.framework.Assert&lt;/code&gt;, &lt;code&gt;org.junit.Assert&lt;/code&gt;, or &lt;code&gt;org.junit.Assume&lt;/code&gt;
  classes inside JUnit 5 tests.&lt;/p&gt;
&lt;p&gt;Although the tests work properly, migration to &lt;code&gt;org.junit.jupiter.api.Assertions&lt;/code&gt;/&lt;code&gt;org.junit.jupiter.api.Assumptions&lt;/code&gt;
  will help you avoid dependencies on old JUnit version.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  import org.junit.Assert;
  import org.junit.jupiter.api.Test;

  public class MyTest {
    @Test
    public void simpleTest() {
      Assert.assertEquals(4, 2 + 2);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  import org.junit.jupiter.api.Assertions;
  import org.junit.jupiter.api.Test;

  public class MyTest {
    @Test
    public void simpleTest() {
      Assertions.assertEquals(4, 2 + 2);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JUnit5Converter" defaultSeverity="WARNING" displayName="JUnit 4 test can be JUnit 5" enabled="false" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 4 tests that can be automatically migrated to JUnit 5.
While default runners are automatically convertible, custom runners, method- and field- rules are not and require manual changes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  import org.junit.Assert;
  import org.junit.Test;

  public class RelevantTest {
    @Test
    public void testIt() {
      Assert.assertEquals("expected", "actual");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  import org.junit.jupiter.api.Assertions;
  import org.junit.jupiter.api.Test;

  public class RelevantTest {
    @Test
    public void testIt() {
      Assertions.assertEquals("expected", "actual");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection requires that the JUnit 5 library is available in the classpath, and JDK 1.8 or later is configured for the project.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParameterizedParametersStaticCollection" defaultSeverity="WARNING" displayName="Parameterized test class without data provider method" enabled="false" language="JAVA" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 4 &lt;a href="https://github.com/junit-team/junit4/wiki/parameterized-tests"&gt;parameterized test&lt;/a&gt; classes that are annotated
with &lt;code&gt;@RunWith(Parameterized.class)&lt;/code&gt; but either do not include a data provider method annotated with &lt;code&gt;@Parameterized.Parameters&lt;/code&gt; or
this method has an incorrect signature. Such test classes cannot be run.
The data provider method should be &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; and have a return type of &lt;code&gt;Iterable&lt;/code&gt; or
&lt;code&gt;Object[]&lt;/code&gt;.
&lt;p&gt;Suggests creating an empty parameter provider method or changing the signature of the incorrect data provider method.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @RunWith(Parameterized.class)
  public class ImportantTest {
    private int input;
    private int expected;

    ImportantTest(int input, int expected) {
      this.input = input;
      this.expected = expected;
    }

    // ... test cases
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @RunWith(Parameterized.class)
  public class ImportantTest {
    private int input;
    private int expected;

    ImportantTest(int input, int expected) {
      this.input = input;
      this.expected = expected;
    }

    @Parameters
    public static Iterable&amp;lt;Object[]&gt; parameters() {
      return null;
    }

    // ... test cases
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Junit4Converter" defaultSeverity="INFORMATION" displayName="JUnit 3 test can be JUnit 4" enabled="true" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit 3 test classes that can be converted to JUnit 4 test classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class MainTestCase extends junit.framework.TestCase {
    public void test() {
      Assert.assertTrue(true);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class MainTestCase {
    @org.junit.Test
    public void test() {
      Assert.assertTrue(true);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 5 or higher, and JUnit 4 is available on the classpath.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuperTearDownInFinally" defaultSeverity="WARNING" displayName="JUnit 3 'super.tearDown()' is not called from 'finally' block" enabled="false" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls of the JUnit 3's &lt;code&gt;super.tearDown()&lt;/code&gt; method that are not performed inside a &lt;code&gt;finally&lt;/code&gt; block.
If an exception is thrown before &lt;code&gt;super.tearDown()&lt;/code&gt; is called it could lead to inconsistencies and leaks.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class AnotherTest extends CompanyTestCase {
    private Path path;

    @Override
    protected void setUp() throws Exception {
      super.setUp();
      path = Files.createTempFile("File", ".tmp");
    }

    @Override
    protected void tearDown() throws Exception {
      Files.delete(path);
      super.tearDown();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Improved code:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class AnotherTest extends CompanyTestCase {
    private Path path;

    @Override
    protected void setUp() throws Exception {
      super.setUp();
      path = Files.createTempFile("File", ".tmp");
    }

    @Override
    protected void tearDown() throws Exception {
      try {
        Files.delete(path);
      } finally {
        super.tearDown();
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MigrateAssertToMatcherAssert" defaultSeverity="WARNING" displayName="JUnit assertion can be 'assertThat()' call" enabled="false" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Assert.assertEquals()&lt;/code&gt;, &lt;code&gt;Assert.assertTrue()&lt;/code&gt;, etc. methods
which can be migrated to Hamcrest declarative style &lt;code&gt;Assert.assertThat()&lt;/code&gt; calls.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class SubstantialTest {
    @Test
    public void testContents(Collection&amp;lt;String&amp;gt; c, String s) {
      Assert.assertTrue(c.contains(s));
      Assert.assertEquals(c, s);
      Assert.assertNotNull(c);
      Assert.assertNull(c);
      Assert.assertFalse(c.contains(s));
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is provided to perform the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class SubstantialTest {
    @Test
    public void testContents(Collection&amp;lt;String&amp;gt; c, String s) {
      assertThat(c, hasItem(o));
      assertThat(o, is(c));
      assertThat(c, notNullValue());
      assertThat(c, nullValue());
      assertThat(c, not(hasItem(o)));
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection requires that the Hamcrest library is available on the classpath.
&lt;p&gt;Use the &lt;b&gt;Statically import matcher's methods&lt;/b&gt; option to specify if you want the quick-fix to statically import the Hamcrest matcher methods.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssertEqualsCalledOnArray" defaultSeverity="WARNING" displayName="'assertEquals()' called on array" enabled="false" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit &lt;code&gt;assertEquals()&lt;/code&gt; calls with arguments of an array type.
Such methods compare the arrays' identities instead of the arrays' contents.
Array contents should be checked with the &lt;code&gt;assertArrayEquals()&lt;/code&gt; method.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Test
  public void testSort() {
    int[] actual = {248, 496, 0, 56};
    Arrays.sort(actual);
    Assert.assertEquals(new int[] {0, 56, 248, 496}, actual);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Test
  public void testSort() {
    int[] actual = {248, 496, 0, 56};
    Arrays.sort(actual);
    Assert.assertArrayEquals(new int[] {0, 56, 248, 496}, actual);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JUnitMixedFramework" defaultSeverity="WARNING" displayName="JUnit API usage from multiple versions in a single TestCase" enabled="true" language="JVM" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit annotated methods when used in a test case from a different JUnit version. To determine the framework version for a test case
the inspection checks the framework version of the super class when available. When a super class is not available it will use the most used
framework in the test case.
&lt;p&gt;Example (JUnit 4 annotation in JUnit 3 test case):&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class MyTest extends TestCase {
      @Test
      public void foo() { }

      @Test
      @Ignore
      public void testBar() { }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class MyTest extends TestCase {
      public void testFoo() {}

      public void _testBar() {}
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example (JUnit 5 annotation in JUnit 4 test case):&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class MyTest {
      @BeforeAll // JUnit 5 lifecycle method
      public void initialize() { }

      @org.junit.Test  // JUnit 4 test annotation
      public void test() {}

      @org.junit.Test  // JUnit 4 test annotation
      public void testWouldBeExecuted() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  public class MyTest {
      @BeforeClass // JUnit 4 lifecycle method
      public void initialize() { }

      @org.junit.Test  // JUnit 4 test annotation
      public void test() {}

      @org.junit.Test  // JUnit 4 test annotation
      public void testWouldBeExecuted() {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssertEqualsMayBeAssertSame" defaultSeverity="WARNING" displayName="'assertEquals()' may be 'assertSame()'" enabled="false" language="UAST" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit &lt;code&gt;assertEquals()&lt;/code&gt; calls that can be replaced with an equivalent &lt;code&gt;assertSame()&lt;/code&gt; call.
This is possible when the arguments are instances of a &lt;code&gt;final&lt;/code&gt; class that does not override the &lt;code&gt;Object.equals()&lt;/code&gt;
method and makes it explicit that the object identity is compared.
&lt;p&gt;Suggests replacing &lt;code&gt;assertEquals()&lt;/code&gt; with &lt;code&gt;assertSame()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Test
  public void testObjectType() {
    Object o = getObject();
    Assert.assertEquals(String.class, o.getClass());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Test
  public void testSort() {
    Object o = getObject();
    Assert.assertSame(String.class, o.getClass());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultipleExceptionsDeclaredOnTestMethod" defaultSeverity="WARNING" displayName="Multiple exceptions declared on test method" enabled="false" language="JAVA" pluginId="JUnit" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JUnit test method &lt;code&gt;throws&lt;/code&gt; clauses with more than one exception.
Such clauses are unnecessarily verbose.
Test methods will not be called from other project code, so there is no need to handle these exceptions separately.
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Test
  public void testReflection() throws NoSuchMethodException,
      InvocationTargetException, IllegalAccessException {
    String result = (String) String.class.getMethod("trim")
        .invoke(" hello ");
    assertEquals("hello", result);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick fix is provided to replace the exception declarations with a single exception:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
  @Test
  public void testReflection() throws Exception {
    String result = (String) String.class.getMethod("trim")
        .invoke(" hello ");
    assertEquals("hello", result);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="General" path=""><inspection shortName="ProblematicWhitespace" defaultSeverity="WARNING" displayName="Problematic whitespace" enabled="false" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following problems:
&lt;ul&gt;
  &lt;li&gt;Tabs used for indentation when the code style is configured to use only spaces.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation when the code style is configured to use only tabs.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation and tabs used for alignment when the code
    style is configured to use smart tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Annotator" defaultSeverity="ERROR" displayName="Annotator" enabled="true" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run.
These issues are usually always highlighted in the editor and can't be configured, unlike inspections.
These options control the scope of checks performed by this inspection:
&lt;ul&gt;
  &lt;li&gt;Option "&lt;b&gt;Report syntax errors&lt;/b&gt;": report parser-related issues.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report issues from language-specific annotators&lt;/b&gt;": report issues found by annotators configured for the relevant language.
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/annotator.html"&gt;Custom Language Support: Annotators&lt;/a&gt; for details.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report other highlighting problems&lt;/b&gt;": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions).
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting"&gt;Custom Language Support: Highlighting&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="QodanaJavaSanity" defaultSeverity="ERROR" displayName="Java sanity" enabled="false" language="JAVA" pluginId="org.intellij.qodana" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in Java code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantSuppression" defaultSeverity="WARNING" displayName="Redundant suppression" enabled="true" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@SuppressWarning&lt;/code&gt; annotation, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;// noinspection&lt;/code&gt; line comment, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/** noinspection */&lt;/code&gt; JavaDoc comment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
public class C {
 // symbol is already private,
 // but annotation is still around
  @SuppressWarnings({"WeakerAccess"})
  private boolean CONST = true;
  void f() {
    CONST = false;
  }
}
&lt;/code&gt;&lt;/pre&gt;


&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="InjectedReferences" defaultSeverity="ERROR" displayName="Injected references" enabled="true" language="" pluginId="org.intellij.intelliLang" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references injected by
&lt;a href="https://www.jetbrains.com/help/idea/using-language-injections.html"&gt;Language Injections&lt;/a&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
    @Language("file-reference")
    String fileName = "/home/user/nonexistent.file"; // highlighted if file doesn't exist
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JavaAnnotator" defaultSeverity="ERROR" displayName="Java annotator" enabled="false" language="JAVA" pluginId="org.intellij.qodana" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="QodanaKotlinSanity" defaultSeverity="ERROR" displayName="Kotlin sanity" enabled="false" language="kotlin" pluginId="org.intellij.qodana" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in Kotlin code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReassignedToPlainText" defaultSeverity="WARNING" displayName="Reassigned to plain text" enabled="true" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files that were explicitly re-assigned to Plain Text File Type.
This association is unnecessary because the platform auto-detects text files by content automatically.

&lt;p&gt;You can dismiss this warning by removing the file type association
in &lt;b&gt;Settings | Editor | File Types | Text&lt;/b&gt;.&lt;/p&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InconsistentLineSeparators" defaultSeverity="WARNING" displayName="Inconsistent line separators" enabled="false" language="" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files with line separators different from the ones that are specified in the project's settings.
&lt;p&gt;For example, the inspection will be triggered if you set the line separator to &lt;code&gt;\n&lt;/code&gt; in
  &lt;a href="settings://preferences.sourceCode?Line%20separator"&gt;Settings | Editor | Code Style | Line separator&lt;/a&gt;,
  while the file you are editing uses &lt;code&gt;\r\n&lt;/code&gt; as a line separator.&lt;/p&gt;

&lt;p&gt;The inspection also warns you about mixed line separators within a file.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TodoComment" defaultSeverity="WARNING" displayName="TODO comment" enabled="false" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;TODO&lt;/b&gt; comments in your code.
&lt;p&gt;You can configure the format for &lt;b&gt;TODO&lt;/b&gt; comments in &lt;a href="settings://preferences.toDoOptions"&gt;Settings | Editor | TODO&lt;/a&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Enable the &lt;b&gt;Only warn on TODO comments without any details&lt;/b&gt; option to only warn on empty TODO comments, that
  don't provide any description on the task that should be done. Disable to report all TODO comments.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyDirectory" defaultSeverity="WARNING" displayName="Empty directory" enabled="false" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports empty directories.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Only report empty directories located under a source folder&lt;/b&gt; option to have only directories under source
  roots reported.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect formatting" enabled="false" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports formatting issues that appear if your code doesn't
  follow your project's code style settings.
&lt;/p&gt;
&lt;p&gt;
  This inspection is not compatible with languages that require
  third-party formatters for code formatting, for example, Go or
  C with CLangFormat enabled.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="LongLine" defaultSeverity="WARNING" displayName="Line is longer than allowed by code style" enabled="false" pluginId="com.intellij" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lines that are longer than the &lt;b&gt;Hard wrap at&lt;/b&gt; parameter specified in
&lt;a href="settings://preferences.sourceCode?Hard%20wrap%20at"&gt;Settings | Editor | Code Style | General&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Coroutine inspections" path="Kotlin"><inspection shortName="RunBlocking" defaultSeverity="WARNING" displayName="RunBlocking in coroutine" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports runBlocking builders that can be reached from coroutines. 
&lt;p&gt;Coroutines share threads for execution. When a runBlocking builder is called from a coroutine it blocks the underlying thread and prevents other coroutines from using this resource. This can result in performance issues and in bad cases thread starvation.&lt;/p&gt;
&lt;p&gt;It provides a potential callstack from coroutine primitive (suspend function or builder) to runBlocking builder.&lt;/p&gt;
&lt;p&gt;Example: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  suspend fun main() {
      foo() 
   }

  fun foo() {
      runBlocking { suspendFunction() }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Potential solution: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  suspend fun main() {
      foo() 
   }

  suspend fun foo() {
      suspendFunction()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;explore functions with overrides&lt;/b&gt; option to configure analysis for virtual functions:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Use the &lt;b&gt;No&lt;/b&gt; option to skip analysis for a function with overrides.&lt;/li&gt;
    &lt;li&gt;Use the &lt;b&gt;Yes, excluding overrides&lt;/b&gt; option to only explore the function in the defined callee type.&lt;/li&gt;
    &lt;li&gt;Use the &lt;b&gt;Yes, including overrides&lt;/b&gt; option to explore the function and all overrides.&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Encapsulation" path="Java"><inspection shortName="PublicInnerClass" defaultSeverity="WARNING" displayName="'public' nested class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;public&lt;/code&gt; nested classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Outer {
    public static class Nested {} // warning
    public class Inner {}         // warning
    public enum Mode {}           // warning depends on the setting
    public interface I {}         // warning depends on the setting
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore 'public' inner enums&lt;/b&gt; option to ignore &lt;code&gt;public&lt;/code&gt; inner enums.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore 'public' inner interfaces&lt;/b&gt; option to ignore &lt;code&gt;public&lt;/code&gt; inner interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UseOfAnotherObjectsPrivateField" defaultSeverity="WARNING" displayName="Accessing a non-public field of another object" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports accesses to &lt;code&gt;private&lt;/code&gt; or &lt;code&gt;protected&lt;/code&gt; fields of another object.
Java allows access to such fields for objects of the same class as the current object but
  some coding styles discourage this use. Additionally, such direct access to &lt;code&gt;private&lt;/code&gt; fields
  may fail in component-oriented architectures, such as Spring or Hibernate, that expect all access
  to other objects to be through method calls so the framework can mediate access
  using proxies.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Base {
    protected int bar;

    void increment(Base base) {
      bar++;
      base.bar++; // warning: direct access to another object's non-public field
    }
  }
&lt;/code&gt;&lt;/pre&gt;
A quick-fix to encapsulate the field is available.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore accesses from the same class&lt;/b&gt; option to ignore access from the same class and only report access
    from inner or outer classes.
    &lt;p&gt;To ignore access from inner classes as well, use the nested &lt;b&gt;Ignore accesses from inner classes&lt;/b&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore accesses from 'equals()' method&lt;/b&gt; to ignore access from an &lt;code&gt;equals()&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProtectedField" defaultSeverity="WARNING" displayName="Protected field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;protected&lt;/code&gt; fields.
&lt;p&gt;Constants (that is, variables marked &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;final&lt;/code&gt;) are not reported.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class A {
    protected Object object;              // warning
    protected final static int MODE = 0;  // constant, no warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicField" defaultSeverity="INFORMATION" displayName="'public' field" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;public&lt;/code&gt; fields.
Constants (fields marked with &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt;) are not reported.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    public String name;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore If Annotated By&lt;/b&gt; list to specify annotations to ignore. The inspection will ignore fields with
    any of these annotations.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore 'public final' fields of an enum&lt;/b&gt; option to ignore &lt;code&gt;public final&lt;/code&gt; fields
    of the &lt;code&gt;enum&lt;/code&gt; type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentOrReturnOfFieldWithMutableType" defaultSeverity="WARNING" displayName="Assignment or return of field with mutable type" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports return of, or assignment from a method parameter to an array or a mutable type like
&lt;code&gt;Collection&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Calendar&lt;/code&gt;, etc.
&lt;p&gt;Because such types are mutable, this construct may
  result in unexpected modifications of an object's state from outside the owning class. Although this construct may be useful for
  performance reasons, it is inherently prone to bugs.&lt;/p&gt;
&lt;p&gt;The following mutable types are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.Calendar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.Collection&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.Map&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.google.common.collect.Multimap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;com.google.common.collect.Table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The quick-fix adds a call to the field's &lt;code&gt;.clone()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Log {
    String[] messages;
    ...

    String[] getMessages() {
      return messages; // warning: Return of String[] field 'messages'
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Log {
    String[] messages;
    ...

    String[] getMessages() {
      return messages.clone();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the &lt;b&gt;Ignore assignments in and returns from private methods&lt;/b&gt; option to ignore assignments and returns in &lt;code&gt;private&lt;/code&gt; methods.

  &lt;!--&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;--&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProtectedInnerClass" defaultSeverity="WARNING" displayName="Protected nested class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;protected&lt;/code&gt; nested classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Outer {
    protected static class Nested {} // warning
    protected class Inner {}         // warning
    protected enum Mode {}           // warning depends on the setting
    protected interface I {}         // warning depends on the setting
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore 'protected' inner enums&lt;/b&gt; option to ignore &lt;code&gt;protected&lt;/code&gt; inner enums.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore 'protected' inner interfaces&lt;/b&gt; option to ignore &lt;code&gt;protected&lt;/code&gt; inner interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageVisibleInnerClass" defaultSeverity="WARNING" displayName="Package-visible nested class" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested classes that are declared without any access modifier (also known as package-private).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Outer {
    static class Nested {}  // warning
    class Inner {}          // warning
    enum Mode {}            // warning depends on the setting
    interface I {}          // warning depends on the setting
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore package-visible inner enums&lt;/b&gt; option to ignore package-private inner enums.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore package-visible inner interfaces&lt;/b&gt; option to ignore package-private inner interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageVisibleField" defaultSeverity="WARNING" displayName="Package-visible field" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports fields that are declared without any access modifier (also known as package-private).
&lt;p&gt;Constants (that is, fields marked &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt;) are not reported.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class A {
    Object object;             // warning
    final static int MODE = 0; // constant, no warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Other problems" path="Kotlin"><inspection shortName="EnumValuesSoftDeprecate" defaultSeverity="WARNING" displayName="'Enum.values()' is recommended to be replaced by 'Enum.entries' since 1.9" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls from Kotlin to &lt;code&gt;values()&lt;/code&gt; method in enum classes that can be replaced with &lt;code&gt;entries&lt;/code&gt; property read.
&lt;p&gt;
    Use of &lt;code&gt;Enum.entries&lt;/code&gt; may improve performance of your code.
&lt;/p&gt;
&lt;p&gt;
    The quick-fix replaces &lt;code&gt;values()&lt;/code&gt; with &lt;code&gt;entries&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;More details:&lt;/b&gt; &lt;a href="https://youtrack.jetbrains.com/issue/KT-48872"&gt;
    KT-48872 Provide modern and performant replacement for Enum.values()&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;entries&lt;/code&gt; property type is different from the return type of &lt;code&gt;values()&lt;/code&gt; method
    (&lt;code&gt;EnumEntries&amp;lt;T&amp;gt;&lt;/code&gt; which inherits from &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt;).
    Due to this in some cases quick fix inserts extra &lt;code&gt;.toTypedArray()&lt;/code&gt; conversion to not break the code, but
    for most common cases replacement will be done without it (e.g. in &lt;code&gt;for&lt;/code&gt; loop).
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    enum class Version {
        V1, V2
    }

    Version.&lt;b&gt;values()&lt;/b&gt;.forEach { /* .. */ }
    val firstVersion = Version.&lt;b&gt;values()&lt;/b&gt;[0]
    functionExpectingArray(Version.&lt;b&gt;values()&lt;/b&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    enum class Version {
        V1, V2
    }

    Version.&lt;b&gt;entries&lt;/b&gt;.forEach { /* .. */ }
    val firstVersion = Version.&lt;b&gt;entries&lt;/b&gt;[0]
    functionExpectingArray(Version.&lt;b&gt;entries.toTypedArray()&lt;/b&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ReplacePrintlnWithLogging" defaultSeverity="WARNING" displayName="Call to 'print()' or 'println()'" enabled="false" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;println&lt;/code&gt;.
&lt;p&gt;Such statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust
  logging facility.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PublicApiImplicitType" defaultSeverity="WEAK WARNING" displayName="Public API declaration with implicit return type" enabled="false" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
    Reports &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt; functions and properties that have an implicit return type.
    For API stability reasons, it's recommended to specify such types explicitly.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun publicFunctionWhichAbusesTypeInference() =
      otherFunctionWithNotObviousReturnType() ?: yetAnotherFunctionWithNotObviousReturnType()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun publicFunctionWhichAbusesTypeInference(): &lt;b&gt;Api&lt;/b&gt; =
      otherFunctionWithNotObviousReturnType() ?: yetAnotherFunctionWithNotObviousReturnType()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="FloatingPointLiteralPrecision" defaultSeverity="WEAK WARNING" displayName="Floating-point literal exceeds the available precision" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports floating-point literals that cannot be represented with the required precision
using &lt;a href="https://en.wikipedia.org/wiki/IEEE_754"&gt;IEEE 754&lt;/a&gt; &lt;code&gt;Float&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt; types.

&lt;p&gt;
    For example, &lt;code&gt;1.9999999999999999999&lt;/code&gt; has too many significant digits,
    so its representation as a &lt;code&gt;Double&lt;/code&gt; will be rounded to &lt;code&gt;2.0&lt;/code&gt;.
    Specifying excess digits may be misleading as it hides the fact that computations
    use rounded values instead.
&lt;/p&gt;

&lt;p&gt;
    The quick-fix replaces the literal with a rounded value that matches the actual representation
    of the constant.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x: Float = 3.14159265359f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val x: Float = 3.1415927f
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EnumValuesSoftDeprecateInJava" defaultSeverity="WARNING" displayName="'Enum.values()' is recommended to be replaced by 'Enum.getEntries()' since Kotlin 1.9" enabled="true" language="JAVA" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls from Java to &lt;code&gt;values()&lt;/code&gt; method of Kotlin enum classes that can be replaced with &lt;code&gt;getEntries()&lt;/code&gt;.
&lt;p&gt;
    Use of &lt;code&gt;Enum.getEntries()&lt;/code&gt; may improve performance of your code.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;More details:&lt;/b&gt; &lt;a href="https://youtrack.jetbrains.com/issue/KT-48872"&gt;
    KT-48872 Provide modern and performant replacement for Enum.values()&lt;/a&gt;
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="KotlinNoActualForExpect" defaultSeverity="ERROR" displayName="No actual for expect declaration" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;expect&lt;/code&gt; declarations that do not have a corresponding
&lt;code&gt;actual&lt;/code&gt; declaration in an implementing multi-platform module.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Syntactic clarification" path="Scala"><inspection shortName="ConvertNullInitializerToUnderscore" defaultSeverity="WARNING" displayName="Null initializer can be replaced by _" enabled="true" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports variable definitions that are explicitly initialized with &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are 3 different cases of &lt;code&gt;var v: T = null&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;code&gt;v&lt;/code&gt; is an &lt;em&gt;optional&lt;/em&gt; value&lt;br&gt;
        &amp;rarr; use &lt;code&gt;Option[T]&lt;/code&gt; type, which is idiomatic and type safe&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;v&lt;/code&gt; is an &lt;em&gt;uninitialized&lt;/em&gt; value (a value must be assigned)&lt;br&gt;
        &amp;rarr; use &lt;code&gt;_&lt;/code&gt; (Scala 2) or &lt;code&gt;scala.compiletime.uninitialized&lt;/code&gt; (Scala 3) as initializer,
          which is clear, concise, and platform-independent&lt;/li&gt;
    &lt;li&gt;It is a performance &lt;em&gt;optimization&lt;/em&gt; (you actually use the &lt;code&gt;null&lt;/code&gt; value)&lt;br&gt;
        &amp;rarr; explicitly suppressed the inspection for the unsafe code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Two quickfixes will be offered:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;em&gt;Use _ initializer&lt;/em&gt; will replace &lt;code&gt;null&lt;/code&gt; with &lt;code&gt;_&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;Use Option type&lt;/em&gt; will replace the type of the variable with &lt;code&gt;Option&lt;/code&gt; and initialize it with &lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    var optional: String = null
    var uninit: String = null

    uninit = "initialized later"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fixes are applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
    var optional: Option[String] = None
    var uninit: String = _

    uninit = "initialized later"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AutoTupling" defaultSeverity="WARNING" displayName="Auto-tupling" enabled="false" language="Scala" pluginId="org.intellij.scala" pluginVersion="2025.1.32" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports comma-separated argumenrs that could be converted into tuples.&lt;/p&gt;
&lt;p&gt;Scala compiler tries to convert comma-separated arguments into tuples if there are no appropriate multi-argument methods but there is a single appropriate one-argument method. Such conversion may disrupt type safety and lead to unexpected results.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def foo(a: Any) = {}
  foo(1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def foo(a: Any) = {}
  foo((1, 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="GPath" path="Groovy"><inspection shortName="GroovyListGetCanBeKeyedAccess" defaultSeverity="WARNING" displayName="Call to List.get can be keyed access" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.util.List.get()&lt;/code&gt; methods. Such calls could be replaced
by the shorter and clearer keyed access form.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def list = ["foo"]
def str = list.get(0) // list.get(0) could be replaced with list[0]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def list = ["foo"]
def str = list[0]
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyMapGetCanBeKeyedAccess" defaultSeverity="WARNING" displayName="Call to Map.get can be keyed access" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.util.Map.get()&lt;/code&gt; methods. Such calls could be replaced
by the shorter and clearer keyed access form.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def map = ["foo": "bar"]
def str = map.get("foo") // map.get("foo") could be replaced with map["foo"]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def map = ["foo": "bar"]
def str = map["foo"]
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyListSetCanBeKeyedAccess" defaultSeverity="WARNING" displayName="Call to List.set can be keyed access" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.util.List.set()&lt;/code&gt; methods. Such calls could be replaced
by the shorter and clearer keyed access form.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def list = ["foo"]
list.set(0, "bar") // list.set(0, "bar") could be replaced with list[0] = "bar"
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def list = ["foo"]
list[0] = "bar"
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GroovyMapPutCanBeKeyedAccess" defaultSeverity="WARNING" displayName="Call to Map.put can be keyed access" enabled="false" language="Groovy" pluginId="org.intellij.groovy" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.util.Map.put()&lt;/code&gt; methods. Such calls could be replaced
by the shorter and clearer keyed access form.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def map = ["foo": "bar"]
map.put("foo", "baz") // map.put("foo", "baz") could be replaced with map["foo"] = "baz"
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
def map = ["foo": "bar"]
map["foo"] = "baz"
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Probable bugs" path="Java"><inspection shortName="IncorrectMessageFormat" defaultSeverity="WARNING" displayName="Incorrect 'MessageFormat' pattern" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports incorrect message format patterns or incorrect indexes of placeholders
&lt;p&gt;The following errors are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unparsed or negative index&lt;/li&gt;
  &lt;li&gt;Unclosed brace&lt;/li&gt;
  &lt;li&gt;Unpaired quote. In this case, a part of a pattern may not be used&lt;/li&gt;
  &lt;li&gt;Probably incorrect number of quotes&lt;/li&gt;
  &lt;li&gt;Incorrect lower bound of nested choice patterns&lt;/li&gt;
  &lt;li&gt;Incorrect indexes of placeholders. In this case, a placeholder may not be substituted or an argument may not be used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  MessageFormat.format("{wrong}", 1); // incorrect index
  MessageFormat.format("{0", 1); // Unmatched brace
  MessageFormat.format("'{0}", 1); // Unpaired quote
  MessageFormat.format("It''''s {0}", 1); // "It''s" will be printed, instead of "It's"
  MessageFormat.format("{0}", 1, 2); // The argument with index '1' is not used in the pattern
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Custom MessageFormat methods&lt;/b&gt; table
  to specify method calls that should have their arguments checked as MessageFormat patterns.
  The table contains pairs of fully qualified class name and method name regular expression
  to match the containing class and name of the method calls.
  Class names also match subclasses.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2023.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayEquals" defaultSeverity="WARNING" displayName="'equals()' called on array" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;equals()&lt;/code&gt; calls that compare two arrays.
&lt;p&gt;Calling &lt;code&gt;equals()&lt;/code&gt; on an array compares identity and is equivalent to using &lt;code&gt;==&lt;/code&gt;.
  Use &lt;code&gt;Arrays.equals()&lt;/code&gt; to compare the contents of two arrays, or &lt;code&gt;Arrays.deepEquals()&lt;/code&gt; for
  multi-dimensional arrays.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void sample(int[] first, int[] second){
    if (first.equals(second)) return;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void sample(int[] first, int[] second){
    if (Arrays.equals(first, second)) return;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="StringConcatenationInMessageFormatCall" defaultSeverity="WARNING" displayName="String concatenation as argument to 'MessageFormat.format()' call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-constant string concatenations used as an argument to a call to
&lt;code&gt;MessageFormat.format()&lt;/code&gt;.
&lt;p&gt;
  While occasionally intended, this is usually a misuse of the formatting method
  and may even cause unexpected exceptions if the variables used in the concatenated string contain
  special characters like &lt;code&gt;{&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Also, sometimes this could be the result
  of mistakenly concatenating a string format argument by typing a &lt;code&gt;+&lt;/code&gt; when a &lt;code&gt;,&lt;/code&gt; was meant.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String formatGreeting(String userName, int balance) {
    return MessageFormat.format("Hello, " + userName + "! Your balance is {0}.", balance);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Here, the &lt;code&gt;userName&lt;/code&gt; will be interpreted as a part of the format string, which may result
  in &lt;code&gt;IllegalArgumentException&lt;/code&gt; (for example, if &lt;code&gt;userName&lt;/code&gt; is &lt;code&gt;"{"&lt;/code&gt;).
  This call should be probably replaced with &lt;code&gt;MessageFormat.format("Hello, {0}! Your balance is {1}.", userName, balance)&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousIntegerDivAssignment" defaultSeverity="WARNING" displayName="Suspicious integer division assignment" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments whose right side is a division that shouldn't be truncated to integer.
&lt;p&gt;While occasionally intended, this construction is often buggy.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int x = 18;
  x *= 3/2; // doesn't change x because of the integer division result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This code should be replaced with:
&lt;pre&gt;&lt;code&gt;
  int x = 18;
  x *= 3.0/2;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  In the inspection options, you can disable warnings for suspicious but possibly correct divisions,
  for example, when the dividend can't be calculated statically.
&lt;pre&gt;&lt;code&gt;
  void calc(int d) {
     int x = 18;
     x *= d/2;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  &lt;small&gt;New in 2019.2&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OptionalOfNullableMisuse" defaultSeverity="WARNING" displayName="Use of Optional.ofNullable with null or not-null argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports uses of &lt;code&gt;Optional.ofNullable()&lt;/code&gt; where always null or always not-null argument is passed.
There's no point in using &lt;code&gt;Optional.ofNullable()&lt;/code&gt; in this case: either &lt;code&gt;Optional.empty()&lt;/code&gt;
or &lt;code&gt;Optional.of()&lt;/code&gt; should be used to explicitly state the intent of creating an always-empty
or always non-empty optional respectively. It's also possible that there's a mistake in 
&lt;code&gt;Optional.ofNullable()&lt;/code&gt; argument, so it should be examined.
&lt;p&gt;
  Example:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Optional&amp;lt;String&amp;gt; empty = Optional.ofNullable(null); // should be Optional.empty();
Optional&amp;lt;String&amp;gt; present = Optional.ofNullable("value"); // should be Optional.of("value"); 
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MagicConstant" defaultSeverity="WARNING" displayName="Magic constant" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions that can be replaced with "magic" constants.
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Bare literal "2" is used, warning:
  Font font = new Font("Arial", 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Predefined constant is used, good:
  Font font = new Font("Arial", Font.ITALIC)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  When possible, the quick-fix inserts an appropriate predefined constant.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The behavior of this inspection is controlled by &lt;code&gt;org.intellij.lang.annotations.MagicConstant&lt;/code&gt; annotation.
  Some standard Java library methods are pre-annotated, but you can use this annotation in your code as well.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SuspiciousReturnByteInputStream" defaultSeverity="WARNING" displayName="Suspicious byte value returned from 'InputStream.read()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions of &lt;code&gt;byte&lt;/code&gt; type returned from a method implementing the &lt;code&gt;InputStream.read()&lt;/code&gt; method.
&lt;p&gt;
  This is suspicious because &lt;code&gt;InputStream.read()&lt;/code&gt; should return a value in the range from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;,
  while an expression of byte type contains a value from &lt;code&gt;-128&lt;/code&gt; to &lt;code&gt;127&lt;/code&gt;.
  The quick-fix converts the expression into an unsigned &lt;code&gt;byte&lt;/code&gt; by applying the bitmask &lt;code&gt;0xFF&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
class MyInputStream extends InputStream {
  int pos = 0;
  byte[] data;

  MyInputStream(byte[] input) {
    data = input;
  }

  @Override
  public int read() {
    if (pos == data.length) {
      return -1;
    }
    return data[pos++]; // problem
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class MyInputStream extends InputStream {
  int pos = 0;
  byte[] data;

  MyInputStream(byte[] input) {
    data = input;
  }

  @Override
  public int read() {
    if (pos == data.length) {
      return -1;
    }
    return data[pos++] &amp; 0xFF;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2023.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IteratorNextDoesNotThrowNoSuchElementException" defaultSeverity="WARNING" displayName="'Iterator.next()' which can't throw 'NoSuchElementException'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implementations of &lt;code&gt;Iterator.next()&lt;/code&gt;
that cannot throw &lt;code&gt;java.util.NoSuchElementException&lt;/code&gt;.
&lt;p&gt;
  Such implementations violate the contract of &lt;code&gt;java.util.Iterator&lt;/code&gt;,
  and may result in subtle bugs if the iterator is used in a non-standard way.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Numbers implements Iterator&amp;lt;Integer&amp;gt; {
    @Override
    public Integer next() { //warning
        if (hasNext()) {
            return generateNext();
        } else {
            return null; //throw NoSuchElementException instead
        }
    }

    ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Contract" defaultSeverity="WARNING" displayName="Contract issues" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues in method &lt;code&gt;@Contract&lt;/code&gt; annotations. The types of issues that can be reported are:
&lt;ul&gt;
&lt;li&gt;Errors in contract syntax&lt;/li&gt;
&lt;li&gt;Contracts that do not conform to the method signature (wrong parameter count)&lt;/li&gt;
&lt;li&gt;Method implementations that contradict the contract (e.g. return &lt;code&gt;true&lt;/code&gt; when the contract says &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // method has no parameters, but contract expects 1
  @Contract("_ -&gt; fail")
  &lt;b&gt;void&lt;/b&gt; x() {
    &lt;b&gt;throw&lt;/b&gt; new AssertionError();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EqualsAndHashcode" defaultSeverity="WARNING" displayName="'equals()' and 'hashCode()' not paired" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that override the
&lt;code&gt;equals()&lt;/code&gt; method but do not override the
&lt;code&gt;hashCode()&lt;/code&gt; method or vice versa, which can potentially lead to problems
when the class is added to a &lt;code&gt;Collection&lt;/code&gt; or a &lt;code&gt;HashMap&lt;/code&gt;.
&lt;p&gt;The quick-fix generates the default implementation for an absent method.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class StringHolder {
  String s;

  @Override public int hashCode() {
    return s != null ? s.hashCode() : 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class StringHolder {
  String s;

  @Override public int hashCode() {
    return s != null ? s.hashCode() : 0;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (!(o instanceof StringHolder)) return false;

    StringHolder holder = (StringHolder)o;

    if (s != null ? !s.equals(holder.s) : holder.s != null) return false;

    return true;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnreachableCode" defaultSeverity="WARNING" displayName="Unreachable code" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the code which is never reached according to data flow analysis. 
It can be the result of previous always-true or always-false condition, unreachable loop body or 
catch section. Usually (though not always) unreachable code is a consequence of a previous warning,
so check inspection warnings form "Nullability and data flow problems", "Constant values", or
"Redundant operation on empty container" to better understand the cause.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void finishApplication() {
    System.exit(0);
    System.out.println("Application is terminated"); // Unreachable code
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Note that this inspection relies on method contract inference. In particular, if you call a static or final method
  that always throws an exception, then the "always failing" contract will be inferred, and code after the method call 
  will be considered unreachable. For example:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void run() {
    performAction();
    System.out.println("Action is performed"); // Unreachable code
  }
  
  static void performAction() {
    throw new AssertionError();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  This may cause false-positives if any kind of code postprocessing is used, for example, if an annotation processor 
  later replaces the method body with something useful. To avoid false-positive warnings, suppress the automatic 
  contract inference with explicit &lt;code&gt;@org.jetbrains.annotations.Contract&lt;/code&gt; annotation from 
  &lt;code&gt;org.jetbrains:annotations&lt;/code&gt; package:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void run() {
    performAction();
    System.out.println("Action is performed"); // No warning anymore
  }

  @Contract("-&gt; _") // implementation will be replaced
  static void performAction() {
    throw new AssertionError();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;New in 2024.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IterableUsedAsVararg" defaultSeverity="WARNING" displayName="Iterable is used as vararg" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports suspicious usages of &lt;code&gt;Collection&lt;/code&gt; or &lt;code&gt;Iterable&lt;/code&gt; in vararg method calls.
&lt;p&gt;For example, in the following method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;T&amp;gt; boolean contains(T needle, T... haystack) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a call like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if(contains("item", listOfStrings)) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;looks suspicious as the list will be wrapped into a single element array.
  Such code can be successfully compiled and will likely run without
  exceptions, but it's probably used by mistake.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Variable arity methods&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2019.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingMainMethod" defaultSeverity="WARNING" displayName="Confusing 'main()' method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that are named "main", but do not have the
&lt;code&gt;public static void main(String[])&lt;/code&gt; signature in Java up to 21.
Starting from Java 21 Preview, inspection doesn't highlight in case of package-private, protected or instance main methods,
also without parameters.
Additionally main methods located in anonymous or local classes are reported.
Anonymous and local classes do not have a fully qualified name and thus can't be run.
&lt;p&gt;Such methods may be confusing, as methods named "main"
  are expected to be application entry points.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    void main(String[] args) {} // warning here because there are no "public static" modifiers
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix that renames such methods is available only in the editor.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CastConflictsWithInstanceof" defaultSeverity="WARNING" displayName="Cast conflicts with 'instanceof'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type cast expressions that are preceded by an &lt;code&gt;instanceof&lt;/code&gt; check for a different type.
&lt;p&gt;
  Although this might be intended, such a construct is most likely an error, and will
  result in a &lt;code&gt;java.lang.ClassCastException&lt;/code&gt; at runtime.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    int whenCharSequenceCastToNumber(Object o){
      if (o instanceof CharSequence) {
        return ((Number) o).intValue();
      }
      return 0;
    }

    int earlyReturnWhenNotCharSequence(Object o){
      if (!(o instanceof CharSequence)) return 0;
      return ((Number)o).intValue();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousToArrayCall" defaultSeverity="WARNING" displayName="Suspicious 'Collection.toArray()' call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports suspicious calls to &lt;code&gt;Collection.toArray()&lt;/code&gt;.
&lt;p&gt;The following types of calls are considered suspicious:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    when the type of the array
    argument is not the same as the array type to which the result is casted.
  &lt;/li&gt;
  &lt;li&gt;
    when the type of the array argument does not match the type parameter in the collection declaration.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
void m1(List list) {
  Number[] ns = (Number[]) list.toArray(new String[0]);
}

void m2(List&amp;lt;Number&amp;gt; list) {
  Number[] ns = list.toArray(new String[0]);
}
&lt;/code&gt;&lt;/pre&gt;


&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedAssignment" defaultSeverity="WARNING" displayName="Unused assignment" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignment values that are not used after assignment.
If the assignment value is unused, it's better to remove the assignment to shorten the code and avoid redundant allocations.
&lt;p&gt;The following cases are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;variables that are never read after assignment&lt;/li&gt;
  &lt;li&gt;variables that are always overwritten with a new value before being read&lt;/li&gt;
  &lt;li&gt;variable initializers that are redundant (for one of the two reasons above)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;
Use the &lt;b&gt;Report redundant initializers&lt;/b&gt; option to report redundant initializers:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int getI() {
    int i = 0; // redundant initialization
    i = 2;
    return i;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Use the &lt;b&gt;Report prefix expressions that can be replaced with binary expressions&lt;/b&gt; option to report cases
where an &lt;code&gt;++i&lt;/code&gt; expression may be replaced with &lt;code&gt;i + 1&lt;/code&gt;:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int preInc(int value) {
    int res = value;
    return ++res;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Use the &lt;b&gt;Report postfix expressions where the changed value is not used&lt;/b&gt; option to report &lt;code&gt;i++&lt;/code&gt; cases
where the value of &lt;code&gt;i&lt;/code&gt; is not used later:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int postInc(int value) {
    int res = value;
    return res++;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Use the &lt;b&gt;Report pattern variables whose values are never used&lt;/b&gt; option to report cases where the value of a pattern variable
is overwritten before it is read:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (object instanceof String s) {
      s = "hello";
      System.out.println(s);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Use the &lt;b&gt;Report iteration parameters whose values are never used&lt;/b&gt; option to report cases where the value of an iteration parameter
of an enhanced &lt;code&gt;for&lt;/code&gt; statements is overwritten before it is read:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (String arg : args) {
      arg = "test";
      System.out.println(arg);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ObjectToString" defaultSeverity="WARNING" displayName="Call to default 'toString()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;toString()&lt;/code&gt; that use the default implementation
from &lt;code&gt;java.lang.Object&lt;/code&gt;.
&lt;p&gt;The default implementation is rarely intended but may be used by accident.&lt;/p&gt;
&lt;p&gt;
  Calls to &lt;code&gt;toString()&lt;/code&gt; on objects with &lt;code&gt;java.lang.Object&lt;/code&gt;,
  interface or abstract class type are ignored by this inspection.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Bar {
      void foo1(Bar bar) {
          String s = bar.toString(); // warning
          /* ... */
      }

      void foo2(Object obj) {
          String s = obj.toString(); // no warning here
          /* ... */
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MismatchedStringCase" defaultSeverity="WARNING" displayName="Mismatched case in 'String' operation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;String&lt;/code&gt; method calls that always return the same value (&lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;)
because a lowercase character is searched in an uppercase-only string or vice versa.
&lt;p&gt;Reported methods include &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;startsWith&lt;/code&gt;, &lt;code&gt;endsWith&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;,
  &lt;code&gt;indexOf&lt;/code&gt;, and &lt;code&gt;lastIndexOf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;
  if (columnName.toLowerCase().equals("ID")) {...}
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantOperationOnEmptyContainer" defaultSeverity="WARNING" displayName="Redundant operation on empty container" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant operations on empty collections, maps or arrays.
&lt;p&gt;
  Iterating, removing elements, sorting,
  and some other operations on empty collections have no effect and can be removed. Also, they may be a signal of a bug.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (numbers.isEmpty()){
    //error due to the missed negation
    int max = numbers.stream().max(Comparator.naturalOrder()).get();
    ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowableNotThrown" defaultSeverity="WARNING" displayName="'Throwable' not thrown" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiations of &lt;code&gt;Throwable&lt;/code&gt; or its subclasses, where the created &lt;code&gt;Throwable&lt;/code&gt;
is never actually thrown.
Additionally, this inspection reports method calls that return instances of &lt;code&gt;Throwable&lt;/code&gt; or its subclasses,
when the result of the method call is not thrown.
&lt;p&gt;Calls to methods annotated with the Error Prone's or AssertJ's &lt;code&gt;@CanIgnoreReturnValue&lt;/code&gt; annotation will not be reported.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    void check(String s) {
        if (s == null) {
            new NullPointerException("s");
        }
        // ...
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DataFlowIssue" defaultSeverity="WARNING" displayName="Nullability and data flow problems" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (array.length &amp;lt; index) {
  System.out.println(array[index]);
} // Array index is always out of bounds

if (str == null) System.out.println("str is null");
System.out.println(str.trim());
// the last statement may throw an NPE

@NotNull
Integer square(@Nullable Integer input) {
    // the method contract is violated
    return input == null ? null : input * input;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  The inspection behavior may be controlled by a number of annotations, such as
  &lt;a href="https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html"&gt;nullability&lt;/a&gt; annotations,
  &lt;code&gt;&lt;a href="https://www.jetbrains.com/help/idea/contract-annotations.html"&gt;@Contract&lt;/a&gt;&lt;/code&gt; annotation,
  &lt;code&gt;@Range&lt;/code&gt; annotation and so on.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Suggest @Nullable annotation for methods/fields/parameters where nullable values are used&lt;/b&gt; option to warn when a
    nullable value is passed as an argument to a method with a non-annotated parameter,
    stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating
    the &lt;code&gt;@Nullable&lt;/code&gt; annotation. You can also configure nullability annotations using the &lt;b&gt;Configure Annotations&lt;/b&gt; button.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Treat non-annotated members and parameters as @Nullable&lt;/b&gt; option to assume that non-annotated members can be null,
    so they must not be used in non-null context.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Report not-null required parameter with null-literal argument usages&lt;/b&gt; option to report method parameters that cannot be
    null (e.g. immediately dereferenced in the method body), but there are call sites where a &lt;code&gt;null&lt;/code&gt; literal is passed.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Report nullable methods that always return a non-null value&lt;/b&gt; option to report methods that are annotated as
  &lt;code&gt;@Nullable&lt;/code&gt;, but always return non-null value. In this case, it's suggested that you change the annotation to &lt;code&gt;@NotNull&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore assert statements&lt;/b&gt; option to control how the inspection treats &lt;code&gt;assert&lt;/code&gt; statements. By default, the option
    is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored
    (-da mode).&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Report problems that happen only on some code paths&lt;/b&gt; option to control whether to report problems that may happen only
    on some code path. If this option is disabled, warnings like &lt;i&gt;exception is possible&lt;/i&gt; will not be reported. The inspection will report
    only warnings like &lt;i&gt;exception will definitely occur&lt;/i&gt;. This mode may greatly reduce the number of false-positives, especially if the code
    is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most
    important problems in legacy code bases.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Before IntelliJ IDEA 2022.3, this inspection was part of the "Constant Conditions &amp; Exceptions" inspection.
  Now, it is split into two inspections:
  "Constant Values" and "Nullability and data flow problems".
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SuspiciousInvocationHandlerImplementation" defaultSeverity="WARNING" displayName="Suspicious 'InvocationHandler' implementation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implementations of &lt;code&gt;InvocationHandler&lt;/code&gt; that do not proxy standard
&lt;code&gt;Object&lt;/code&gt; methods like &lt;code&gt;hashCode()&lt;/code&gt;, &lt;code&gt;equals()&lt;/code&gt;, and &lt;code&gt;toString()&lt;/code&gt;.
&lt;p&gt;Failing to handle these methods might cause unexpected problems upon calling them on a proxy instance.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  InvocationHandler myHandler = (proxy, method, params) -&amp;gt; {
    System.out.println("Hello World!");
    &lt;b&gt;return&lt;/b&gt; null;
  };
  Runnable myProxy = (Runnable) Proxy.newProxyInstance(
    Thread.currentThread().getContextClassLoader(),
    &lt;b&gt;new&lt;/b&gt; Class[] {Runnable.class}, myHandler
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  This code snippet is designed to only proxy the &lt;code&gt;Runnable.run()&lt;/code&gt; method.
  However, calls to any &lt;code&gt;Object&lt;/code&gt; methods, like &lt;code&gt;hashCode()&lt;/code&gt;, are proxied as well.
  This can lead to problems like a &lt;code&gt;NullPointerException&lt;/code&gt;, for example, when adding &lt;code&gt;myProxy&lt;/code&gt; to a &lt;code&gt;HashSet&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectEquality" defaultSeverity="INFORMATION" displayName="Object comparison using '==', instead of 'equals()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports code that uses &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; rather than &lt;code&gt;equals()&lt;/code&gt; to test for object equality.
&lt;/p&gt;
&lt;p&gt;
  Comparing objects using &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; is often a bug,
  because it compares objects by identity instead of equality.
  Comparisons to &lt;code&gt;null&lt;/code&gt; are not reported.
&lt;/p&gt;
&lt;p&gt;
  Array, &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; comparisons are reported by separate inspections.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &lt;b&gt;if&lt;/b&gt; (list1 == list2) {
    &lt;b&gt;return&lt;/b&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &lt;b&gt;if&lt;/b&gt; (Objects.equals(list1, list2)) {
    &lt;b&gt;return&lt;/b&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the inspection settings to configure exceptions for this inspection.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EqualsUsesNonFinalVariable" defaultSeverity="WARNING" displayName="Non-final field referenced in 'equals()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implementations of &lt;code&gt;equals()&lt;/code&gt; that access
non-&lt;code&gt;final&lt;/code&gt; variables. Such access may result in &lt;code&gt;equals()&lt;/code&gt;
returning different results at different points in the object's lifecycle, which may in turn cause problems when
using the standard collections classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public class Person {
    private String lastName;

    @Override
    public boolean equals(Object obj) {
      ...
      Person other = (Person) obj;
      if (lastName == null) {
        if (!lastName.equals(other.lastName)) {
        return false;
      ...
      }
    }
  }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CapturingCleaner" defaultSeverity="WARNING" displayName="Cleaner captures object reference" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Runnable&lt;/code&gt; passed to a &lt;code&gt;Cleaner.register()&lt;/code&gt; capturing reference being registered.
If the reference is captured, it will never be phantom reachable and the cleaning action will never be invoked.
&lt;p&gt;Possible sources of this problem:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lambda using non-static methods, fields, or &lt;code&gt;this&lt;/code&gt; itself&lt;/li&gt;
  &lt;li&gt;Non-static inner class (anonymous or not) always captures this reference in java up to 18 version&lt;/li&gt;
  &lt;li&gt;Instance method reference&lt;/li&gt;
  &lt;li&gt;Access to outer class non-static members from non-static inner class&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Sample of code that will be reported: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int fileDescriptor;
  Cleaner.Cleanable cleanable = Cleaner.create().register(this, () -&gt; {
    System.out.println("adsad");
    //&lt;i&gt;this&lt;/i&gt; is captured via &lt;i&gt;fileDescriptor&lt;/i&gt;
    fileDescriptor = 0;
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This inspection only reports if the language level of the project or module is 9 or higher.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfiniteRecursion" defaultSeverity="WARNING" displayName="Infinite recursion" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods that call themselves infinitely unless an exception is thrown.
&lt;p&gt;
  Methods reported by this inspection cannot return normally.
  While such behavior may be intended, in many cases this is just an oversight.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  int baz() {
      return baz();
  }&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NewStringBufferWithCharArgument" defaultSeverity="WARNING" displayName="StringBuilder constructor call with 'char' argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;StringBuffer&lt;/code&gt; and &lt;code&gt;StringBuilder&lt;/code&gt; constructors with &lt;code&gt;char&lt;/code&gt; as the argument.
In this case, &lt;code&gt;char&lt;/code&gt; is silently cast to an integer and interpreted as the initial capacity of the buffer.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new StringBuilder('(').append("1").append(')');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new StringBuilder("(").append("1").append(')');
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EqualsWhichDoesntCheckParameterClass" defaultSeverity="WARNING" displayName="'equals()' method that does not check the class of its parameter" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;equals()&lt;/code&gt; methods that do not check the type of their parameter.
&lt;p&gt;Failure to check the type of the parameter
  in the &lt;code&gt;equals()&lt;/code&gt; method may result in latent errors if the object is used in an untyped collection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyClass {
    int x;

    @Override
    public boolean equals(Object obj) {
      // equals method should return false if obj is not MyClass
      return ((MyClass)obj).x == x;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NumberEquality" defaultSeverity="WARNING" displayName="Number comparison using '==', instead of 'equals()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that uses &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; instead of &lt;code&gt;equals()&lt;/code&gt; to test for &lt;code&gt;Number&lt;/code&gt; equality.
&lt;p&gt;
  With auto-boxing, it is easy
  to make the mistake of comparing two instances of a wrapper type instead of two primitives, for example &lt;code&gt;Integer&lt;/code&gt; instead of
  &lt;code&gt;int&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  void foo(Integer a, Integer b) {
    final boolean bool = a == b;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;a&lt;/code&gt; is known to be non-null, then it's safe to apply the "unsafe" quick-fix and get the result similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  void foo(Integer a, Integer b) {
    final boolean bool = a.equals(b);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MismatchedStringBuilderQueryUpdate" defaultSeverity="WARNING" displayName="Mismatched query and update of 'StringBuilder'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;StringBuilder&lt;/code&gt;, &lt;code&gt;StringBuffer&lt;/code&gt; or &lt;code&gt;StringJoiner&lt;/code&gt; objects whose contents are read but not written to,
or written to but not read.
&lt;p&gt;Such inconsistent reads and writes are pointless and probably indicate
  dead, incomplete, or erroneous code.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public void m1() {
    StringBuilder sb = new StringBuilder();
    sb.append("a");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringTokenizerDelimiter" defaultSeverity="WARNING" displayName="Duplicated delimiters in 'StringTokenizer'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;StringTokenizer()&lt;/code&gt; constructor calls or  &lt;code&gt;nextToken()&lt;/code&gt; method calls that
contain duplicate characters in the delimiter argument.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void printTokens(String text) {
    StringTokenizer tokenizer = new StringTokenizer(text, "\n\n");
    while (tokenizer.hasMoreTokens()) {
      System.out.println(tokenizer.nextToken());
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void printTokens(String text) {
    StringTokenizer tokenizer = new StringTokenizer(text, "\n");
    while (tokenizer.hasMoreTokens()) {
      System.out.println(tokenizer.nextToken());
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WrongPackageStatement" defaultSeverity="ERROR" displayName="Wrong package statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects &lt;code&gt;package&lt;/code&gt; statements that do not correspond to the project directory structure.
Also, reports classes without &lt;code&gt;package&lt;/code&gt; statements if the class is not located directly in
source root directory.
&lt;p&gt;While it's not strictly mandated by Java language, it's good practise to keep classes
from package &lt;code&gt;com.example.myapp&lt;/code&gt; inside a &lt;code&gt;com/example/myapp&lt;/code&gt; directory directly under
a source root. Failure to do this may confuse code readers and make some tools work incorrectly.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CovariantEquals" defaultSeverity="WARNING" displayName="Covariant 'equals()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;equals()&lt;/code&gt; methods taking an argument type other than
&lt;code&gt;java.lang.Object&lt;/code&gt; if the containing class does not have other overloads of
&lt;code&gt;equals()&lt;/code&gt; that take &lt;code&gt;java.lang.Object&lt;/code&gt; as
its argument type.
&lt;p&gt;
  A covariant version of &lt;code&gt;equals()&lt;/code&gt; does not override the
  &lt;code&gt;Object.equals(Object)&lt;/code&gt; method. It may cause unexpected
  behavior at runtime. For example, if the class is used to construct
  one of the standard collection classes, which expect that the
  &lt;code&gt;Object.equals(Object)&lt;/code&gt; method is overridden.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
      public boolean equals(Foo foo) {  // warning
          return false;
      }
  }
  class Bar {
      public boolean equals(Bar bar) {  // no warning here
          return false;
      }
      @Override
      public boolean equals(Object obj) {
          return false;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousTernaryOperatorInVarargsCall" defaultSeverity="WARNING" displayName="Suspicious ternary operator in varargs method call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports vararg method calls that use a ternary operator with mixed array and non-array branches.
&lt;p&gt;
When compiled, both branches are wrapped in arrays. As a result, the array branch is turned into
a two-dimensional array, which may indicate a problem.
&lt;/p&gt;
&lt;p&gt;
The quick-fix wraps the non-array branch in an array to prevent the compiler from doing the conversion.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    static void bar(boolean flag) {
        Object[] a = {1, 2};
        Object b = "hello";
        foo(flag ? a : b);
    }
    static void foo(Object... obj) {
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    static void bar(boolean flag) {
        Object[] a = {1, 2};
        Object b = "hello";
        foo(flag ? a : new Object[]{b});
    }
    static void foo(Object... obj) {
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Variable arity methods&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2020.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringEqualsCharSequence" defaultSeverity="WARNING" displayName="'String.equals()' called with 'CharSequence' argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;String.equals()&lt;/code&gt; with a &lt;code&gt;CharSequence&lt;/code&gt; as the argument.
&lt;p&gt;
  &lt;code&gt;String.equals()&lt;/code&gt; can only return &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;String&lt;/code&gt; arguments.
  To compare the contents of a &lt;code&gt;String&lt;/code&gt; with a non-&lt;code&gt;String&lt;/code&gt; &lt;code&gt;CharSequence&lt;/code&gt; argument,
  use the &lt;code&gt;contentEquals()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean equals(String s, CharSequence ch) {
    return s.equals(ch);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  boolean equals(String s, CharSequence ch) {
    return s.contentEquals(ch);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HashCodeUsesNonFinalVariable" defaultSeverity="WARNING" displayName="Non-final field referenced in 'hashCode()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implementations of &lt;code&gt;hashCode()&lt;/code&gt; that access
non-&lt;code&gt;final&lt;/code&gt; variables.
&lt;p&gt;
  Such access may result in &lt;code&gt;hashCode()&lt;/code&gt;
  returning different values at different points in the object's lifecycle, which may in turn cause problems when
  using the standard collections classes.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Drink {
    String name;
    Drink(String name) { this.name = name; }
    @Override public int hashCode() {
      return Objects.hash(name); //warning
    }
  }
  ...
    Drink coffee = new Drink("Coffee");
    priceMap.put(coffee, 10.0);
    coffee.name = "Tea";
    double coffeePrice = priceMap.get(coffee); //not found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix is suggested to make the field final:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Drink {
    final String name;
    ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectDateTimeFormat" defaultSeverity="WARNING" displayName="Incorrect 'DateTimeFormat' pattern" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports incorrect date time format patterns.
&lt;p&gt;The following errors are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unsupported pattern letters, like "TT"&lt;/li&gt;
  &lt;li&gt;Using reserved characters, like "#"&lt;/li&gt;
  &lt;li&gt;Incorrect use of padding&lt;/li&gt;
  &lt;li&gt;Unbalanced brackets&lt;/li&gt;
  &lt;li&gt;Incorrect amount of consecutive pattern letters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  DateTimeFormatter.ofPattern("[][]]"); // Closing ']' without previous opening '['
  DateTimeFormatter.ofPattern("TT"); // Illegal pattern letter 'T'
  DateTimeFormatter.ofPattern("{"); // Use of reserved character '{'
  DateTimeFormatter.ofPattern("MMMMMM"); // Too many consecutive pattern letters 'M'
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PrimitiveArrayArgumentToVariableArgMethod" defaultSeverity="WARNING" displayName="Confusing primitive array argument to varargs method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any calls to a variable arity method where the call has a primitive array in
the variable arity parameter position (for example, &lt;code&gt;System.out.printf("%s", new int[]{1, 2, 3})&lt;/code&gt;).
Such a primitive-array argument may be confusing, as it will be wrapped as a single-element array, rather than each individual
element being boxed, as might be expected.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String.format("%s", new int[]{1, 2, 3});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String.format("%s", (Object) new int[]{1, 2, 3});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Variable arity methods&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InvalidComparatorMethodReference" defaultSeverity="WARNING" displayName="Invalid method reference used for 'Comparator'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method references mapped to the &lt;code&gt;Comparator&lt;/code&gt; interface that don't fulfill its contract.
&lt;p&gt;
Some method references, like &lt;code&gt;Integer::max&lt;/code&gt;, can be mapped to the &lt;code&gt;Comparator&lt;/code&gt; interface.
However, using them as &lt;code&gt;Comparator&lt;/code&gt; is meaningless and the result might be unpredictable.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ArrayList&amp;lt;Integer&amp;gt; ints = foo();
  ints.sort(Math::min);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ArrayList&amp;lt;Integer&amp;gt; ints = foo();
  ints.sort(Comparator.reverseOrder());
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousSystemArraycopy" defaultSeverity="WARNING" displayName="Suspicious 'System.arraycopy()' call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports suspicious calls to &lt;code&gt;System.arraycopy()&lt;/code&gt;.
&lt;p&gt;Such calls are suspicious when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the source or destination is not of an array type
&lt;li&gt;the source and destination are of different types
&lt;li&gt;the copied chunk length is greater than &lt;code&gt;src.length - srcPos&lt;/code&gt;
&lt;li&gt;the copied chunk length is greater than &lt;code&gt;dest.length - destPos&lt;/code&gt;
&lt;li&gt;the ranges always intersect when the source and destination are the same array
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo() {
    int[] src = new int[] { 1, 2, 3, 4 };
    System.arraycopy(src, 0, src, 1, 2); // warning: Copying to the same array with intersecting ranges
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CastToIncompatibleInterface" defaultSeverity="WARNING" displayName="Cast to incompatible type" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type cast expressions where
the casted expression has a class/interface type that neither
extends/implements the cast class/interface type, nor has subclasses that do.
&lt;p&gt;
  Such a construct is likely erroneous, and will
  throw a &lt;code&gt;java.lang.ClassCastException&lt;/code&gt; at runtime.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  interface A {}
  interface Z {}
  static class C {}

  void x(C c) {
    if (c instanceof Z) {
      A a = ((A)c); // cast to incompatible interface 'A'
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousDateFormat" defaultSeverity="WARNING" displayName="Suspicious date format pattern" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports date format patterns that are likely used by mistake.
&lt;p&gt;The following patterns are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Uppercase "Y", unless "w" appears nearby. It stands for "Week year" that is almost always
    the same as normal "Year" (lowercase "y" pattern), but may point to the next year
    at the end of December.&lt;/li&gt;
  &lt;li&gt;Uppercase "M" (month) close to "H", "K", "h", or "k" (hour). It's likely that a lowercase "m" (minute) was intended.&lt;/li&gt;
  &lt;li&gt;Lowercase "m" (minute) close to "y" (year) or "d" (day in month). It's likely that an uppercase "M" (month) was intended.&lt;/li&gt;
  &lt;li&gt;Uppercase "D" (day in year) close to "M", or "L" (month). It's likely that a lowercase "d" (day in month) was intended.&lt;/li&gt;
  &lt;li&gt;Uppercase "S" (milliseconds) close to "m" (minutes). It's likely that a lowercase "s" (seconds) was intended.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Examples:&lt;br&gt;
  &lt;code&gt;new SimpleDateFormat("YYYY-MM-dd")&lt;/code&gt;: likely &lt;code&gt;"yyyy-MM-dd"&lt;/code&gt; was intended.&lt;br&gt;
  &lt;code&gt;new SimpleDateFormat("yyyy-MM-DD")&lt;/code&gt;: likely &lt;code&gt;"yyyy-MM-dd"&lt;/code&gt; was intended.&lt;br&gt;
  &lt;code&gt;new SimpleDateFormat("HH:MM")&lt;/code&gt;: likely &lt;code&gt;"HH:mm"&lt;/code&gt; was intended.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassGetClass" defaultSeverity="WARNING" displayName="Suspicious 'Class.getClass()' call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;getClass()&lt;/code&gt; methods that are called on a &lt;code&gt;java.lang.Class&lt;/code&gt; instance.
&lt;p&gt;This is usually a mistake as the result is always equivalent to &lt;code&gt;Class.class&lt;/code&gt;.
If it's a mistake, then it's better to remove the &lt;code&gt;getClass()&lt;/code&gt; call and use the qualifier directly.
  If the behavior is intended, then it's better to write &lt;code&gt;Class.class&lt;/code&gt; explicitly to avoid confusion.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(Class&amp;lt;?&amp;gt; clazz) {
    String name = clazz.getClass().getName();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After one of the possible quick-fixes is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(Class&amp;lt;?&amp;gt; clazz) {
    String name = clazz.getName();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringConcatenationMissingWhitespace" defaultSeverity="WARNING" displayName="Whitespace may be missing in string concatenation" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string concatenations with missing whitespaces, that is where the left-hand side
ends with a Unicode letter or digit and the right-hand side starts with a Unicode letter or digit.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String sql = "SELECT column" +
               "FROM table";
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore concatenations with variable strings&lt;/b&gt; option to only report
  when both the left and right side of the concatenation are literals.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MathRandomCastToInt" defaultSeverity="WARNING" displayName="'Math.random()' cast to 'int'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;Math.random()&lt;/code&gt; which are immediately
cast to &lt;code&gt;int&lt;/code&gt;. 
&lt;p&gt;Casting a &lt;code&gt;double&lt;/code&gt; between &lt;code&gt;0.0&lt;/code&gt; (inclusive) and
  &lt;code&gt;1.0&lt;/code&gt; (exclusive) to &lt;code&gt;int&lt;/code&gt; will always round down to zero. The value
  should first be multiplied by some factor before casting it to an &lt;code&gt;int&lt;/code&gt; to
  get a value between zero (inclusive) and the multiplication factor (exclusive).
  Another possible solution is to use the &lt;code&gt;nextInt()&lt;/code&gt; method of
  &lt;code&gt;java.util.Random&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &lt;b&gt;int&lt;/b&gt; r = (&lt;b&gt;int&lt;/b&gt;)Math.random() * 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &lt;b&gt;int&lt;/b&gt; r = (&lt;b&gt;int&lt;/b&gt;)(Math.random() * 10);
&lt;/code&gt;&lt;/pre&gt;
  &lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="NewObjectEquality" defaultSeverity="WARNING" displayName="New object is compared using '=='" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that applies &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; to a newly allocated object
instead of calling &lt;code&gt;equals()&lt;/code&gt;.
&lt;p&gt;
  The references to newly allocated objects cannot point at existing objects,
  thus the comparison will always evaluate to &lt;code&gt;false&lt;/code&gt;. The inspection may also report newly
  created objects returned from simple methods.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(Object obj) {
    if (new Object() == obj) {...}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(Object obj) {
    if (new Object().equals(obj)) {...}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;small&gt;New in 2018.3&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticCallOnSubclass" defaultSeverity="WARNING" displayName="Static method referenced via subclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports static method calls where the call is qualified
by a subclass of the declaring class, rather than by the declaring class itself.
&lt;p&gt;
  Java allows such qualification for classes, but such calls
  may indicate a subtle confusion of inheritance and overriding.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {
    public static void print(String str) {}
  }
  class Child extends Parent {}

  Child.print("Hello, world!");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Parent.print("Hello, world!");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousIndentAfterControlStatement" defaultSeverity="WARNING" displayName="Suspicious indentation after control statement without braces" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports suspicious indentation of statements after a control statement without braces.
&lt;p&gt;
  Such indentation can make it look like the statement is inside the control statement,
  when in fact it will be executed unconditionally after the control statement.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Bar {
      void foo(int i) {
          if (i == 0)
              System.out.println("foo");
              System.out.println("bar"); // warning
          if (i == 1);
              System.out.println("great"); // warning
          if (i == 42)
              System.out.println("answer");
                  System.out.println("question"); // warning
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComparatorResultComparison" defaultSeverity="WARNING" displayName="Suspicious usage of compare method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons of the result of &lt;code&gt;Comparator.compare()&lt;/code&gt; or &lt;code&gt;Comparable.compareTo()&lt;/code&gt; calls with non-zero constants.
By contract, these methods can return any integer (not just -1, 0 or 1),
  so comparing against particular numbers is bad practice. Some widely used comparison methods (e.g. &lt;code&gt;String.compareTo()&lt;/code&gt;)
  actually return values outside the [-1..1] range, and such a comparison may cause incorrect program behavior.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void validate(String s1, String s2) {
    // Comparing to 1 is incorrect
    if (s1.compareTo(s2) == 1) {
      throw new IllegalArgumentException("Incorrect order");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void validate(String s1, String s2) {
    if (s1.compareTo(s2) &gt; 0) {
      throw new IllegalArgumentException("Incorrect order");
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ScheduledThreadPoolExecutorWithZeroCoreThreads" defaultSeverity="WARNING" displayName="'ScheduledThreadPoolExecutor' with zero core threads" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any &lt;code&gt;java.util.concurrent.ScheduledThreadPoolExecutor&lt;/code&gt; instances in which
&lt;code&gt;corePoolSize&lt;/code&gt; is set to zero via the &lt;code&gt;setCorePoolSize&lt;/code&gt; method or
the object constructor.
&lt;p&gt;
  A &lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt; with zero core threads will run nothing.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(int corePoolSize) {
      if (corePoolSize != 0) return;
      ThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(corePoolSize); // warning
      executor.setCorePoolSize(corePoolSize); // warning
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UseOfPropertiesAsHashtable" defaultSeverity="WARNING" displayName="Use of 'Properties' object as a 'Hashtable'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to the following methods on &lt;code&gt;java.util.Properties&lt;/code&gt; objects:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;putIfAbsent()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;putAll()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  For historical reasons, &lt;code&gt;java.util.Properties&lt;/code&gt; inherits from &lt;code&gt;java.util.Hashtable&lt;/code&gt;,
  but using these methods is discouraged to prevent pollution of properties with values of types other than &lt;code&gt;String&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Calls to &lt;code&gt;java.util.Properties.putAll()&lt;/code&gt; won't get reported when
  both the key and the value parameters in the map are of the &lt;code&gt;String&lt;/code&gt; type.
  Such a call is safe and no better alternative exists.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Object f(Properties props) {
    props.put("hello", "world");
    props.putIfAbsent("hello", "world");
    props.putAll(new HashMap&amp;lt;&amp;gt;());
    return props.get("Hello");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Object f(Properties props) {
    props.setProperty("hello", "world");
    props.putIfAbsent("hello", "world");
    props.putAll(new HashMap&amp;lt;&amp;gt;());
    return props.getProperty("hello");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassNewInstance" defaultSeverity="WARNING" displayName="Unsafe call to 'Class.newInstance()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;java.lang.Class.newInstance()&lt;/code&gt;.
&lt;p&gt;
  This method propagates exceptions thrown by
  the no-arguments constructor, including checked exceptions. Usages of this method
  effectively bypass the compile-time exception checking that would
  otherwise be performed by the compiler.
&lt;/p&gt;
&lt;p&gt;
  A quick-fix is suggested to replace the call with a call to the
  &lt;code&gt;java.lang.reflect.Constructor.newInstance()&lt;/code&gt; method, which
  avoids this problem by wrapping any exception thrown by the constructor in a
  (checked) &lt;code&gt;java.lang.reflect.InvocationTargetException&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  clazz.newInstance()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  clazz.getConstructor().newInstance();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EndlessStream" defaultSeverity="WARNING" displayName="Non-short-circuit operation consumes infinite stream" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-short-circuit operations consuming an infinite stream. Such operations can be completed only by throwing an exception.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Stream.iterate(0, i -&gt; i + 1).collect(Collectors.toList())
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComparableImplementedButEqualsNotOverridden" defaultSeverity="WARNING" displayName="'Comparable' implemented but 'equals()' not overridden" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes that implement &lt;code&gt;java.lang.Comparable&lt;/code&gt;
but do not override &lt;code&gt;equals()&lt;/code&gt;.
&lt;p&gt;
  If &lt;code&gt;equals()&lt;/code&gt;
  is not overridden, the &lt;code&gt;equals()&lt;/code&gt; implementation is not consistent with
  the &lt;code&gt;compareTo()&lt;/code&gt; implementation. If an object of such a class is added
  to a collection such as &lt;code&gt;java.util.SortedSet&lt;/code&gt;, this collection will violate
  the contract of &lt;code&gt;java.util.Set&lt;/code&gt;, which is defined in terms of
  &lt;code&gt;equals()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Length implements Comparable&amp;lt;Length&gt; {
    private int cm = 0;

    @Override
    public int compareTo(@NotNull Length o) {
      if (cm == o.cm) return 0;
      return cm &amp;lt; o.cm ? -1 : 1;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Length implements Comparable&amp;lt;Length&gt; {
    private int cm = 0;

    @Override
    public int compareTo(@NotNull Length o) {
      if (cm == o.cm) return 0;
      return cm &amp;lt; o.cm ? -1 : 1;
    }

    @Override
    public boolean equals(Object o) {
      return o instanceof Length &amp;&amp; compareTo((Length) o) == 0;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NullArgumentToVariableArgMethod" defaultSeverity="WARNING" displayName="Confusing argument to varargs method" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to variable arity methods that have a single argument
in the vararg parameter position, which is either a &lt;code&gt;null&lt;/code&gt; or an array of a subtype of the vararg parameter.
Such an argument may be confusing as it is unclear if a varargs or non-varargs call is desired.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String[] ss = new String[]{"foo", "bar"};
  System.out.printf("%s", ss);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example only the first element of the array will be printed, not the entire array.&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Variable arity methods&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MalformedFormatString" defaultSeverity="WARNING" displayName="Malformed format string" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports format strings that don't comply with the standard Java syntax.
&lt;p&gt;By default, the inspection considers a compile-time constant a format string if it's used as an argument to the corresponding methods on
&lt;code&gt;java.util.Formatter&lt;/code&gt;, &lt;code&gt;java.lang.String&lt;/code&gt;, &lt;code&gt;java.io.PrintWriter&lt;/code&gt; or &lt;code&gt;java.io.PrintStream&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String.format("x = %d, y = %d", 42);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the inspection settings to mark additional classes and methods as related to string formatting.&lt;/p&gt;
&lt;p&gt;As an alternative, you can use the &lt;code&gt;org.intellij.lang.annotations.PrintFormat&lt;/code&gt; annotation
  to mark the format string method parameter. In this case,
  the format arguments parameter must immediately follow the format string and be the last method parameter. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void myFormatMethod(int mode, @PrintFormat String formatString, Object... args) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Methods annotated in this way will also be recognized by this inspection.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ResultOfObjectAllocationIgnored" defaultSeverity="WARNING" displayName="Result of object allocation ignored" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports object allocations where the allocated object is ignored and neither assigned to a variable nor used in another way.
&lt;p&gt;
  Such allocation expressions are legal in Java, but are usually either unintended, or
  evidence of a very odd object initialization strategy.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the options to list classes whose allocations should be ignored by this inspection.
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousListRemoveInLoop" defaultSeverity="WARNING" displayName="Suspicious 'List.remove()' in loop" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;list.remove(index)&lt;/code&gt; calls inside an ascending counted loop.
&lt;p&gt;
  This is suspicious as the list becomes
  shorter after the removal, and the next element gets skipped. A simple fix is to decrease the index variable
  after the removal,
  but probably removing via an iterator or using the &lt;code&gt;removeIf()&lt;/code&gt; method (Java 8 and later) is a more robust alternative.
  If you don't expect that &lt;code&gt;remove()&lt;/code&gt; will be called more than once in a loop, consider adding a &lt;code&gt;break&lt;/code&gt; after it.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public static void main(String[] args) {
    process(new ArrayList&amp;lt;&gt;(
      Arrays.asList("1", "2", "|", "3", "4")));
  }

  static void process(List&amp;lt;String&amp;gt; list) {
    for (int i = 0; i &amp;lt; list.size(); i++) {
      if (list.get(i).equals("|")) {
        list.remove(i);
        continue;
      }
      System.out.println(list.get(i));
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code looks like &lt;code&gt;1 2 3 4&lt;/code&gt; is going to be printed, but in reality, &lt;code&gt;3&lt;/code&gt; will be skipped in the output.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonShortCircuitBoolean" defaultSeverity="WARNING" displayName="Non-short-circuit boolean expression" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of the non-short-circuit forms of boolean 'and' and 'or' (&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt;).
Although the non-short-circuit versions are occasionally useful, in most cases the short-circuit forms (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
and &lt;code&gt;||&lt;/code&gt;) are intended and such unintentional usages may lead to subtle bugs.
&lt;p&gt;
  A quick-fix is suggested to use the short-circuit versions.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(boolean x, boolean y, boolean z) {
    if (x | y) { x |= z; }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(boolean x, boolean y) {
    if (x || y) { x = x || z; }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EqualsWithItself" defaultSeverity="WARNING" displayName="'equals()' called on itself" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;compareTo()&lt;/code&gt; or similar, that compare an object for equality
with itself.
The method contracts of these methods specify that such calls will always return
&lt;code&gt;true&lt;/code&gt; for &lt;code&gt;equals()&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;compareTo()&lt;/code&gt;.
The inspection also checks
calls to &lt;code&gt;Objects.equals()&lt;/code&gt;, &lt;code&gt;Objects.deepEquals()&lt;/code&gt;,
&lt;code&gt;Arrays.equals()&lt;/code&gt;, &lt;code&gt;Comparator.compare()&lt;/code&gt;, &lt;code&gt;assertEquals()&lt;/code&gt; methods of
test frameworks (JUnit, TestNG, AssertJ), &lt;code&gt;Integer.compare()&lt;/code&gt;, &lt;code&gt;Integer.compareUnsigned()&lt;/code&gt; and similar methods.
&lt;p&gt;
  Note that in rare cases, the inspection may report &lt;code&gt;equals()&lt;/code&gt; calls that return false, because while the expressions
  on the both sides are the same, they produce separate objects, and comparison is performed on references, rather than on content. 
  The simplest example is &lt;code&gt;new Object().equals(new Object())&lt;/code&gt;. In any case, such calls are suspicious, and likely 
  something else was intended.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
    boolean foo(Object o) {
        return o.equals(o); // warning
    }

    boolean bar(String[] ss) {
        return Arrays.equals(ss, ss); // warning
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnsatisfiedRange" defaultSeverity="WARNING" displayName="Return value is outside of declared range" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports numeric values returned from methods that don't conform to the declared method return range.
You can declare method return range using a number of annotations:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;org.jetbrains.annotations.Range&lt;/code&gt; from JetBrains annotations package (specify 'from' and 'to')&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.checkerframework.common.value.qual.IntRange&lt;/code&gt; from Checker Framework annotations package (specify 'from' and 'to')&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.checkerframework.checker.index.qual.GTENegativeOne&lt;/code&gt; from Checker Framework annotations package (range is '&gt;= -1')&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.checkerframework.checker.index.qual.NonNegative&lt;/code&gt; from Checker Framework annotations package (range is '&gt;= 0')&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.checkerframework.checker.index.qual.Positive&lt;/code&gt; from Checker Framework annotations package (range is '&gt; 0')&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.annotation.Nonnegative&lt;/code&gt; from JSR 305 annotations package (range is '&gt;= 0')&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.validation.constraints.Min&lt;/code&gt; (specify minimum value)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;javax.validation.constraints.Max&lt;/code&gt; (specify maximum value)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  @Range(from = 0, to = Integer.MAX_VALUE) int getValue() {
    // Warning: -1 is outside of declared range
    return -1;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SortedCollectionWithNonComparableKeys" defaultSeverity="WARNING" displayName="Sorted collection with non-comparable elements" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports construction of sorted collections, for example &lt;code&gt;TreeSet&lt;/code&gt;, that rely on natural ordering,
whose element type doesn't implement the &lt;code&gt;Comparable&lt;/code&gt; interface.
&lt;p&gt;It's unlikely that such a collection will work properly.&lt;/p&gt;
&lt;p&gt;
  A false positive is possible if the collection element type is a non-comparable super-type,
  but the collection is intended to only hold comparable sub-types. Even if this is the case,
  it's better to narrow the collection element type or declare the super-type as &lt;code&gt;Comparable&lt;/code&gt; because the mentioned approach is error-prone.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection also reports cases when the collection element is a type parameter which is not declared as &lt;code&gt;extends Comparable&lt;/code&gt;.
  You can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility).
&lt;/p&gt;
&lt;p&gt;
  &lt;small&gt;New in 2018.3&lt;/small&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringConcatenationInFormatCall" defaultSeverity="WARNING" displayName="String concatenation as argument to 'format()' call" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-constant string concatenations used as a format string argument.
&lt;p&gt;
  While occasionally intended, this is usually a misuse of a formatting method
  and may even cause security issues if the variables used in the concatenated string
  contain special characters like &lt;code&gt;%&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Also, sometimes this could be the result
  of mistakenly concatenating a string format argument by typing a &lt;code&gt;+&lt;/code&gt; when a &lt;code&gt;,&lt;/code&gt; was meant.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  static String formatGreeting(String userName) {
    return String.format("Hello, " + userName);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Here, the &lt;code&gt;userName&lt;/code&gt; will be interpreted as a part of format string, which may result
  in &lt;code&gt;IllegalFormatException&lt;/code&gt; (for example, if &lt;code&gt;userName&lt;/code&gt; is &lt;code&gt;"%"&lt;/code&gt;) or
  in using an enormous amount of memory (for example, if &lt;code&gt;userName&lt;/code&gt; is &lt;code&gt;"%2000000000%"&lt;/code&gt;).
  The call should be probably replaced with &lt;code&gt;String.format("Hello, %s", userName);&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  This inspection checks calls to formatting methods on
  &lt;code&gt;java.util.Formatter&lt;/code&gt;,
  &lt;code&gt;java.lang.String&lt;/code&gt;,
  &lt;code&gt;java.io.PrintWriter&lt;/code&gt;,
  or &lt;code&gt;java.io.PrintStream&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MismatchedCollectionQueryUpdate" defaultSeverity="WARNING" displayName="Mismatched query and update of collection" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports collections whose contents are either queried and
not updated, or updated and not queried.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Such inconsistent queries and updates are pointless and may indicate
  either dead code or a typo.
&lt;/p&gt;
&lt;p&gt;
  Use the inspection settings to specify name patterns that correspond to update/query methods.
  Query methods that return an element are automatically detected, and only
  those that write data to an output parameter (for example, an &lt;code&gt;OutputStream&lt;/code&gt;) need to be specified.
&lt;p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Suppose you have your custom &lt;code&gt;FixedStack&lt;/code&gt; class with method &lt;code&gt;store()&lt;/code&gt;:
&lt;pre&gt;&lt;code&gt;
  public class FixedStack&amp;lt;T&amp;gt; extends Collection&amp;lt;T&amp;gt; {
    public T store(T t) {
      // implementation
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add &lt;code&gt;store&lt;/code&gt; to the update methods table in order to report mismatched queries like:
&lt;pre&gt;&lt;code&gt;
  void test(int i) {
    FixedStack&amp;lt;Integer&amp;gt; stack = new FixedStack&amp;lt;&amp;gt;();
    stack.store(i);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousMethodCalls" defaultSeverity="WARNING" displayName="Suspicious collection method call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method calls on parameterized collections, where the actual argument type does not
correspond to the collection's elements type.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  List&amp;lt;Integer&amp;gt; list = getListOfElements();
  list.remove(""); // remove is highlighted
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  In the inspection settings, you can disable warnings for potentially correct code like the following:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public boolean accept(Map&amp;lt;Integer, String&amp;gt; map, Object key) {
    return map.containsKey(key);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SuspiciousNameCombination" defaultSeverity="WARNING" displayName="Suspicious variable/parameter name combination" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports assignments and function calls in which the name of the target variable or the function parameter does not match the name of the value assigned to it.
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;int&lt;/b&gt; x = 0;
  &lt;b&gt;int&lt;/b&gt; y = x; // x is used as a y-coordinate
  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;int&lt;/b&gt; x = 0, y = 0;
  // x is used as a y-coordinate and y as an x-coordinate
  Rectangle rc = &lt;b&gt;new&lt;/b&gt; Rectangle(y, x, 20, 20);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Group of names&lt;/b&gt; area to specify the names which should not be used together: an error is reported
if the parameter name or assignment target name contains words from one group and the name of the assigned or passed
variable contains words from a different group.
&lt;p&gt;Use the &lt;b&gt;Ignore methods&lt;/b&gt; area to specify the methods that should not be checked but have a potentially suspicious name.
For example, the &lt;code&gt;Integer.compare()&lt;/code&gt; parameters are named &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; but are unrelated to coordinates.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MathRoundingWithIntArgument" defaultSeverity="WARNING" displayName="Call math rounding with 'int' argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;round()&lt;/code&gt;, &lt;code&gt;ceil()&lt;/code&gt;,
&lt;code&gt;floor()&lt;/code&gt;, &lt;code&gt;rint()&lt;/code&gt; methods for &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;StrictMath&lt;/code&gt; with &lt;code&gt;int&lt;/code&gt; as the argument.
&lt;p&gt;These methods could be called in case the argument is expected to be &lt;code&gt;long&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;, and it may have unexpected results.&lt;/p&gt;
&lt;p&gt;The inspection provides a fix that simplify such expressions (except &lt;code&gt;round&lt;/code&gt;) to cast to &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int i = 2;
  double d1 = Math.floor(i);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int i = 2;
  double d1 = i;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2023.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousArrayMethodCall" defaultSeverity="WARNING" displayName="Suspicious 'Arrays' method call" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to non-generic-array manipulation methods like &lt;code&gt;Arrays.fill()&lt;/code&gt; with mismatched argument types.
Such calls don't do anything useful and are likely to be mistakes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  int foo(String[] strings) {
    return Arrays.binarySearch(strings, 1);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantAssertCondition" defaultSeverity="WARNING" displayName="Constant condition in 'assert' statement" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;assert&lt;/code&gt; statement conditions that are constants. &lt;code&gt;assert&lt;/code&gt;
statements with constant conditions will either always fail or always succeed.
Such statements might be left over after a refactoring and are probably not intended.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    void foo() {
        assert true;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Assertions&amp;#39;, which is available since Java 1.4.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReflectionForUnavailableAnnotation" defaultSeverity="WARNING" displayName="Reflective access to a source-only annotation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attempts to reflectively check for the presence of a non-runtime annotation.
&lt;p&gt;Using &lt;code&gt;Class.isAnnotationPresent()&lt;/code&gt; to test for an annotation
  whose retention policy is set to &lt;code&gt;SOURCE&lt;/code&gt; or &lt;code&gt;CLASS&lt;/code&gt;
  (the default) will always have a negative result. This mistake is easy to overlook.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    getClass().isAnnotationPresent(SourceAnnotation.class); //always false
  }

  @Retention(RetentionPolicy.SOURCE)
  @interface SourceAnnotation {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;p&gt;This inspection depends on the Java feature &amp;#39;Annotations&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IgnoreResultOfCall" defaultSeverity="WARNING" displayName="Result of method call ignored" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method calls whose result is ignored.
&lt;p&gt;For many methods, ignoring the result is perfectly
  legitimate, but for some it is almost certainly an error. Examples of methods where ignoring
  the result is likely an error include &lt;code&gt;java.io.inputStream.read()&lt;/code&gt;,
  which returns the number of bytes actually read, and any method on
  &lt;code&gt;java.lang.String&lt;/code&gt; or &lt;code&gt;java.math.BigInteger&lt;/code&gt;. These methods do not produce side-effects and thus pointless
  if their result is ignored.
&lt;/p&gt;
&lt;p&gt;The calls to the following methods are inspected:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Simple getters (which do nothing except return a field)&lt;/li&gt;
  &lt;li&gt;Methods specified in the settings of this inspection&lt;/li&gt;
  &lt;li&gt;Methods annotated with &lt;code&gt;org.jetbrains.annotations.Contract(pure=true)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Methods annotated with .*.&lt;code&gt;CheckReturnValue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Methods in a class or package annotated with &lt;code&gt;javax.annotation.CheckReturnValue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Optionally, all non-library methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calls to methods annotated with Error Prone's or AssertJ's &lt;code&gt;@CanIgnoreReturnValue&lt;/code&gt; annotation are not reported.

&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection settings to specify the classes to check.
  Methods are matched by name or name pattern using Java regular expression syntax.
  For classes, use fully-qualified names. Each entry applies to both the class and all its inheritors.
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VariableNotUsedInsideIf" defaultSeverity="WARNING" displayName="Reference checked for 'null' is not used inside 'if'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports references to variables that are checked for nullability
in the condition of an &lt;code&gt;if&lt;/code&gt; statement or
conditional expression but not used inside that
&lt;code&gt;if&lt;/code&gt; statement.
&lt;p&gt;
  Usually this either means that
  the check is unnecessary or that the variable is not referenced inside the
  &lt;code&gt;if&lt;/code&gt; statement by mistake.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void test(Integer i) {
    if (i != null) { // here 'i' is not used inside 'if' statement
      System.out.println();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WriteOnlyObject" defaultSeverity="WARNING" displayName="Write-only object" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports objects that are modified but never queried.
&lt;p&gt;The inspection relies on the method mutation contract, which could be inferred
  or pre-annotated for some library methods. This inspection does not report collections, maps, and string builders, as these types
  are reported by other more precise inspections.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  AtomicReference&amp;lt;String&amp;gt; ref = new AtomicReference&amp;lt;&amp;gt;();
  ref.set("hello"); // ref is never used again
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the &lt;b&gt;Ignore impure constructors&lt;/b&gt; option to control whether to process objects created by constructor or method whose purity is not known.
  Unchecking the option may introduce some false-positives if the object reference is intentionally leaked during the construction.
&lt;/p&gt;
&lt;b&gt;&lt;small&gt;New in 2021.2&lt;/small&gt;&lt;/b&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IteratorHasNextCallsIteratorNext" defaultSeverity="WARNING" displayName="'Iterator.hasNext()' which calls 'next()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implementations of &lt;code&gt;Iterator.hasNext()&lt;/code&gt; or &lt;code&gt;ListIterator.hasPrevious()&lt;/code&gt; that call
&lt;code&gt;Iterator.next()&lt;/code&gt; or &lt;code&gt;ListIterator.previous()&lt;/code&gt; on the iterator instance. Such calls are almost certainly an error, as methods
like &lt;code&gt;hasNext()&lt;/code&gt; should not modify the iterators state, while &lt;code&gt;next()&lt;/code&gt; should.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyIterator implements Iterator&amp;lt;Integer&amp;gt; {
    public boolean hasNext() {
      return next() != null;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EqualsBetweenInconvertibleTypes" defaultSeverity="WARNING" displayName="'equals()' between objects of inconvertible types" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;equals()&lt;/code&gt; where the target and argument are
of incompatible types.
&lt;p&gt;While such a call might theoretically be useful, most likely it is a bug.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  new HashSet&amp;lt;String&amp;gt;().equals(new TreeSet&amp;lt;Integer&amp;gt;());
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComparatorMethodParameterNotUsed" defaultSeverity="WARNING" displayName="Suspicious 'Comparator.compare()' implementation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports problems in &lt;code&gt;Comparator.compare()&lt;/code&gt; and &lt;code&gt;Comparable.compareTo()&lt;/code&gt; implementations.
&lt;p&gt;The following cases are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    A parameter is not used. Most likely this is a typo and the other parameter is compared
    with itself, or the method is not implemented correctly.
  &lt;/li&gt;
  &lt;li&gt;
    It's evident that the method does not return &lt;code&gt;0&lt;/code&gt; for the same elements. Such a comparison method violates the contract
    and can produce unpredictable results when equal elements are encountered. In particular,
    sorting may fail with an exception on some data.&lt;/li&gt;
  &lt;li&gt;
    The comparison method never returns positive or negative value. To fulfill the contract, if the comparison method returns positive values,
    it should also return negative ones if arguments are supplied in reversed order.
  &lt;/li&gt;
  &lt;li&gt;
    The comparison method returns &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;. While allowed by the contract, it may be error-prone, as some call sites
    may incorrectly try to invert the return value of the comparison method using the unary minus operator.
    The negated value of &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; is &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Comparator&amp;lt;String&amp;gt; lambda =
    (a, b) -&amp;gt; a.length() &amp;gt; b.length()
              ? 0
              : Math.random() &amp;gt; 0.5 ? -1 : 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ResultSetIndexZero" defaultSeverity="WARNING" displayName="Use of index 0 in JDBC ResultSet" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attempts to access column 0 of &lt;code&gt;java.sql.ResultSet&lt;/code&gt; or &lt;code&gt;java.sql.PreparedStatement&lt;/code&gt;.
For historical reasons, columns of &lt;code&gt;java.sql.ResultSet&lt;/code&gt; and &lt;code&gt;java.sql.PreparedStatement&lt;/code&gt;
are numbered starting with &lt;b&gt;1&lt;/b&gt;, rather than with &lt;b&gt;0&lt;/b&gt;, and accessing column 0 is a common error in JDBC programming.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  String getName(ResultSet rs) {
    &lt;b&gt;return&lt;/b&gt; rs.getString(0);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MisspelledEquals" defaultSeverity="WARNING" displayName="'equal()' instead of 'equals()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations of &lt;code&gt;equal()&lt;/code&gt; with a single parameter.
Normally, this is a typo and &lt;code&gt;equals()&lt;/code&gt; is actually intended.
&lt;p&gt;A quick-fix is suggested to rename the method to &lt;code&gt;equals&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    public boolean equal(Object obj) {
      return true;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Main {
    public boolean equals(Object obj) {
      return true;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CopyConstructorMissesField" defaultSeverity="WARNING" displayName="Copy constructor misses field" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports copy constructors that don't copy all the fields of the class.
&lt;p&gt;
  &lt;code&gt;final&lt;/code&gt; fields with initializers and &lt;code&gt;transient&lt;/code&gt; fields are considered unnecessary to copy.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Point {

    private int x;
    private int y;

    Point(int x, int y) {
      this.x = x;
      this.y = y;
    }

    Point(Point other) {
      // fields x and y are not initialized
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverwrittenKey" defaultSeverity="WARNING" displayName="Overwritten Map, Set, or array element" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that overwrites a &lt;code&gt;Map&lt;/code&gt; key, a &lt;code&gt;Set&lt;/code&gt; element, or an array element in a sequence of
&lt;code&gt;add&lt;/code&gt;/&lt;code&gt;put&lt;/code&gt; calls or using a Java 9 factory method like &lt;code&gt;Set.of&lt;/code&gt; (which will result in runtime exception).
&lt;p&gt;This usually occurs due to a copy-paste error.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  map.put("A", 1);
  map.put("B", 2);
  map.put("C", 3);
  map.put("D", 4);
  map.put("A", 5); // duplicating key "A", overwrites the previously written entry
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InnerClassReferencedViaSubclass" defaultSeverity="WARNING" displayName="Inner class referenced via subclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports accesses of inner and nested classes where the call is qualified
by a subclass of the declaring class, rather than the declaring class itself.
&lt;p&gt;
  Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Super {
    static class Inner {}
  }

  class Sub extends Super {
    void test() {
      Sub.Inner s = new Sub.Inner(); // 'Inner' class is declared in 'Super' class, but referenced via 'Sub' class
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Super {
    static class Inner {}
  }

  class Sub extends Super {
    void test() {
      Super.Inner s = new Super.Inner();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayHashCode" defaultSeverity="WARNING" displayName="'hashCode()' called on array" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect hash code calculation for arrays.
&lt;p&gt;In order to
  correctly calculate the hash code for an array, use:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Arrays.hashcode()&lt;/code&gt; for linear arrays&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Arrays.deepHashcode()&lt;/code&gt; for multidimensional arrays&lt;/li&gt;
&lt;/ul&gt;
These methods should also be used with &lt;code&gt;Objects.hash()&lt;/code&gt; when
the sequence of input values includes arrays, for example:
&lt;code&gt;Objects.hash(string, Arrays.hashcode(array))&lt;/code&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ExpressionComparedToItself" defaultSeverity="WARNING" displayName="Expression is compared to itself" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons where left and right operand represent the identical expression.
While sometimes comparing an expression with itself could be intended, in most cases, it is an oversight.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // Probably left.getLength() == right.getLength() was intended
  boolean result = left.getLength() == left.getLength();
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  To ignore comparisons that may produce side effects, use the &lt;b&gt;Ignore conditions with side effects&lt;/b&gt; option.
Disabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations.
&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  native int unknownMethod();
  
  ...
  
  if (unknownMethod() &amp;gt; unknownMethod()) {
    System.out.println("Got it");
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Due to possible side effects of &lt;code&gt;unknownMethod()&lt;/code&gt; (on the example), the warning will only be
  triggered if the &lt;b&gt;Ignore conditions with side effects&lt;/b&gt; option is disabled.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;New in 2024.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceAllDot" defaultSeverity="WARNING" displayName="Suspicious regex expression argument" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to
&lt;code&gt;String.replaceAll()&lt;/code&gt; or &lt;code&gt;String.split()&lt;/code&gt; where the first argument is a single regex meta character argument.
&lt;p&gt;
  The regex meta characters are one of &lt;code&gt;.$|()[{^?*+\&lt;/code&gt;. They have a special meaning in regular expressions.
  For example, calling &lt;code&gt;"ab.cd".replaceAll(".", "-")&lt;/code&gt; produces &lt;code&gt;"-----"&lt;/code&gt;, because the dot matches any character.
  Most likely the escaped variant &lt;code&gt;"\\."&lt;/code&gt; was intended instead.
&lt;/p&gt;
&lt;p&gt;
  Using &lt;code&gt;File.separator&lt;/code&gt; as a regex is also reported. The &lt;code&gt;File.separator&lt;/code&gt; has a platform specific value. It
  equals to &lt;code&gt;/&lt;/code&gt; on Linux and Mac but equals to &lt;code&gt;\&lt;/code&gt; on Windows, which is not a valid regular expression, so 
  such code is not portable.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  s.replaceAll(".", "-");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  s.replaceAll("\\.", "-");
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InconsistentTextBlockIndent" defaultSeverity="WARNING" displayName="Inconsistent whitespace indentation in text block" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports text blocks that are indented using both spaces and tabs.
Such cases produce unexpected results since spaces and tabs are treated equally by the text block processing.
&lt;p&gt;In the following example, spaces and tabs are visualized as &lt;code&gt;·&lt;/code&gt; and &lt;code&gt;␉&lt;/code&gt; respectively,
and a tab is equal to 4 spaces in the editor.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
String colors = """
········red
␉   ␉   green
········blue""";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After printing such a string, the result will be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
······red
green
······blue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the compiler removes an equal amount of spaces or tabs from the beginning of each line,
some lines remain with leading spaces.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Text block literals&amp;#39;, which is available since Java 15.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SafeVarargsHasNoEffect" defaultSeverity="WARNING" displayName="@SafeVarargs do not suppress potentially unsafe operations" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports write operations inside &lt;code&gt;@SafeVarargs&lt;/code&gt; methods where vararg parameter is reassigned to something else.
In this case, newly assigned array is not related to the variable arity arguments at the call site and might not be safe anymore.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    @SafeVarargs
    public final &amp;lt;T&amp;gt; void test(T[] tt, T... t) {
        t = tt;
        System.out.println(t[0]);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Annotations&amp;#39;, which is available since Java 5.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CollectionAddedToSelf" defaultSeverity="WARNING" displayName="Collection added to itself" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases where the argument of a method call on a &lt;code&gt;java.util.Collection&lt;/code&gt;
or &lt;code&gt;java.util.Map&lt;/code&gt; is the collection or map itself.
Such situations may occur as a result of copy-paste in code with raw types.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ArrayList list = new ArrayList&amp;lt;&amp;gt;();
  list.add(list); // warning here
  return list.hashCode(); // throws StackOverflowError
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyStatementBody" defaultSeverity="WARNING" displayName="Statement with empty body" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, and &lt;code&gt;switch&lt;/code&gt; statements
with empty bodies.
&lt;p&gt;While occasionally intended, such code is confusing and is often the result of a typo.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection is disabled in JSP files.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantValue" defaultSeverity="WARNING" displayName="Constant values" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions and conditions that always produce the same result, like true, false, null, or zero.
Such expressions could be replaced with the corresponding constant value. Very often though they signal about a bug
in the code.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  // always true
  // root cause: || is used instead of &amp;&amp;
  if (x &amp;gt; 0 || x &amp;lt; 10) {}

  System.out.println(str.trim());
  // always false
  // root cause: variable was dereferenced before null-check
  if (str == null) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  The inspection behavior may be controlled by a number of annotations, such as 
  &lt;a href="https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html"&gt;nullability&lt;/a&gt; annotations,
  &lt;code&gt;&lt;a href="https://www.jetbrains.com/help/idea/contract-annotations.html"&gt;@Contract&lt;/a&gt;&lt;/code&gt; annotation, 
  &lt;code&gt;@Range&lt;/code&gt; annotation and so on.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Configure the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;b&gt;Don't report assertions with condition statically proven to be always true&lt;/b&gt; option to avoid reporting assertions that were
    statically proven to be always true. This also includes conditions like &lt;code&gt;if (alwaysFalseCondition) throw new IllegalArgumentException();&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Ignore assert statements&lt;/b&gt; option to control how the inspection treats &lt;code&gt;assert&lt;/code&gt; statements. By default, the option
    is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored
    (-da mode).&lt;/li&gt;
  &lt;li&gt;Use the &lt;b&gt;Warn when constant is stored in variable&lt;/b&gt; option to display warnings when variable is used, whose value is known to be a constant.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  Before IntelliJ IDEA 2022.3, this inspection was part of "Constant Conditions &amp; Exceptions" inspection. Now, it split into two inspections:
  "Constant Values" and "Nullability and data flow problems".
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="OverflowingLoopIndex" defaultSeverity="WARNING" displayName="Loop executes zero or billions of times" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports loops that cannot be completed without an index overflow or loops that don't loop at all.
It usually happens because of a mistake in the update operation.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(int s) {
    for (int i = s; i &gt; 12; i++) { // i-- should be here
      System.out.println(i);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2019.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MeaninglessRecordAnnotationInspection" defaultSeverity="WARNING" displayName="Meaningless record annotation" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports annotations used on record components that have no effect.
&lt;p&gt;This can happen in two cases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The reported annotation has the METHOD target, but the corresponding accessor is explicitly defined.&lt;/li&gt;
  &lt;li&gt;The reported annotation has the PARAMETER target, but the canonical constructor is explicitly defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@Target(ElementType.METHOD)
@interface A { }
  
// The annotation will not appear in bytecode at all,
// as it should be propagated to the accessor but accessor is explicitly defined 
record R(@A int x) {
  public int x() { return x; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Records&amp;#39;, which is available since Java 16.&lt;/p&gt;&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstanceofIncompatibleInterface" defaultSeverity="WARNING" displayName="'instanceof' with incompatible type" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;instanceof&lt;/code&gt; expressions where
the expression that is checked has a class/interface type that neither extends/implements the class/interface type on the right-side of the
&lt;code&gt;instanceof&lt;/code&gt; expression, nor has subclasses that do.
&lt;p&gt;
  Although it could be intended for e.g. library code, such a construct is likely erroneous,
  because no instance of any class declared in the project could pass this &lt;code&gt;instanceof&lt;/code&gt; test.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo { }

  interface Bar { }
  
  class Main {
      void test(Foo f, Bar b) {
          if (f instanceof Bar) { // problem
              System.out.println("fail");
          }
          if (b instanceof Foo) { // problem
              System.out.println("fail");
          }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CompareToUsesNonFinalVariable" defaultSeverity="WARNING" displayName="Non-final field referenced in 'compareTo()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to a non-&lt;code&gt;final&lt;/code&gt; field inside a &lt;code&gt;compareTo()&lt;/code&gt; implementation.
&lt;p&gt;
  Such access may result in &lt;code&gt;compareTo()&lt;/code&gt;
  returning different results at different points in the object's lifecycle, which may in turn cause problems when
  using the standard collections classes, for example &lt;code&gt;java.util.TreeSet&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  A quick-fix to make the field &lt;code&gt;final&lt;/code&gt; is available
  only when there is no write access to the field, otherwise no fixes are suggested.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo implements Comparable&amp;lt;Foo&amp;gt;{
    private int index;
    Foo(int idx) {
      index = idx;
    }
    @Override
    public int compareTo(Foo foo) {
     return Integer.compare(this.index, foo.index);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo implements Comparable&amp;lt;Foo&amp;gt;{
    private final int index;
    Foo(int idx) {
      index = idx;
    }
    @Override
    public int compareTo(Foo foo) {
      return Integer.compare(this.index, foo.index);
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OptionalGetWithoutIsPresent" defaultSeverity="WARNING" displayName="Optional.get() is called without isPresent() check" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;get()&lt;/code&gt; on an &lt;code&gt;Optional&lt;/code&gt; without checking that it has a value.
&lt;p&gt;Calling &lt;code&gt;Optional.get()&lt;/code&gt; on an empty &lt;code&gt;Optional&lt;/code&gt; instance will throw an exception.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;void&lt;/b&gt; x(List&amp;lt;Integer&gt; list) {
    &lt;b&gt;final&lt;/b&gt; Optional&amp;lt;Integer&gt; optional =
      list.stream().filter(x -&gt; x &gt; 10).findFirst();
    &lt;b&gt;final&lt;/b&gt; Integer result = optional.get(); // problem here
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;This inspection depends on the Java feature &amp;#39;Stream and Optional API&amp;#39;, which is available since Java 8.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnsupportedChronoFieldUnitCall" defaultSeverity="WARNING" displayName="Call methods with unsupported 'java.time.temporal.ChronoUnit' and 'java.time.temporal.ChronoField'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;!-- Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;java.time&lt;/code&gt; method calls (&lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;getLong()&lt;/code&gt;,
&lt;code&gt;with()&lt;/code&gt;, &lt;code&gt;plus()&lt;/code&gt;, &lt;code&gt;minus()&lt;/code&gt;) with unsupported &lt;code&gt;java.time.temporal.ChronoField&lt;/code&gt; or
&lt;code&gt;java.time.temporal.ChronoUnit&lt;/code&gt; enum constants as arguments.
Such calls will throw a &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; at runtime.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
LocalTime localTime = LocalTime.now();
int year = localTime.get(ChronoField.YEAR);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2023.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstantiationOfUtilityClass" defaultSeverity="WARNING" displayName="Instantiation of utility class" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports instantiation of utility classes using the &lt;code&gt;new&lt;/code&gt; keyword.
&lt;p&gt;
  In utility classes, all fields and methods are &lt;code&gt;static&lt;/code&gt;.
  Instantiation of such classes is most likely unnecessary and indicates a mistake.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class MyUtils {
    public static double cube(double x) {
      return x * x * x;
    }
  }
  class Main {
    public static void main(String[] args) {
      // Instantiation of utility class
      MyUtils utils = new MyUtils();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  To prevent utility classes from being instantiated,
  it's recommended to use a &lt;code&gt;private&lt;/code&gt; constructor.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ImplicitArrayToString" defaultSeverity="WARNING" displayName="Call to 'toString()' on array" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arrays used in &lt;code&gt;String&lt;/code&gt; concatenations or passed as parameters to &lt;code&gt;java.io.PrintStream&lt;/code&gt;
methods, such as &lt;code&gt;System.out.println()&lt;/code&gt;.
&lt;p&gt;
  Usually, the content of the array is meant to be used and not the array object itself.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void print(Object[] objects) {
    System.out.println(objects);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void print(Object[] objects) {
    System.out.println(Arrays.toString(objects));
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringEquality" defaultSeverity="WARNING" displayName="String comparison using '==', instead of 'equals()'" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that uses of &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt; to compare strings.
&lt;p&gt;
  These operators determine referential equality instead of comparing content.
  In most cases, strings should be compared using &lt;code&gt;equals()&lt;/code&gt;,
  which does a character-by-character comparison when the strings are different objects.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(String s, String t) {
    final boolean b = t == s;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;t&lt;/code&gt; is known to be non-null, then it's safe to apply the "unsafe" quick-fix and get the result similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(String s, String t) {
    final boolean b = t.equals(s);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SubtractionInCompareTo" defaultSeverity="WARNING" displayName="Subtraction in 'compareTo()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports subtraction in
&lt;code&gt;compareTo()&lt;/code&gt; methods and methods implementing &lt;code&gt;java.util.Comparator.compare()&lt;/code&gt;.
&lt;p&gt;
  While it is a common idiom to
  use the results of integer subtraction as the result of a &lt;code&gt;compareTo()&lt;/code&gt;
  method, this construct may cause subtle and difficult bugs in cases of integer overflow.
  Comparing the integer values directly and returning &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;1&lt;/code&gt; is a better practice in most cases.
&lt;/p&gt;
&lt;p&gt;
  Subtraction on floating point values that is immediately cast to integral type is also reported because precision loss is possible due to
  rounding.
&lt;/p&gt;
&lt;p&gt;
  The inspection doesn't report when it's statically determined that value ranges are limited, and overflow never occurs.
  Additionally, subtraction on &lt;code&gt;int&lt;/code&gt; numbers greater than or equal to &lt;code&gt;0&lt;/code&gt; will never overflow.
  Therefore, this inspection tries not to warn in those cases.
&lt;/p&gt;
&lt;p&gt;
  Methods that always return zero or greater can be marked with the
  &lt;code&gt;javax.annotation.Nonnegative&lt;/code&gt; annotation or specified in this inspection's options.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class DoubleHolder implements Comparable&amp;lt;DoubleHolder&amp;gt; {
    double d;
    public int compareTo(DoubleHolder that) {
        return (int)(this.d - that.d);
    }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A no-warning example because &lt;code&gt;String.length()&lt;/code&gt; is known to be non-negative:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class A implements Comparable&amp;lt;A&amp;gt; {
    final String s = "";
    public int compareTo(A a) {
        return s.length() - a.s.length();
    }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the options to list methods that are safe to use inside a subtraction.
  Methods are safe when they return an &lt;code&gt;int&lt;/code&gt; value that is always greater than or equal to &lt;code&gt;0&lt;/code&gt;.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssertWithSideEffects" defaultSeverity="WARNING" displayName="'assert' statement with side effects" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">  &lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;assert&lt;/code&gt; statements that cause side effects.
&lt;p&gt;
  Since assertions can be switched off,
  these side effects are not guaranteed, which can cause subtle bugs. Common unwanted side effects detected by this inspection are
  modifications of variables and fields. When methods calls are involved, they are analyzed one level deep.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  assert i++ &amp;lt; 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;This inspection depends on the Java feature &amp;#39;Assertions&amp;#39;, which is available since Java 1.4.&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="StaticFieldReferenceOnSubclass" defaultSeverity="WARNING" displayName="Static field referenced via subclass" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports accesses to static fields where the call is
qualified by a subclass of the declaring class, rather than by the declaring class itself.
&lt;p&gt;
  Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {
    static int foo = 0;
  }

  class Child extends Parent { }

  void bar() {
    System.out.println(Child.foo);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the result looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Parent {
    static int foo = 0;
  }

  class Child extends Parent { }

  void bar() {
    System.out.println(Parent.foo);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousArrayCast" defaultSeverity="WARNING" displayName="Suspicious array cast" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports suspicious array casts.
An array cast is considered suspicious when it casts to a more specific array type. Such a cast is legal at compile
time but may fail with a &lt;code&gt;ClassCastException&lt;/code&gt; at runtime.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Number[] numbers = new Number[]{1L, 2L, 4L};
  Long[] longs = (Long[])numbers;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayEquality" defaultSeverity="WARNING" displayName="Array comparison using '==', instead of 'Arrays.equals()'" enabled="false" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports operators &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; used to test for array equality.
In most cases, testing for the equality of array contents is intended,
which can be done with the &lt;code&gt;java.util.Arrays.equals()&lt;/code&gt; method.
&lt;p&gt;
  A quick-fix is suggested to replace &lt;code&gt;==&lt;/code&gt; with &lt;code&gt;java.util.Arrays.equals()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(Object[] x, Object[] y) {
    boolean comparison = x == y;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  void foo(Object[] x, Object[] y) {
    boolean comparison = Arrays.equals(x, y);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EqualsOnSuspiciousObject" defaultSeverity="WARNING" displayName="'equals()' called on classes which don't override it" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;equals()&lt;/code&gt; calls on &lt;code&gt;StringBuilder&lt;/code&gt;, &lt;code&gt;StringBuffer&lt;/code&gt; and instances of
&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; package.
&lt;p&gt;The &lt;code&gt;equals()&lt;/code&gt; method is not overridden in these classes, so it may return &lt;code&gt;false&lt;/code&gt; even when the contents of the
  two objects are the same.
  If the reference equality is intended, it's better to use &lt;code&gt;==&lt;/code&gt; to avoid confusion.&lt;/p&gt;
A quick-fix for &lt;code&gt;StringBuilder&lt;/code&gt;, &lt;code&gt;StringBuffer&lt;/code&gt;, &lt;code&gt;AtomicBoolean&lt;/code&gt;,
&lt;code&gt;AtomicInteger&lt;/code&gt;, &lt;code&gt;AtomicBoolean&lt;/code&gt; and &lt;code&gt;AtomicLong&lt;/code&gt; is available
to transform into a comparison of contents.
The quick-fix may change the semantics when one of the instances is null.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public void test(StringBuilder sb1, StringBuilder sb2) {
    boolean result = sb1.equals(sb2); // Suspicious
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  public void test(StringBuilder sb1, StringBuilder sb2) {
      boolean result = sb1.toString().equals(sb2.toString());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TextLabelInSwitchStatement" defaultSeverity="WARNING" displayName="Text label in 'switch' statement" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports labeled statements inside of &lt;code&gt;switch&lt;/code&gt; statements.
While occasionally intended, this construction is often the result of a typo.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  switch (x) {
      case 1:
      case2:   //warning: Text label 'case2:' in 'switch' statement
      case 3:
          break;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayObjectsEquals" defaultSeverity="WARNING" displayName="Use of shallow or 'Objects' methods with arrays" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports expressions that seem to use an inappropriate method for determining array equality or calculating their hashcode.
&lt;p&gt;The following method calls are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Object.equals()&lt;/code&gt; for any arrays&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Arrays.equals()&lt;/code&gt; for multidimensional arrays&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Arrays.hashCode()&lt;/code&gt; for multidimensional arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MismatchedArrayReadWrite" defaultSeverity="WARNING" displayName="Mismatched read and write of array" enabled="true" language="JAVA" pluginId="com.intellij.java" pluginVersion="251.27812.49" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arrays whose contents are read but not updated,
or updated but not read. Such inconsistent reads and writes are pointless and probably indicate
dead, incomplete or erroneous code.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  final int[] bar = new int[3];
  bar[2] = 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Redundant constructs" path="Kotlin"><inspection shortName="RedundantValueArgument" defaultSeverity="WEAK WARNING" displayName="Redundant value argument" enabled="false" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arguments that are equal to the default values of the corresponding parameters.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo(x: Int, y: Int = 2) {}

fun bar() {
    foo(1, 2)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun bar() {
    foo(1)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveSetterParameterType" defaultSeverity="WARNING" displayName="Redundant setter parameter type" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports explicitly specified parameter types in property setters.
&lt;p&gt;
    Setter parameter type always matches the property type, so it's not required to be explicit.
    The 'Remove explicit type specification' quick-fix allows amending the code accordingly.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun process(x: Int) {}

  var x: Int = 0
      set(value: Int) = process(value) // &amp;lt;== 'Int' specification can be safely omitted
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun process(x: Int) {}

  var x: Int = 0
      set(value) = process(value)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveRedundantQualifierName" defaultSeverity="WARNING" displayName="Redundant qualifier name" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant qualifiers (or their parts) on class names, functions, and properties.
&lt;p&gt;
    A fully qualified name is an unambiguous identifier that specifies which object, function, or property a call refers to.
    In the contexts where the name can be shortened, the inspection informs on the opportunity and the associated
    'Remove redundant qualifier name' quick-fix allows amending the code.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package my.simple.name
  import kotlin.Int.Companion.MAX_VALUE

  class Foo

  fun main() {
      val a = my.simple.name.Foo()    // 'Foo' resides in the declared 'my.simple.name' package, qualifier is redundant
      val b = kotlin.Int.MAX_VALUE    // Can be replaced with 'MAX_VALUE' since it's imported
      val c = kotlin.Double.MAX_VALUE // Can be replaced with 'Double.MAX_VALUE' since built-in types are imported automatically
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  package my.simple.name
  import kotlin.Int.Companion.MAX_VALUE

  class Foo

  fun main() {
      val a = Foo()
      val b = MAX_VALUE
      val c = Double.MAX_VALUE
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantGetter" defaultSeverity="WEAK WARNING" displayName="Redundant property getter" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant property getters.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
      val a = 1
          &lt;b&gt;get&lt;/b&gt;
      val b = 1
          &lt;b&gt;get() = field&lt;/b&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Test {
      val a = 1
      val b = 1
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantUnitReturnType" defaultSeverity="WARNING" displayName="Redundant 'Unit' return type" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant &lt;code&gt;Unit&lt;/code&gt; return type which can be omitted.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(): Unit {
      ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix removes the &lt;code&gt;Unit&lt;/code&gt; return type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test() {
      ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedVariable" defaultSeverity="WARNING" displayName="Unused variable" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
This inspection reports variables that are not used.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveCurlyBracesFromTemplate" defaultSeverity="WEAK WARNING" displayName="Redundant curly braces in string template" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of curly braces in string templates around simple identifiers.
&lt;p&gt;Use the 'Remove curly braces' quick-fix to remove the redundant braces.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun redundant() {
     val x = 4
     val y = "${x}" // &amp;lt;== redundant
  }

  fun correctUsage() {
      val x = "x"
      val y = "${x.length}" // &amp;lt;== Ok
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun redundant() {
     val x = 4
     val y = "$x"
  }

  fun correctUsage() {
      val x = "x" &amp;lt;== Updated
      val y = "${x.length}"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="KotlinDoubleNegation" defaultSeverity="WEAK WARNING" displayName="Redundant double negation" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant double negations.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  val truth = !!true&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveExplicitTypeArguments" defaultSeverity="WEAK WARNING" displayName="Unnecessary type argument" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports function calls with type arguments that can be automatically inferred. Such type arguments are redundant and can be safely omitted.
&lt;p&gt;Use the 'Remove explicit type arguments' quick-fix to clean up the code.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  // 'String' type can be inferred here
  fun foo(): MutableList&amp;lt;String&amp;gt; = mutableListOf&amp;lt;String&amp;gt;()

  // Here 'String' cannot be inferred, type argument is required.
  fun bar() = mutableListOf&amp;lt;String&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(): MutableList&amp;lt;String&amp;gt; = mutableListOf() &amp;lt;== Updated

  fun bar() = mutableListOf&amp;lt;String&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CanBePrimaryConstructorProperty" defaultSeverity="WARNING" displayName="Property is explicitly assigned to constructor parameter" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties that are explicitly assigned to primary constructor parameters.
&lt;p&gt;Properties can be declared directly in the primary constructor, reducing the amount of code and increasing code readability.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class User(name: String) {
      val name = name
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix joins the parameter and property declaration into a primary constructor parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class User(val name: String) {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantReturnLabel" defaultSeverity="WEAK WARNING" displayName="Redundant 'return' label" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant return labels outside of lambda expressions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test() {
      return@test
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test() {
      return
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantSamConstructor" defaultSeverity="WARNING" displayName="Redundant SAM constructor" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports SAM (Single Abstract Method) constructor usages which can be replaced with lambdas.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun main() {
      foo(&lt;b&gt;Runnable&lt;/b&gt; { println("Hi!") })
  }

  fun foo(other: Runnable) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun main() {
      foo( { println("Hi!") })
  }

  fun foo(other: Runnable) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ExplicitThis" defaultSeverity="INFORMATION" displayName="Redundant explicit 'this'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an explicit &lt;code&gt;this&lt;/code&gt; when it can be omitted.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C {
      private val i = 1
      fun f() = this.i
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes the redundant &lt;code&gt;this&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class C {
      private val i = 1
      fun f() = i
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="KotlinUnusedImport" defaultSeverity="WARNING" displayName="Unused import directive" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;import&lt;/code&gt; statements.

&lt;p&gt;Default and unused imports can be safely removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  import kotlin.*
  import kotlin.collections.*
  import kotlin.comparisons.*
  import kotlin.io.*
  import kotlin.ranges.*
  import kotlin.sequences.*
  import kotlin.text.*

  // jvm specific
  import java.lang.*
  import kotlin.jvm.*

  // js specific
  import kotlin.js.*

  import java.io.* // this import is unused and could be removed
  import java.util.*

  fun foo(list: ArrayList&amp;lt;String&amp;gt;) {
      list.add("")
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantModalityModifier" defaultSeverity="WARNING" displayName="Redundant modality modifier" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the modality modifiers that match the default modality of an element
(&lt;code&gt;final&lt;/code&gt; for most elements, &lt;code&gt;open&lt;/code&gt; for members with an &lt;code&gt;override&lt;/code&gt;).
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;final&lt;/b&gt; class Foo

  open class Bar : Comparable&amp;lt;Bar&amp;gt; {
      &lt;b&gt;open&lt;/b&gt; override fun compareTo(other: Bar): Int = 0
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo

  open class Bar : Comparable&amp;lt;Bar&amp;gt; {
      override fun compareTo(other: Bar): Int = 0
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CanBeParameter" defaultSeverity="WARNING" displayName="Constructor parameter is never used as a property" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports primary constructor parameters that can have &lt;code&gt;val&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt; removed.
&lt;p&gt;
    Class properties declared in the constructor increase memory consumption.
    If the parameter value is only used in the constructor, you can omit them.
&lt;/p&gt;
&lt;p&gt;Note that the referenced object might be garbage-collected earlier.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Task(val name: String) {
      init {
          print("Task created: $name")
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes the extra &lt;code&gt;val&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Task(name: String) {
      init {
          print("Task created: $name")
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ControlFlowWithEmptyBody" defaultSeverity="WARNING" displayName="Control flow with empty body" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; statements with empty bodies.
&lt;p&gt;While occasionally intended, this construction is confusing and often the result of a typo.&lt;/p&gt;
&lt;p&gt;The quick-fix removes a statement.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (a &amp;gt; b) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KotlinRedundantOverride" defaultSeverity="WEAK WARNING" displayName="Redundant overriding method" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant overriding declarations.
&lt;p&gt;
    An override can be omitted if it does not modify the inherited signature semantics, for example, by changing visibility.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;open class&lt;/b&gt; Foo {
      open fun singleExpression() {
      }
  }

  class Bar : Foo() {
      &lt;b&gt;override&lt;/b&gt; fun singleExpression() = super.singleExpression()
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Bar : Foo() {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimpleRedundantLet" defaultSeverity="WARNING" displayName="Redundant receiver-based 'let' call" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant receiver-based &lt;code&gt;let&lt;/code&gt; calls.
&lt;p&gt;The quick-fix removes the redundant &lt;code&gt;let&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(s: String?): Int? = s?.let { it.length }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(s: String?): Int? = s?.length
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RemoveSingleExpressionStringTemplate" defaultSeverity="WARNING" displayName="Redundant string template" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports single-expression string templates that can be safely removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  val x = "Hello"
  val y = "$x"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  val x = "Hello"
  val y = x // &amp;lt;== Updated
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnusedSymbol" defaultSeverity="WARNING" displayName="Unused symbol" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports symbols that are not used or not reachable from entry points.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantIf" defaultSeverity="WEAK WARNING" displayName="Redundant 'if' statement" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;if&lt;/code&gt; statements which can be simplified to a single statement.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(): Boolean {
      if (foo()) {
         return true
      } else {
         return false
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun test(): Boolean {
      return foo()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SimplifyWhenWithBooleanConstantCondition" defaultSeverity="WEAK WARNING" displayName="Simplifiable 'when'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;when&lt;/code&gt; expressions with the constant &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; branches.
&lt;p&gt;&lt;b&gt;Simplify "when"&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun redundant() {
      when { // &amp;lt;== redundant, quick-fix simplifies the when expression to "println("true")"
          true -&gt; println("true")
          else -&gt; println("false")
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveEmptySecondaryConstructorBody" defaultSeverity="WEAK WARNING" displayName="Redundant constructor body" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty bodies of secondary constructors.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfThenToSafeAccess" defaultSeverity="WEAK WARNING" displayName="Can be joined with assignment" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if-then&lt;/code&gt; expressions that can be folded into safe-access (&lt;code&gt;?.&lt;/code&gt;) expressions.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun bar(x: String) = ""

  fun foo(a: String?) {
     if (a != null) bar(a) else null
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick fix converts the &lt;code&gt;if-then&lt;/code&gt; expression into a safe-access (&lt;code&gt;?.&lt;/code&gt;) expression:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun bar(x: String) = ""

  fun foo(a: String?) {
     a?.let { bar(it) }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantElvisReturnNull" defaultSeverity="WARNING" displayName="Redundant '?: return null'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant &lt;code&gt;?: return null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(): Int? {
      ...
  }

  fun test() : Int? {
      return foo() &lt;b&gt;?: return null&lt;/b&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo(): Int? {
      ...
  }

  fun test() : Int? {
      return foo()
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RemoveToStringInStringTemplate" defaultSeverity="WEAK WARNING" displayName="Redundant call to 'toString()' in string template" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls to &lt;code&gt;toString()&lt;/code&gt; in string templates that can be safely removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun foo(a: Int, b: Int) = a + b

  fun test(): String {
      return "Foo: ${foo(0, 4).toString()}" // 'toString()' is redundant
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fun foo(a: Int, b: Int) = a + b

  fun test(): String {
      return "Foo: ${foo(0, 4)}"
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CanUnescapeDollarLiteral" defaultSeverity="WEAK WARNING" displayName="Redundant escaped dollar characters in string literals" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports that escaped dollar characters in a string can be replaced with regular literals.
&lt;p&gt;
    Escaping is only necessary when string content after dollar can be misinterpreted as a string interpolation entry.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
    "The price today is \$10. The price tomorrow will be ${'$'}20."
  }
&lt;/code&gt;&lt;/pre&gt;
The quick fix converts all safely replaceable escaped dollar characters to regular dollar characters:
&lt;pre&gt;&lt;code&gt;
  fun example() {
    "The price today is $10. The price tomorrow will be $20."
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantUnitExpression" defaultSeverity="WARNING" displayName="Redundant 'Unit'" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;Unit&lt;/code&gt; expressions.
&lt;p&gt;
    &lt;code&gt;Unit&lt;/code&gt; in Kotlin can be used as the return type of functions that do not return anything meaningful.
    The &lt;code&gt;Unit&lt;/code&gt; type has only one possible value, which is the &lt;code&gt;Unit&lt;/code&gt; object.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun redundantA(): Unit {
      return Unit // redundant, 'Unit' is returned by default and matches the expected return type
  }

  fun requiredA(condition: Boolean): Any {
      if (condition) return "hello"
      return Unit // explicit 'Unit' is required since the expected type is 'Any'
  }

  fun redundantB(condition: Boolean): Any = if (condition) {
      fun ancillary(): Int = 1
      println("${ancillary()}")
      Unit // redundant since the last expression is already of type 'Unit'
  } else {
      println("else")
  }

  fun requiredB(condition: Boolean): Any = if (condition) {
      1024
      Unit // required, otherwise '1024' (Int) would be the return value
  } else {
      println("else")
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantLabeledReturnOnLastExpressionInLambda" defaultSeverity="INFORMATION" displayName="Redundant labeled return on the last expression in a lambda" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports labeled returns used on the last expressions in lambdas.

&lt;p&gt;Such returns are redundant and can be safely removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo() {
  listOf(1,2,3).find {
    return@find true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun foo() {
  listOf(1,2,3).find {
    true
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ComplexRedundantLet" defaultSeverity="WEAK WARNING" displayName="Redundant argument-based 'let' call" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant argument-based &lt;code&gt;let&lt;/code&gt; call.
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is redundant when the lambda parameter is only used as a qualifier in a call expression.&lt;/p&gt;
&lt;p&gt;If you need to give a name to the qualifying expression, declare a local variable.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun splitNumbers() {
      "1,2,3".let { it.split(',') }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes the extra &lt;code&gt;let()&lt;/code&gt; call:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      "1,2,3".split(',')
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternative:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun splitNumbers() {
      val numbers = "1,2,3"
      numbers.split(',')
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveRedundantBackticks" defaultSeverity="WARNING" displayName="Redundant backticks" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant backticks in references.
&lt;p&gt;
    Some of the Kotlin keywords are valid identifiers in Java, for example: &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;.
    If a Java library uses a Kotlin keyword for a method, you can still call the method escaping it
    with the backtick character (&lt;code&gt;`&lt;/code&gt;), for example, &lt;code&gt;foo.`is`(bar)&lt;/code&gt;.
    Sometimes this escaping is redundant and can be safely omitted. The inspection discovers and reports such cases and is
    paired with the 'Remove redundant backticks' quick-fix, which allows you to amend the highlighted code.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun `is`(x: String) {}
  fun foo() {
      `is`("bar") // 'is' is a keyword, backticks are required
  }

  fun `test that smth works as designed`() {} // OK, complex identifier for readability improvement

  val `a` = 1  // no need for backticks
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantSemicolon" defaultSeverity="WARNING" displayName="Redundant semicolon" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
    Reports redundant semicolons (&lt;code&gt;;&lt;/code&gt;) that can be safely removed.
&lt;p&gt;
    Kotlin does not require a semicolon at the end of each statement or expression.
    The quick-fix is suggested to remove redundant semicolons.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val myMap = mapOf("one" to 1, "two" to 2);
  myMap.forEach { (key, value) -&gt;  print("$key -&gt; $value")};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  val myMap = mapOf("one" to 1, "two" to 2)
  myMap.forEach { (key, value) -&gt;  print("$key -&gt; $value")}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two cases though where a semicolon is required:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;
        Several statements placed on a single line need to be separated with semicolons:
&lt;pre&gt;&lt;code&gt;
  map.forEach { val (key, value) = it; println("$key -&gt; $value") }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;code&gt;enum&lt;/code&gt; classes that also declare properties or functions, require a semicolon after the list of enum constants:
        &lt;pre&gt;&lt;code&gt;
  enum class Mode {
      SILENT, VERBOSE;

      fun isSilent(): Boolean = this == SILENT
  }
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
&lt;/ol&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantSuspendModifier" defaultSeverity="WARNING" displayName="Redundant 'suspend' modifier" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;suspend&lt;/code&gt; modifier as redundant if no other suspending functions are called inside.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="VariableInitializerIsRedundant" defaultSeverity="WARNING" displayName="Variable initializer is redundant" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant initializers for local variables.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      var local = 42 // Initializer is redundant
      local = 0
      println(local)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantConstructorKeyword" defaultSeverity="WEAK WARNING" displayName="Redundant 'constructor' keyword" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports a redundant 'constructor' keyword on primary constructors.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo &lt;b&gt;constructor&lt;/b&gt;(x: Int, y: Int)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo(x: Int, y: Int)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="WhenWithOnlyElse" defaultSeverity="WEAK WARNING" displayName="'when' has only 'else' branch and can be simplified" enabled="false" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;when&lt;/code&gt; expressions with only an &lt;code&gt;else&lt;/code&gt; branch that can be simplified.
&lt;p&gt;&lt;b&gt;Simplify expression&lt;/b&gt; quick-fix can be used to amend the code automatically.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun redundant() {
      val x = when { // &amp;lt;== redundant, the quick-fix simplifies the when expression to "val x = 1"
          else -&gt; 1
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantEmptyInitializerBlock" defaultSeverity="WEAK WARNING" displayName="Redundant empty initializer block" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant empty initializer blocks.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
      init {
          // Empty init block
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Foo {
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantSetter" defaultSeverity="WEAK WARNING" displayName="Redundant property setter" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant property setters.
&lt;p&gt;
Setter is considered to be redundant in one of the following cases:
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;
        Setter has no body. Accessor visibility isn't changed, declaration isn't &lt;code&gt;external&lt;/code&gt; and has no annotations.
        &lt;pre&gt;&lt;code&gt;
  var myPropWithRedundantSetter: Int = 0
      set // redundant

  var myPropA: Int = 0
      private set // OK - property visibility is changed to private

  var myPropB: Int = 0
      external set // OK - implemented not in Kotlin (external)

  var myPropC: Int = 0
      @Inject set // OK - accessor is annotated
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
    &lt;li&gt;
        Setter body is a block with a single statement assigning the parameter to the backing field.
        &lt;pre&gt;&lt;code&gt;
  var prop: Int = 0
      set(value) { // redundant
          field = value
      }
       &lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
&lt;/ol&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveEmptyParenthesesFromLambdaCall" defaultSeverity="WEAK WARNING" displayName="Unnecessary parentheses in function call with lambda" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant empty parentheses of function calls where the only parameter is a lambda that's outside the parentheses.
&lt;p&gt;Use the 'Remove unnecessary parentheses from function call with lambda' quick-fix to clean up the code.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() {
      listOf(1).forEach() {  }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun foo() {
      listOf(1).forEach {  }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveEmptyClassBody" defaultSeverity="WEAK WARNING" displayName="Replace empty class body" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations of classes and objects with an empty body.
&lt;p&gt;Use the 'Remove redundant empty class body' quick-fix to clean up the code.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class EmptyA() {} // &amp;lt;== empty body

  class EmptyB {
      companion object {} // &amp;lt;== empty body
  }

  fun emptyC() {
     object {} // &amp;lt;== anonymous object, it's ok (not reported)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class EmptyA()

  class EmptyB {
      companion object
  }

  fun emptyC() {
     object {}
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ConstantConditionIf" defaultSeverity="WEAK WARNING" displayName="Condition of 'if' expression is constant" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;if&lt;/code&gt; expressions that have &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
constant literal condition and can be simplified.
&lt;p&gt;While occasionally intended, this construction is confusing and often the result of a typo
    or previous refactoring.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      if (true) {
          throw IllegalStateException("Unexpected state")
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix removes the &lt;code&gt;if&lt;/code&gt; condition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  fun example() {
      throw IllegalStateException("Unexpected state")
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RemoveRedundantCallsOfConversionMethods" defaultSeverity="WARNING" displayName="Redundant call of the conversion method" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant calls to conversion methods (for example, &lt;code&gt;toString()&lt;/code&gt; on a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;toDouble()&lt;/code&gt;
on a &lt;code&gt;Double&lt;/code&gt;).
&lt;p&gt;Use the 'Remove redundant calls of the conversion method' quick-fix to clean up the code.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantVisibilityModifier" defaultSeverity="WARNING" displayName="Redundant visibility modifier" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports visibility modifiers that match the default visibility of an element
(&lt;code&gt;public&lt;/code&gt; for most elements, &lt;code&gt;protected&lt;/code&gt; for members that override a protected member).
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantExplicitType" defaultSeverity="WARNING" displayName="Obvious explicit type" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports local variables' explicitly given types which are obvious and thus redundant, like &lt;code&gt;val f: Foo = Foo()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Point(val x: Int, val y: Int)

  fun foo() {
      val t: &lt;b&gt;Boolean&lt;/b&gt; = true
      val p: &lt;b&gt;Point&lt;/b&gt; = Point(1, 2)
      val i: &lt;b&gt;Int&lt;/b&gt; = 42
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class Point(val x: Int, val y: Int)

  fun foo() {
      val t = true
      val p = Point(1, 2)
      val i = 42
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UnusedReceiverParameter" defaultSeverity="WARNING" displayName="Unused receiver parameter" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports receiver parameter of extension functions and properties that is not used.
&lt;p&gt;&lt;b&gt;Remove redundant receiver parameter&lt;/b&gt; can be used to amend the code automatically.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="RedundantInterpolationPrefix" defaultSeverity="WEAK WARNING" displayName="Redundant interpolation prefix" enabled="true" language="kotlin" pluginId="org.jetbrains.kotlin" pluginVersion="251.27812.49-IJ" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant dollar prefixes in string template expressions.
&lt;p&gt;
Such prefixes can be safely removed.
&lt;/p&gt;
&lt;p&gt;
Example:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun example() {
    $"Example: prefix of length one is always redundant"
    $$"Example: string contains no interpolated values"
    $$"Example: $$ dollars are plain characters here $$"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fixes are applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
fun example() {
    "Example: prefix of length one is always redundant"
    "Example: string contains no interpolated values"
    "Example: $$ dollars are plain characters here $$"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group></inspections>