services:
  # PostgreSQL for user management
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: chatdb
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chat-network

  # MongoDB for message storage
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - chat-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chat-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - chat-network

  # Kafka for message queuing
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - chat-network

  # Elasticsearch for message search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - chat-network

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Database connections
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/chatdb
      - SPRING_DATASOURCE_USERNAME=chatuser
      - SPRING_DATASOURCE_PASSWORD=chatpass
      
      # MongoDB connection
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/chatdb
      
      # Redis connection
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      
      # Kafka connection
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      
      # CORS settings
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:80
      
      # WebSocket settings
      - WEBSOCKET_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:80
      
      # Application settings
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - LOGGING_LEVEL_COM_CHATPLATFORM=INFO
    depends_on:
      - postgres
      - mongodb
      - redis
      - kafka
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      # Backend API URL for container communication
      - REACT_APP_API_BASE_URL=http://backend:8080
      # WebSocket URL for container communication
      - REACT_APP_WS_URL=ws://backend:8080
    depends_on:
      - backend
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_log:
  elasticsearch_data:

networks:
  chat-network:
    driver: bridge