# Multi-stage Dockerfile for single service deployment (Spring Boot + React)
# Stage 1: Build the application
FROM eclipse-temurin:17-jdk AS builder

# Install Node.js for frontend build
RUN apt-get update && apt-get install -y curl && \
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY backend/build.gradle ./backend/
COPY backend/settings.gradle ./backend/
COPY backend/gradle.properties ./backend/
COPY backend/gradlew ./backend/
COPY backend/gradlew.bat ./backend/
COPY backend/gradle/ ./backend/gradle/
COPY frontend/package*.json ./frontend/

# Set working directory to backend for initial setup
WORKDIR /app/backend

# Make gradlew executable and download dependencies (cached layer)
RUN chmod +x ./gradlew && \
    ./gradlew --no-daemon dependencies

# Install frontend dependencies (cached layer)
WORKDIR /app/frontend
RUN npm ci --only=production

# Copy source code (changes frequently, should be last)
WORKDIR /app
COPY frontend/src ./frontend/src
COPY frontend/public ./frontend/public
COPY frontend/tsconfig.json ./frontend/
COPY frontend/tailwind.config.js ./frontend/
COPY frontend/generate-build-info.js ./frontend/
COPY backend/src ./backend/src

# Set working directory to backend for build
WORKDIR /app/backend

# Build the application (this will also build the React frontend)
RUN ./gradlew buildForRender --no-daemon

# Stage 2: Create the runtime image
FROM openjdk:17-jdk-slim

# Install curl for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r app && useradd -r -g app app

# Set working directory
WORKDIR /app

# Copy the built JAR from builder stage
COPY --from=builder /app/backend/build/libs/chat-platform-backend-*.jar app.jar

# Change ownership to app user
RUN chown -R app:app /app

# Switch to app user
USER app

# Expose the port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/api/health/status || exit 1

# JVM optimization for containers and fast startup
ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:TieredStopAtLevel=1 -noverify"

# Run the application
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar --spring.profiles.active=render"]

# Labels for metadata
LABEL maintainer="Chat Platform Team"
LABEL description="Single-service chat platform deployment (Spring Boot + React)"
LABEL version="1.0.0"