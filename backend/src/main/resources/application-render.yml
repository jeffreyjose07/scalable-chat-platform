spring:
  # Render deployment profile - single service with external dependencies
  # Optimized for Neon PostgreSQL serverless database
  
  # Lazy initialization for faster startup (20-40% improvement)
  main:
    lazy-initialization: true
    
  # PostgreSQL Configuration (Neon serverless database)
  datasource:
    url: ${DATABASE_URL}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10     # Neon supports more connections with built-in pooling
      minimum-idle: 2
      connection-timeout: 30000 # Longer timeout for serverless cold starts
      idle-timeout: 600000      # 10 minutes idle timeout
      max-lifetime: 1800000     # 30 minutes max lifetime
      connection-test-query: SELECT 1  # Test query for connection validation
      validation-timeout: 5000  # Validation timeout for health checks
      auto-commit: false        # Required for Spring transaction management
      
  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
        # Neon-specific optimizations
        jdbc:
          time_zone: UTC          # Ensure consistent timezone handling
          batch_size: 25          # Optimize batch operations
        connection:
          provider_disables_autocommit: true  # Better transaction management
        order_inserts: true       # Optimize insert operations
        order_updates: true       # Optimize update operations
        
  # MongoDB Configuration (MongoDB Atlas)
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017/chatdb}
      database: chatdb
      auto-index-creation: true
      
  # Redis Configuration (External service - Upstash or similar)
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    timeout: 2000ms
    ssl: true
    lettuce:
      pool:
        max-active: 3           # Conservative for free tier
        max-idle: 2
        min-idle: 0
        
# Server Configuration
server:
  port: ${PORT:8080}
  compression:
    enabled: true
  tomcat:
    threads:
      max: 50                   # Conservative for free tier
      min-spare: 5
      
  # Static resources configuration for serving React app
  servlet:
    context-path: /
  resources:
    static-locations: classpath:/static/
    cache:
      cachecontrol:
        max-age: 3600           # Cache static files for 1 hour
        must-revalidate: true
    
# WebSocket Configuration
websocket:
  allowed-origins: ${WEBSOCKET_ALLOWED_ORIGINS:*}
  
# Application Configuration with JWT Security
app:
  jwt:
    secret: ${JWT_SECRET:defaultTempSecretChangeInProduction123456789}
    expiration: ${JWT_EXPIRATION:14400000} # 4 hours (matches security implementation)
    issuer: ${JWT_ISSUER:chat-platform-backend}
    audience: ${JWT_AUDIENCE:chat-platform-users}
  
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
  
  admin:
    username: ${ADMIN_USERNAME:admin}
    email: ${ADMIN_EMAIL:admin@chatplatform.com}
    password: ${ADMIN_PASSWORD:TempPass123!}
    displayName: ${ADMIN_DISPLAY_NAME:System Administrator}
  
# Logging Configuration (Optimized for Render)
logging:
  level:
    com.chatplatform: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type: WARN
    org.mongodb: WARN
  pattern:
    console: "%d{HH:mm:ss} %-5level %logger{36} - %msg%n"
    
# Management/Health Check Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /api/actuator
  endpoint:
    health:
      show-details: when-authorized
      
  
# Render Optimizations
spring.jpa.open-in-view: false
spring.devtools.restart.enabled: false
spring.devtools.livereload.enabled: false

# Resource limits for free tier
spring.datasource.hikari.leak-detection-threshold: 30000

# Single service optimizations  
spring.task.execution.pool.max-size: 4
spring.task.execution.pool.core-size: 2
spring.task.scheduling.pool.size: 2

# Additional startup optimizations
spring.autoconfigure.exclude: |
  org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,
  org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration