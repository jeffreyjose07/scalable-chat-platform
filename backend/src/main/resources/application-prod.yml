# Production configuration for Render deployment
# This file is specifically for production environment with security hardening

spring:
  profiles:
    active: prod
  
  application:
    name: chat-platform
  
  # Database configuration for Render PostgreSQL
  datasource:
    url: ${DATABASE_URL:${SPRING_DATASOURCE_URL}}
    username: ${SPRING_DATASOURCE_USERNAME:}
    password: ${SPRING_DATASOURCE_PASSWORD:}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          time_zone: UTC
    open-in-view: false
  
  # MongoDB configuration for Render MongoDB
  data:
    mongodb:
      uri: ${MONGODB_URI:${SPRING_DATA_MONGODB_URI}}
      auto-index-creation: true
      
    # Redis configuration for JWT token blacklisting
    redis:
      url: ${REDIS_URL:${SPRING_REDIS_URL}}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 2
          max-wait: 2000ms
        shutdown-timeout: 100ms
  
  # Kafka configuration (if using external Kafka service)
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        max.in.flight.requests.per.connection: 1
        enable.idempotence: true
        retries: 3
        request.timeout.ms: 30000
        delivery.timeout.ms: 60000
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        sasl.mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
        sasl.jaas.config: ${KAFKA_SASL_JAAS_CONFIG:}
    consumer:
      group-id: chat-platform-prod
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.chatplatform.model"
        session.timeout.ms: 30000
        heartbeat.interval.ms: 3000
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        sasl.mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
        sasl.jaas.config: ${KAFKA_SASL_JAAS_CONFIG:}
    admin:
      properties:
        request.timeout.ms: 30000
        connections.max.idle.ms: 30000
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        sasl.mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
        sasl.jaas.config: ${KAFKA_SASL_JAAS_CONFIG:}
      fail-fast: false

  # Elasticsearch configuration (if using external service)
  elasticsearch:
    uris: ${ELASTICSEARCH_URIS:http://localhost:9200}
    username: ${ELASTICSEARCH_USERNAME:}
    password: ${ELASTICSEARCH_PASSWORD:}

# Server configuration for Render
server:
  port: ${PORT:8080}
  servlet:
    context-path: /
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

# Management and monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,info,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  server:
    port: ${MANAGEMENT_PORT:${server.port}}

# Application-specific configuration with security hardening
app:
  # JWT Security Configuration - PRODUCTION HARDENED
  jwt:
    secret: ${JWT_SECRET:} # MUST be set via environment variable
    expiration: ${JWT_EXPIRATION:14400000} # 4 hours in milliseconds
    issuer: ${JWT_ISSUER:chat-platform-backend}
    audience: ${JWT_AUDIENCE:chat-platform-users}
  
  # CORS Configuration - Restrict to frontend domain
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:https://your-frontend-app.onrender.com}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600
  
  # Admin Configuration - Use strong credentials in production
  admin:
    username: ${ADMIN_USERNAME:admin}
    email: ${ADMIN_EMAIL:admin@chatplatform.com}
    password: ${ADMIN_PASSWORD:} # MUST be set via environment variable
    displayName: ${ADMIN_DISPLAY_NAME:System Administrator}

# Security-focused logging configuration
logging:
  level:
    root: INFO
    com.chatplatform: INFO
    org.springframework.security: WARN
    org.springframework.web.socket: WARN
    org.springframework.data.mongodb: WARN
    org.springframework.kafka: WARN
    # Security-related logging
    com.chatplatform.security: INFO
    com.chatplatform.service.TokenBlacklistService: INFO
    com.chatplatform.service.JwtService: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /tmp/chat-platform.log
    max-size: 100MB
    max-history: 30

# Additional production settings
spring.jpa.open-in-view: false
spring.jpa.properties.hibernate.generate_statistics: false
spring.jpa.properties.hibernate.jdbc.batch_size: 25
spring.jpa.properties.hibernate.order_inserts: true
spring.jpa.properties.hibernate.order_updates: true

# Connection pool settings
spring.datasource.hikari.leak-detection-threshold: 60000

# MongoDB settings for production
spring.data.mongodb.field-naming-strategy: org.springframework.data.mapping.model.SnakeCaseFieldNamingStrategy

# Security headers and session management
server.servlet.session.cookie.http-only: true
server.servlet.session.cookie.secure: true
server.servlet.session.cookie.same-site: strict